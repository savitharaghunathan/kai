
window["apps"] = [{"id":"0000","name":"coolstore","rulesets":[{"name":"azure/springboot","description":"Recommend OpenFeign instead of Feign.","skipped":["azure-aws-config-credential-01000","azure-aws-config-region-02000","azure-aws-config-s3-03000","azure-aws-config-secret-manager-05000","azure-aws-config-sqs-04000","azure-file-system-01000","azure-file-system-02000","azure-file-system-03000","azure-java-version-01000","azure-java-version-02000","azure-logging-0000","azure-os-specific-00001","azure-os-specific-00002","azure-password-01000","eap-to-azure-appservice-certificates-001","eap-to-azure-appservice-datasource-driver-01000","eap-to-azure-appservice-environment-variables-001","eap-to-azure-appservice-pom-001","spring-boot-to-azure-cache-redis-01000","spring-boot-to-azure-cache-redis-02000","spring-boot-to-azure-config-server-01000","spring-boot-to-azure-database-jdbc-01000","spring-boot-to-azure-database-mongodb-02000","spring-boot-to-azure-database-r2dbc-03000","spring-boot-to-azure-eureka-01000","spring-boot-to-azure-eureka-02000","spring-boot-to-azure-feign-01000","spring-boot-to-azure-identity-provider-01000","spring-boot-to-azure-java-fx-01000","spring-boot-to-azure-jks-01000","spring-boot-to-azure-jms-broker-01000","spring-boot-to-azure-mq-config-artemis-01000","spring-boot-to-azure-mq-config-kafka-01000","spring-boot-to-azure-mq-config-rabbitmq-01000","spring-boot-to-azure-port-01000","spring-boot-to-azure-schedule-job-01000","spring-boot-to-azure-static-content-01000","spring-boot-to-azure-swing-01000","spring-boot-to-azure-system-config-01000","spring-boot-to-azure-version-01000","spring-boot-to-azure-version-02000","spring-boot-to-azure-version-03000","spring-boot-to-azure-zipkin-01000","spring-cloud-to-azure-version-01000","spring-cloud-to-azure-version-02000","spring-cloud-to-azure-version-03000","tomcat-to-azure-external-resources-01000"]},{"name":"camel3","description":"Rules for changes between Camel 3.0 and Camel 4.0","skipped":["xml-changed-camel41-00003","xml-changed-camel41-00004","xml-changed-camel41-00005","xml-changed-camel41-00006","xml-changed-camel41-00007","xml-changed-camel41-00008","xml-changed-camel41-00009","xml-changed-camel41-00010","xml-changed-camel41-00011","xml-changed-camel41-00012","xml-changed-camel41-00013","xml-changed-camel41-00014","xml-changed-camel41-00015","xml-changedcomponent-camel4-00001","xml-changedcomponent-camel4-00002","xml-removed-camel4-00001","xml-removed-camel4-00002","xml-removed-camel4-00003","xml-removed-camel4-00004","xml-removed-camel4-00005","xml-removed-camel4-00006","xml-removed-camel4-00007","xml-removed-camel4-00008","xml-removed-camel4-00010","xml-removed-camel4-00011","xml-removed-camel4-00012","xml-removed-camel4-00013","xml-removed-camel4-00014","xml-removed-camel4-00015","xml-removed-camel4-00016","xml-removed-camel4-00017","xml-removed-camel4-00018","xml-removed-camel4-00019","xml-removed-camel4-00020","xml-removed-camel4-00021","xml-removed-camel4-00022","xml-removed-camel4-00023","xml-removed-camel4-00024","xml-removed-camel4-00025","xml-removed-camel4-00026","xml-removed-camel4-00027","xml-removed-camel4-00028","xml-removed-camel4-00029","xml-removed-camel4-00030","xml-removed-camel4-00031","xml-removed-camel4-00032","xml-removed-camel4-00033","xml-removed-camel4-00034","xml-removed-camel41-00000","xml-removed-camel41-00001","xml-removed-camel41-00002","xml-removed-camel41-00016","xml-removed-camel41-00017","xml-removed-camel41-00018"]},{"name":"camel3/camel2","description":"Rules for changes in XML file (e.g. pom.xml) to run on Apache Camel 3","skipped":["component-changes-00019","java-dsl-changes-00001","java-generic-information-00000","java-generic-information-00001","java-generic-information-00002","java-generic-information-00004","java-generic-information-00005","java-generic-information-00006","java-generic-information-00008","java-generic-information-00009","java-generic-information-00010","java-generic-information-00011","java-generic-information-00012","java-generic-information-00013","java-generic-information-00014","java-generic-information-00015","java-generic-information-00016","java-generic-information-00017","java-generic-information-00018","java-generic-information-00019","java-generic-information-00021","java-generic-information-00022","java-generic-information-00023","java-generic-information-00024","java-generic-information-00025","java-generic-information-00026","java-generic-information-00027","java-generic-information-00028","java-generic-information-00029","java-generic-information-00030","java-generic-information-00031","java-generic-information-00032","java-generic-information-00033","java-generic-information-00045","java-generic-information-00046","java-generic-information-00047","java-generic-information-00048","java-generic-information-00049","java-generic-information-00050","java-generic-information-00051","java-generic-information-00052","java-multiple-camelcontexts-per-application-not-supported-00000","java-multiple-camelcontexts-per-application-not-supported-00001","xml-dsl-changes-00001","xml-dsl-changes-00002","xml-dsl-changes-00003","xml-dsl-changes-00004","xml-dsl-changes-00005","xml-dsl-changes-00006","xml-dsl-changes-00007","xml-dsl-changes-00008","xml-dsl-changes-00009","xml-java-versions-00001","xml-java-versions-00002","xml-java-versions-00003","xml-moved-components-00012","xml-moved-components-00013","xml-moved-components-00014","xml-moved-components-00015","xml-removed-components-00000","xml-removed-components-00001","xml-removed-components-00002","xml-removed-components-00003","xml-removed-components-00004","xml-removed-components-00005","xml-removed-components-00005-01","xml-removed-components-00006","xml-removed-components-00007","xml-removed-components-00007-01","xml-removed-components-00008","xml-removed-components-00008-01","xml-renamed-components-00000","xml-renamed-components-00001","xml-renamed-components-000019","xml-renamed-components-00002","xml-renamed-components-000020","xml-renamed-components-000023","xml-renamed-components-000024","xml-renamed-components-000027","xml-renamed-components-000028","xml-renamed-components-000029","xml-renamed-components-00003","xml-renamed-components-00004","xml-renamed-components-00005","xml-renamed-components-00006","xml-renamed-components-00007","xml-renamed-components-00008","xml-renamed-components-00009","xml-renamed-components-00010","xml-renamed-components-00011","xml-renamed-components-00012","xml-renamed-components-00013","xml-renamed-components-00014","xml-renamed-components-00015","xml-renamed-components-00016","xml-renamed-components-00017","xml-renamed-components-00018","xml-renamed-components-00021","xml-renamed-components-00022","xml-renamed-components-00025","xml-renamed-components-00026"]},{"name":"cloud-readiness","description":"This ruleset detects logging configurations that may be problematic when migrating an application to a cloud environment.","violations":{"session-00000":{"description":"HTTP session replication (distributable web.xml)","category":"mandatory","labels":["clustering","konveyor.io/source=java","konveyor.io/source=java-ee","konveyor.io/target=cloud-readiness"],"incidents":[{"uri":"file:///tmp/source-code/src/main/webapp/WEB-INF/web.xml","message":"\n Session replication ensures that client sessions are not disrupted by node failure. Each node in the cluster shares information about ongoing sessions and can take over sessions if another node disappears. In a cloud environment, however, data in the memory of a running container can be wiped out by a restart.\n\n Recommendations\n\n * Review the session replication usage and ensure that it is configured properly.\n * Disable HTTP session clustering and accept its implications.\n * Re-architect the application so that sessions are stored in a cache backing service or a remote data grid.\n\n A remote data grid has the following benefits:\n\n * The application is more scaleable and elastic.\n * The application can survive EAP node failures because a JVM failure does not cause session data loss.\n * Session data can be shared by multiple applications.\n ","codeSnip":"  1  \u003c!--suppress ServletWithoutMappingInspection --\u003e\n  2  \u003cweb-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  3           xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n  4           version=\"3.0\"\u003e\n  5      \u003cdistributable /\u003e\n  6  \u003c/web-app\u003e\n","lineNumber":5,"variables":{"data":"distributable","innerText":"","matchingXML":""}}],"links":[{"url":"https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/getting_started_with_jboss_eap_for_openshift_container_platform/index#reference_clustering","title":"Getting Started with JBoss EAP for OpenShift Container Platform: Clustering"},{"url":"https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/configuration_guide/index#jdg_externalize_http_sessions","title":"JBoss EAP:  Externalize HTTP Sessions to Red Hat Data Grid"},{"url":"https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html/development_guide/clustering_in_web_applications","title":"JBoss EAP: Clustering in Web Applications"},{"url":"https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.0/html-single/running_data_grid_on_openshift/index","title":"Running Data Grid on OpenShift"},{"url":"https://12factor.net/backing-services","title":"Twelve-Factor App: Backing services"},{"url":"https://12factor.net/processes","title":"Twelve-Factor App: Processes"}],"Extras":null,"effort":3}},"unmatched":["embedded-cache-libraries-01000","embedded-cache-libraries-01000","embedded-cache-libraries-02000","embedded-cache-libraries-02000","embedded-cache-libraries-03000","embedded-cache-libraries-03000","embedded-cache-libraries-04000","embedded-cache-libraries-04000","embedded-cache-libraries-04000","embedded-cache-libraries-05000","embedded-cache-libraries-05000","embedded-cache-libraries-06000","embedded-cache-libraries-06000","embedded-cache-libraries-07000","embedded-cache-libraries-07000","embedded-cache-libraries-08000","embedded-cache-libraries-08000","embedded-cache-libraries-09000","embedded-cache-libraries-09000","embedded-cache-libraries-10000","embedded-cache-libraries-10000","embedded-cache-libraries-11000","embedded-cache-libraries-11000","embedded-cache-libraries-12000","embedded-cache-libraries-12000","embedded-cache-libraries-13000","embedded-cache-libraries-13000","embedded-cache-libraries-14000","embedded-cache-libraries-14000","embedded-cache-libraries-15000","embedded-cache-libraries-15000","embedded-cache-libraries-16000","java-corba-00000","java-rmi-00000","java-rmi-00000","java-rmi-00000","java-rmi-00000","java-rmi-00001","java-rmi-00001","java-rpc-00000","java-rpc-00000","jca-00000","jca-00000","jni-native-code-00000","jni-native-code-00000","jni-native-code-00001","local-storage-00001","local-storage-00001","local-storage-00002","local-storage-00002","local-storage-00004","local-storage-00004","local-storage-00005","local-storage-00005","local-storage-00006","localhost-http-00001","localhost-jdbc-00002","localhost-ws-00003","logging-0000","logging-0000","logging-0000","logging-0000","logging-0001","logging-0001","logging-0001","logging-0001","mail-00000","mail-00000","session-00001","session-00001","socket-communication-00000","socket-communication-00000","socket-communication-00001","socket-communication-00001"]},{"name":"discovery-rules","tags":["EJB XML","JPA XML","Java Source","License=Apache License 2.0","License=GNU GPL","Maven XML","Spring XML","Web XML"],"unmatched":["discover-manifest-file","discover-properties-file","hardcoded-ip-address"]},{"name":"droolsjbpm","description":"This ruleset provides help for migrating to a unified KIE (Knowledge Is Everything) API in the upgrade from version 5 to 6.","skipped":["kie-api-01000","kie-api-01001","kie-api-01002","kie-api-01003","kie-api-01004","kie-api-01005","kie-api-01006","kie-api-01007","kie-api-01008","kie-api-01009","kie-api-01010","kie-api-01011","kie-api-01012","kie-api-01013","kie-api-01014","kie-api-01015","kie-api-01016"]},{"name":"eap7/weblogic/tests/data","violations":{"maven-javax-to-jakarta-00002":{"description":"Move to Jakarta EE Maven Artifacts - replace groupId javax.activation","category":"potential","labels":["JakartaEE","konveyor.io/source","konveyor.io/target=eap","konveyor.io/target=eap7","konveyor.io/target=eap8","konveyor.io/target=jakarta-ee","konveyor.io/target=jakarta-ee8"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"If you migrate your application to JBoss EAP 7.3, or later, and want to ensure its Maven building, running or testing works as expected, use instead the Jakarta EE dependency with groupId `com.sun.activation`","variables":{"name":"javax.activation.activation","version":"1.1"}}],"links":[{"url":"https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/migration_guide/index#maven-artifact-changes-for-jakarta-ee_default","title":"Red Hat JBoss EAP 7.3 Migration Guide: Maven Artifact Changes for Jakarta EE"}],"Extras":null,"effort":1}},"unmatched":["maven-javax-to-jakarta-00001","maven-javax-to-jakarta-00003","maven-javax-to-jakarta-00004","maven-javax-to-jakarta-00005","maven-javax-to-jakarta-00006","maven-javax-to-jakarta-00007","maven-javax-to-jakarta-00008","maven-javax-to-jakarta-00010","maven-javax-to-jakarta-00011","maven-javax-to-jakarta-00012","maven-javax-to-jakarta-00013","maven-javax-to-jakarta-00014","maven-javax-to-jakarta-00015","maven-javax-to-jakarta-00016","maven-javax-to-jakarta-00017"],"skipped":["base64-01000","deprecated-singletonpolicy-00001","eap6-08000","eap6-11000","eap6-12000","eap6-xml-05000","eap6-xml-06000","eap7-websphere-xml-01000","eap7-websphere-xml-02000","eap7-websphere-xml-03500","eap7-websphere-xml-06000","eap7-websphere-xml-07000","eap7-websphere-xml-08000","eap7-websphere-xml-09000","embedded-framework-libraries-01000","embedded-framework-libraries-02000","embedded-framework-libraries-04000","embedded-framework-libraries-05000","embedded-framework-libraries-06000","hibernate4-00001","hibernate4-00002","hibernate4-00003","hibernate4-00004","hibernate4-00005","hibernate4-00006","hibernate4-00007","hibernate4-00008","hibernate4-00009","hibernate4-00010","hibernate4-00011","hibernate4-00012","hibernate4-00013","hibernate4-00014","hibernate4-00015","hibernate4-00016","hibernate4-00017","hibernate4-00018","hibernate4-00021","hibernate4-00022","hibernate4-00023","hibernate4-00024","hibernate4-00025","hibernate4-00026","hibernate4-00027","hibernate4-00028","hibernate4-00030","hibernate4-00031","hibernate4-00032","hibernate4-00033","hibernate4-00034","hibernate4-00035","hibernate4-00036","hibernate4-00037","hibernate4-00038","hibernate4-00039","hibernate4-00040","hibernate4-xml-00001","hibernate4-xml-00002","hibernate4-xml-00003","hibernate4-xml-00004","hibernate4-xml-00005","hibernate50-51-00000","hibernate50-51-00100","hibernate51-53-00001","hibernate51-53-00100","hibernate51-53-00300","hibernate51-53-00400","hibernate51-53-00401","hibernate51-53-00402","hibernate51-53-00403","hibernate51-53-00404","hibernate51-53-00405","hibernate51-53-00406","hibernate51-53-00407","hibernate51-53-00500","hibernate51-53-00600","hibernate51-53-00700","hibernate51-53-00701","hibernate51-53-00702","hibernate51-53-00800","hibernate51-53-01000","hibernate51-53-01001","hibernate51-53-01100","hibernate51-53-01200","hsearch-00000","hsearch-00001","hsearch-00002","hsearch-00003","hsearch-00004","hsearch-00005","hsearch-00006","hsearch-00007","hsearch-00008","hsearch-00009","hsearch-00010","hsearch-00011","hsearch-00100","hsearch-00101","hsearch-00103","hsearch-00104","hsearch-00106","hsearch-00107","hsearch-00108","hsearch-00109","hsearch-00110","hsearch-00111","hsearch-00112","hsearch-00113","hsearch-00114","hsearch-00115","hsearch-00116","hsearch-00117","hsearch-00118","hsearch-00119","hsearch-00200","hsearch-00201","hsearch-00210","hsearch-00211","hsearch-00213","hsearch-00214","hsearch-00215","hsearch-00216","hsearch-00217","hsearch-00218","hsearch-00219","hsearch-00220","hsearch-00221","hsearch-00222","hsearch-00224","hsearch-00225","hsearch-00226","hsearch-00227","hsearch-00228","hsearch-00229","hsearch-00230","hsearch-00231","hsearch-00232","hsearch-00233","hsearch-00234","hsearch-00235","hsearch-00236","hsearch-00237","hsearch-00238","hsearch-00239","hsearch-00240","jax-ws-00000","jaxrpc-00000","jboss-eap4and5to6and7-java-01000","jboss-eap4and5to6and7-java-02000","jboss-eap4and5to6and7-java-03000","jboss-eap4and5to6and7-xml-01000","jboss-eap4and5to6and7-xml-02000","jboss-eap4and5to6and7-xml-03000","jboss-eap4and5to6and7-xml-04000","jboss-eap4and5to6and7-xml-05000","jboss-eap4and5to6and7-xml-06000","jboss-eap4and5to6and7-xml-07000","jboss-eap5-7-java-02000","jboss-eap5-7-java-03000","jboss-eap5-7-java-05000","jboss-eap5-7-java-06000","jboss-eap5-7-java-07000","jboss-eap5-7-java-08000","jboss-eap5-7-java-08100","jboss-eap5-7-java-08200","jboss-eap5-7-java-08300","jboss-eap5-7-java-08400","jboss-eap5-7-java-08500","jboss-eap5-7-java-08600","jboss-eap5-7-java-08700","jboss-eap5-7-java-08800","jboss-eap5-7-java-08900","jboss-eap5-7-java-09000","jboss-eap5-7-java-09100","jboss-eap5-7-xml-01000","jboss-eap5-7-xml-10000","jboss-eap5-7-xml-13000","jboss-eap5-7-xml-14000","jboss-eap5-7-xml-16000","jboss-eap5and6to7-java-01000","jboss-eap5and6to7-java-02000","jboss-eap5and6to7-java-03000","jboss-eap5and6to7-java-04000","jboss-eap5and6to7-java-05000","jboss-eap5and6to7-java-06000","jboss-eap5and6to7-java-07000","jboss-eap5and6to7-java-08000","jboss-eap5and6to7-java-09000","jboss-eap5and6to7-xml-05000","jboss-eap5and6to7-xml-06000","jboss-eap5and6to7-xml-07000","jboss-eap5and6to7-xml-09000","jboss-eap5and6to7-xml-12000","jboss-eap5and6to7-xml-17000","jboss-eap5and6to7-xml-18000","jboss-eap5and6to7-xml-31000","jboss-eap5and6to7-xml-31500","jboss-eap5and6to7-xml-32000","jboss-eap5and6to7-xml-33000","jboss-eap5and6to7-xml-34000","jboss-eap5and6to7-xml-37000","jboss-eap5and6to7-xml-38000","jboss-eap5and6to7-xml-38001","jboss-eap5and6to7-xml-38002","jboss-eap5and6to7-xml-38003","jboss-eap5and6to7-xml-38004","jboss-eap5and6to7-xml-38005","jboss-eap5and6to7-xml-38006","jboss-eap5and6to7-xml-38007","jboss-eap5and6to7-xml-39000","jboss-eap5and6to7-xml-40000","maven-artemis-jms-client-00001","maven-jboss-rmi-api_1.0_spec-00001","microprofile_removed_from_eap-00001","microprofile_removed_from_eap-00001-01","microprofile_removed_from_eap-00002","microprofile_removed_from_eap-00003","microprofile_removed_from_eap-00004","move-to-microprofile-rest-client-1.3-00001","picketlink25-00000","resteasy-eap5and6to7-000018","resteasy-eap6-000001","resteasy-eap6-000002","resteasy-eap6-000003","resteasy-eap6-000004","resteasy-eap6-000005","resteasy-eap6-000006","resteasy-eap6-000007","resteasy-eap6-000008","resteasy-eap6-000009","resteasy-eap6-000010","resteasy-eap6-000011","resteasy-eap6-000012","resteasy-eap6-000013","resteasy-eap6-000014","resteasy-eap6-000015","resteasy-eap6-000017","resteasy-eap6-000019","resteasy-eap6-000020","resteasy-eap6-000021","resteasy-eap6-000022","resteasy-eap6-000023","resteasy-eap6-000024","resteasy-eap6-000025","resteasy-eap6-000029","resteasy-eap6-000030","resteasy-eap6-000032","resteasy-eap6-000101","resteasy-eap6-000103","resteasy-eap6-000104","resteasy-eap6-000105","resteasy-eap6-000106","resteasy-eap6-000107","resteasy-eap6-000118","resteasy-eap6-000119","resteasy-eap6-000120","resteasy-eap6-000121","resteasy-eap6-000122","resteasy-eap6-000123","resteasy-eap6-000125","resteasy-eap6-000126","resteasy-eap6-000127","resteasy-eap6-000128","resteasy-eap6-000129","resteasy-eap6-000130","resteasy-eap6-000131","resteasy-eap6-000140","resteasy-eap6-000141","resteasy-eap6-000142","resteasy30-36-00001","singleton-sessionbean-00001","weblogic-eap7-01000","weblogic-eap7-016000","weblogic-eap7-017000","weblogic-eap7-02000","weblogic-eap7-03000","weblogic-eap7-04000","weblogic-eap7-05000","weblogic-eap7-06000","weblogic-eap7-07000","weblogic-eap7-08000","weblogic-eap7-09000","weblogic-eap7-10000","weblogic-eap7-11000","weblogic-eap7-12000","weblogic-eap7-13000","weblogic-eap7-15000","weblogic-jms-eap7-00000","weblogic-jms-eap7-01000","weblogic-jms-eap7-02000","weblogic-jms-eap7-03000","weblogic-jms-eap7-04000","weblogic-jms-eap7-05000","weblogic-jms-eap7-06000","weblogic-jms-eap7-07000","weblogic-jms-eap7-08000","weblogic-services-eap7-01000","weblogic-services-eap7-02000","weblogic-services-eap7-03000","weblogic-webapp-eap7-01000","weblogic-webapp-eap7-02000","weblogic-webapp-eap7-03000","weblogic-webapp-eap7-04000","weblogic-webapp-eap7-05000","weblogic-webapp-eap7-06000","weblogic-webapp-eap7-07000","weblogic-webapp-eap7-08000","weblogic-webapp-eap7-09000","weblogic-webservices-07000","weblogic-webservices-eap7-01000","weblogic-webservices-eap7-02000","weblogic-webservices-eap7-03000","weblogic-webservices-eap7-04000","weblogic-webservices-eap7-05000","weblogic-webservices-eap7-06000","weblogic-xml-descriptor-19000","weblogic-xml-descriptor-eap7-01000","weblogic-xml-descriptor-eap7-02000","weblogic-xml-descriptor-eap7-03000","weblogic-xml-descriptor-eap7-04000","weblogic-xml-descriptor-eap7-06001","weblogic-xml-descriptor-eap7-07000","weblogic-xml-descriptor-eap7-08000","weblogic-xml-descriptor-eap7-09000","weblogic-xml-descriptor-eap7-10000","weblogic-xml-descriptor-eap7-11000","weblogic-xml-descriptor-eap7-12000","weblogic-xml-descriptor-eap7-14000","weblogic-xml-descriptor-eap7-15000","weblogic-xml-descriptor-eap7-16000","weblogic-xml-descriptor-eap7-17000","weblogic-xml-descriptor-eap7-18000","websphere-jms-eap7-00000","websphere-jms-eap7-01000","websphere-jms-eap7-02000","websphere-jms-eap7-02500","websphere-jms-eap7-03000","websphere-jms-eap7-04000","websphere-mq-eap7-00000","websphere-mq-eap7-01000","websphere-mq-eap7-02000","websphere-mqe-eap7-00000","websphere-mqe-eap7-01000","websphere-mqe-eap7-02000","websphere-mqe-eap7-03000","websphere-mqe-eap7-04000","websphere-other-eap7-01000","websphere-other-eap7-02000","ws-security-00000","ws-security-00001","ws-security-00002"]},{"name":"eap8/eap7","description":"This ruleset provides analysis of Java EE applications that need to change certain CDI-related method calls.","violations":{"javaee-to-jakarta-namespaces-00001":{"description":"Replace the Java EE namespace, schemaLocation and version with the Jakarta equivalent","category":"mandatory","labels":["konveyor.io/source","konveyor.io/target=eap","konveyor.io/target=eap8","konveyor.io/target=jakarta-ee","konveyor.io/target=jakarta-ee9+"],"incidents":[{"uri":"file:///tmp/source-code/src/main/webapp/WEB-INF/beans.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7      Licensed under the Apache License, Version 2.0 (the \"License\");\n  8      you may not use this file except in compliance with the License.\n  9      You may obtain a copy of the License at\n 10      http://www.apache.org/licenses/LICENSE-2.0\n 11      Unless required by applicable law or agreed to in writing, software\n 12      distributed under the License is distributed on an \"AS IS\" BASIS,\n 13      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14      See the License for the specific language governing permissions and\n 15      limitations under the License.\n 16  --\u003e\n 17  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 18  \u003cbeans xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 19  \t   xsi:schemaLocation=\"\n 20        http://xmlns.jcp.org/xml/ns/javaee\n 21        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n 22  \t   bean-discovery-mode=\"all\"\u003e\n 23  \u003c/beans\u003e\n","lineNumber":18,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/javaee"}},{"uri":"file:///tmp/source-code/src/main/webapp/WEB-INF/beans.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7      Licensed under the Apache License, Version 2.0 (the \"License\");\n  8      you may not use this file except in compliance with the License.\n  9      You may obtain a copy of the License at\n 10      http://www.apache.org/licenses/LICENSE-2.0\n 11      Unless required by applicable law or agreed to in writing, software\n 12      distributed under the License is distributed on an \"AS IS\" BASIS,\n 13      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14      See the License for the specific language governing permissions and\n 15      limitations under the License.\n 16  --\u003e\n 17  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 18  \u003cbeans xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 19  \t   xsi:schemaLocation=\"\n 20        http://xmlns.jcp.org/xml/ns/javaee\n 21        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n 22  \t   bean-discovery-mode=\"all\"\u003e\n 23  \u003c/beans\u003e\n","lineNumber":20,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/javaee"}},{"uri":"file:///tmp/source-code/src/main/webapp/WEB-INF/beans.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7      Licensed under the Apache License, Version 2.0 (the \"License\");\n  8      you may not use this file except in compliance with the License.\n  9      You may obtain a copy of the License at\n 10      http://www.apache.org/licenses/LICENSE-2.0\n 11      Unless required by applicable law or agreed to in writing, software\n 12      distributed under the License is distributed on an \"AS IS\" BASIS,\n 13      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14      See the License for the specific language governing permissions and\n 15      limitations under the License.\n 16  --\u003e\n 17  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 18  \u003cbeans xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 19  \t   xsi:schemaLocation=\"\n 20        http://xmlns.jcp.org/xml/ns/javaee\n 21        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n 22  \t   bean-discovery-mode=\"all\"\u003e\n 23  \u003c/beans\u003e\n","lineNumber":21,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/javaee"}}],"links":[{"url":"https://jakarta.ee/xml/ns/jakartaee/#10","title":"Jakarta EE XML Schemas"}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00002":{"description":"Replace the Java EE persistence namespace, schemaLocation and version with the Jakarta equivalent","category":"mandatory","labels":["konveyor.io/source","konveyor.io/target=eap","konveyor.io/target=eap8","konveyor.io/target=jakarta-ee","konveyor.io/target=jakarta-ee9+"],"incidents":[{"uri":"file:///tmp/source-code/src/main/resources/META-INF/persistence.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/persistence` with `https://jakarta.ee/xml/ns/persistence` and change the schema version number ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cpersistence version=\"2.1\"\n  3               xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  4               xsi:schemaLocation=\"\n  5          http://xmlns.jcp.org/xml/ns/persistence\n  6          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n  7      \u003cpersistence-unit name=\"primary\"\u003e\n  8          \u003cjta-data-source\u003ejava:jboss/datasources/CoolstoreDS\u003c/jta-data-source\u003e\n  9          \u003cproperties\u003e\n 10              \u003cproperty name=\"javax.persistence.schema-generation.database.action\" value=\"none\"/\u003e\n 11              \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 12              \u003cproperty name=\"hibernate.format_sql\" value=\"true\" /\u003e\n 13              \u003cproperty name=\"hibernate.use_sql_comments\" value=\"true\" /\u003e\n 14              \u003cproperty name=\"hibernate.jdbc.use_get_generated_keys\" value=\"false\" /\u003e\n 15          \u003c/properties\u003e\n 16      \u003c/persistence-unit\u003e\n 17  \u003c/persistence\u003e\n","lineNumber":3,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/persistence"}},{"uri":"file:///tmp/source-code/src/main/resources/META-INF/persistence.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/persistence` with `https://jakarta.ee/xml/ns/persistence` and change the schema version number ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cpersistence version=\"2.1\"\n  3               xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  4               xsi:schemaLocation=\"\n  5          http://xmlns.jcp.org/xml/ns/persistence\n  6          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n  7      \u003cpersistence-unit name=\"primary\"\u003e\n  8          \u003cjta-data-source\u003ejava:jboss/datasources/CoolstoreDS\u003c/jta-data-source\u003e\n  9          \u003cproperties\u003e\n 10              \u003cproperty name=\"javax.persistence.schema-generation.database.action\" value=\"none\"/\u003e\n 11              \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 12              \u003cproperty name=\"hibernate.format_sql\" value=\"true\" /\u003e\n 13              \u003cproperty name=\"hibernate.use_sql_comments\" value=\"true\" /\u003e\n 14              \u003cproperty name=\"hibernate.jdbc.use_get_generated_keys\" value=\"false\" /\u003e\n 15          \u003c/properties\u003e\n 16      \u003c/persistence-unit\u003e\n 17  \u003c/persistence\u003e\n","lineNumber":5,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/persistence"}},{"uri":"file:///tmp/source-code/src/main/resources/META-INF/persistence.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/persistence` with `https://jakarta.ee/xml/ns/persistence` and change the schema version number ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cpersistence version=\"2.1\"\n  3               xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  4               xsi:schemaLocation=\"\n  5          http://xmlns.jcp.org/xml/ns/persistence\n  6          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n  7      \u003cpersistence-unit name=\"primary\"\u003e\n  8          \u003cjta-data-source\u003ejava:jboss/datasources/CoolstoreDS\u003c/jta-data-source\u003e\n  9          \u003cproperties\u003e\n 10              \u003cproperty name=\"javax.persistence.schema-generation.database.action\" value=\"none\"/\u003e\n 11              \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 12              \u003cproperty name=\"hibernate.format_sql\" value=\"true\" /\u003e\n 13              \u003cproperty name=\"hibernate.use_sql_comments\" value=\"true\" /\u003e\n 14              \u003cproperty name=\"hibernate.jdbc.use_get_generated_keys\" value=\"false\" /\u003e\n 15          \u003c/properties\u003e\n 16      \u003c/persistence-unit\u003e\n 17  \u003c/persistence\u003e\n","lineNumber":6,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/persistence"}}],"links":[{"url":"https://jakarta.ee/xml/ns/persistence/#3","title":"Jakarta Persistence XML Schemas"}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00006":{"description":"Replace the Java EE XSD with the Jakarta equivalent","category":"mandatory","labels":["konveyor.io/source","konveyor.io/target=eap","konveyor.io/target=eap8","konveyor.io/target=jakarta-ee","konveyor.io/target=jakarta-ee9+"],"incidents":[{"uri":"file:///tmp/source-code/src/main/webapp/WEB-INF/beans.xml","message":"Replace `beans_1_1.xsd` with `beans_3_0.xsd` and update the version attribute to `\"3.0\"`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7      Licensed under the Apache License, Version 2.0 (the \"License\");\n  8      you may not use this file except in compliance with the License.\n  9      You may obtain a copy of the License at\n 10      http://www.apache.org/licenses/LICENSE-2.0\n 11      Unless required by applicable law or agreed to in writing, software\n 12      distributed under the License is distributed on an \"AS IS\" BASIS,\n 13      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14      See the License for the specific language governing permissions and\n 15      limitations under the License.\n 16  --\u003e\n 17  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 18  \u003cbeans xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 19  \t   xsi:schemaLocation=\"\n 20        http://xmlns.jcp.org/xml/ns/javaee\n 21        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n 22  \t   bean-discovery-mode=\"all\"\u003e\n 23  \u003c/beans\u003e\n","lineNumber":21,"variables":{"matchingText":"beans_1_1.xsd"}}],"links":[{"url":"https://jakarta.ee/xml/ns/jakartaee/#9","title":"Jakarta XML Schemas"}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00030":{"description":"Replace the Java EE XSD with the Jakarta equivalent","category":"mandatory","labels":["konveyor.io/source","konveyor.io/target=eap","konveyor.io/target=eap8","konveyor.io/target=jakarta-ee","konveyor.io/target=jakarta-ee9+"],"incidents":[{"uri":"file:///tmp/source-code/src/main/resources/META-INF/persistence.xml","message":"Replace `persistence_2_1.xsd` with `persistence_3_0.xsd` and update the version attribute to `\"3.0\"`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cpersistence version=\"2.1\"\n  3               xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  4               xsi:schemaLocation=\"\n  5          http://xmlns.jcp.org/xml/ns/persistence\n  6          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n  7      \u003cpersistence-unit name=\"primary\"\u003e\n  8          \u003cjta-data-source\u003ejava:jboss/datasources/CoolstoreDS\u003c/jta-data-source\u003e\n  9          \u003cproperties\u003e\n 10              \u003cproperty name=\"javax.persistence.schema-generation.database.action\" value=\"none\"/\u003e\n 11              \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 12              \u003cproperty name=\"hibernate.format_sql\" value=\"true\" /\u003e\n 13              \u003cproperty name=\"hibernate.use_sql_comments\" value=\"true\" /\u003e\n 14              \u003cproperty name=\"hibernate.jdbc.use_get_generated_keys\" value=\"false\" /\u003e\n 15          \u003c/properties\u003e\n 16      \u003c/persistence-unit\u003e\n 17  \u003c/persistence\u003e\n","lineNumber":6,"variables":{"matchingText":"persistence_2_1.xsd"}}],"links":[{"url":"https://jakarta.ee/xml/ns/jakartaee/#9","title":"Jakarta XML Schemas"}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00033":{"description":"Replace the Java EE version with the Jakarta equivalent","category":"mandatory","labels":["konveyor.io/source","konveyor.io/target=eap","konveyor.io/target=eap8","konveyor.io/target=jakarta-ee","konveyor.io/target=jakarta-ee9+"],"incidents":[{"uri":"file:///tmp/source-code/src/main/resources/META-INF/persistence.xml","message":"In the root tag, replace the `version` attribute value `2.1` with `3.0`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cpersistence version=\"2.1\"\n  3               xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  4               xsi:schemaLocation=\"\n  5          http://xmlns.jcp.org/xml/ns/persistence\n  6          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n  7      \u003cpersistence-unit name=\"primary\"\u003e\n  8          \u003cjta-data-source\u003ejava:jboss/datasources/CoolstoreDS\u003c/jta-data-source\u003e\n  9          \u003cproperties\u003e\n 10              \u003cproperty name=\"javax.persistence.schema-generation.database.action\" value=\"none\"/\u003e\n 11              \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 12              \u003cproperty name=\"hibernate.format_sql\" value=\"true\" /\u003e\n 13              \u003cproperty name=\"hibernate.use_sql_comments\" value=\"true\" /\u003e\n 14              \u003cproperty name=\"hibernate.jdbc.use_get_generated_keys\" value=\"false\" /\u003e\n 15          \u003c/properties\u003e\n 16      \u003c/persistence-unit\u003e\n 17  \u003c/persistence\u003e\n","lineNumber":2,"variables":{"matchingText":"version=\"2.1\""}},{"uri":"file:///tmp/source-code/src/main/resources/META-INF/persistence.xml","message":"In the root tag, replace the `version` attribute value `2.1` with `3.0`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cpersistence version=\"2.1\"\n  3               xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  4               xsi:schemaLocation=\"\n  5          http://xmlns.jcp.org/xml/ns/persistence\n  6          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n  7      \u003cpersistence-unit name=\"primary\"\u003e\n  8          \u003cjta-data-source\u003ejava:jboss/datasources/CoolstoreDS\u003c/jta-data-source\u003e\n  9          \u003cproperties\u003e\n 10              \u003cproperty name=\"javax.persistence.schema-generation.database.action\" value=\"none\"/\u003e\n 11              \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 12              \u003cproperty name=\"hibernate.format_sql\" value=\"true\" /\u003e\n 13              \u003cproperty name=\"hibernate.use_sql_comments\" value=\"true\" /\u003e\n 14              \u003cproperty name=\"hibernate.jdbc.use_get_generated_keys\" value=\"false\" /\u003e\n 15          \u003c/properties\u003e\n 16      \u003c/persistence-unit\u003e\n 17  \u003c/persistence\u003e\n","lineNumber":8,"variables":{"data":"persistence","innerText":"\n    \n        java:jboss/datasources/CoolstoreDS\n        \n            \n            \n            \n            \n            \n        \n    \n","matchingXML":"\u003cpersistence-unit name=\"primary\"\u003e\u003cjta-data-source\u003ejava:jboss/datasources/CoolstoreDS\u003c/jta-data-source\u003e\u003cproperties\u003e\u003cproperty name=\"javax.persistence.schema-generation.database.action\" value=\"none\"\u003e\u003c/property\u003e\u003cproperty name=\"hibernate.show_sql\" value=\"false\"\u003e\u003c/property\u003e\u003cproperty name=\"hibernate.format_sql\" value=\"true\"\u003e\u003c/property\u003e\u003cproperty name=\"hibernate.use_sql_comments\" value=\"true\"\u003e\u003c/property\u003e\u003cproperty name=\"hibernate.jdbc.use_get_generated_keys\" value=\"false\"\u003e\u003c/property\u003e\u003c/properties\u003e\u003c/persistence-unit\u003e"}}],"Extras":null,"effort":1},"javax-to-jakarta-dependencies-00006":{"description":"javax groupId has been replaced by jakarta.platform","category":"mandatory","labels":["konveyor.io/source","konveyor.io/target=eap","konveyor.io/target=eap8","konveyor.io/target=jakarta-ee","konveyor.io/target=jakarta-ee9+"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"Update group dependency by replacing the `javax` groupId with `jakarta.platform`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":19,"variables":{"matchingText":"groupId\u003ejavax\u003c"}},{"uri":"file:///tmp/source-code/pom.xml","message":"Update group dependency by replacing the `javax` groupId with `jakarta.platform`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":25,"variables":{"matchingText":"groupId\u003ejavax\u003c"}}],"links":[{"url":"https://jakarta.ee/","title":"Jakarta EE"}],"Extras":null,"effort":1},"javax-to-jakarta-dependencies-00007":{"description":"javax javaee-api artifactId has been replaced by jakarta.platform jakarta.jakartaee-api","category":"mandatory","labels":["konveyor.io/source","konveyor.io/target=eap","konveyor.io/target=eap8","konveyor.io/target=jakarta-ee","konveyor.io/target=jakarta-ee9+"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"Update artifact dependency by replacing the `javaee-api` artifactId with `jakarta.jakartaee-api`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":26,"variables":{"matchingText":"artifactId\u003ejavaee-api\u003c"}}],"links":[{"url":"https://jakarta.ee/","title":"Jakarta EE"}],"Extras":null,"effort":1},"javax-to-jakarta-dependencies-00008":{"description":"javax javaee-web-api artifactId has been replaced by jakarta.platform jakarta.jakartaee-web-api","category":"mandatory","labels":["konveyor.io/source","konveyor.io/target=eap","konveyor.io/target=eap8","konveyor.io/target=jakarta-ee","konveyor.io/target=jakarta-ee9+"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"Update artifact dependency by replacing the `javaee-web-api` artifactId with `jakarta.jakartaee-web-api`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":20,"variables":{"matchingText":"artifactId\u003ejavaee-web-api\u003c"}}],"links":[{"url":"https://jakarta.ee/","title":"Jakarta EE"}],"Extras":null,"effort":1},"javax-to-jakarta-import-00001":{"description":"The package 'javax' has been replaced by 'jakarta'.","category":"mandatory","labels":["konveyor.io/source","konveyor.io/target=eap","konveyor.io/target=eap8","konveyor.io/target=jakarta-ee","konveyor.io/target=jakarta-ee9+"],"incidents":[{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/InventoryEntity.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  \n  5  import javax.persistence.Column;\n  6  import javax.persistence.Entity;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.Table;\n  9  import javax.persistence.UniqueConstraint;\n 10  import javax.xml.bind.annotation.XmlRootElement;\n 11  \n 12  @Entity\n 13  @XmlRootElement\n 14  @Table(name = \"INVENTORY\", uniqueConstraints = @UniqueConstraint(columnNames = \"itemId\"))\n 15  public class InventoryEntity implements Serializable {\n 16  \n 17  \tprivate static final long serialVersionUID = 7526472295622776147L; \n 18  \n 19      @Id\n 20      private String itemId;\n 21  \n 22  \n 23      @Column\n 24      private String location;\n 25  \n 26  \n 27      @Column\n 28      private int quantity;\n 29  \n 30  \n 31      @Column\n 32      private String link;\n 33  \n 34      public InventoryEntity() {\n 35  \n 36      }\n 37  \n 38      public String getItemId() {\n 39  \t\treturn itemId;\n 40  \t}\n 41  \n 42  \tpublic void setItemId(String itemId) {\n 43  \t\tthis.itemId = itemId;\n 44  \t}\n 45  \n 46  \tpublic String getLocation() {\n 47  \t\treturn location;\n 48  \t}\n 49  \n 50  \tpublic void setLocation(String location) {\n 51  \t\tthis.location = location;\n 52  \t}\n 53  \n 54  \tpublic int getQuantity() {\n 55  \t\treturn quantity;\n 56  \t}\n 57  \n 58  \tpublic void setQuantity(int quantity) {\n 59  \t\tthis.quantity = quantity;\n 60  \t}\n 61  \n 62  \tpublic String getLink() {\n 63  \t\treturn link;\n 64  \t}\n 65  \n 66  \tpublic void setLink(String link) {\n 67  \t\tthis.link = link;\n 68  \t}\n 69  \n 70  \t@Override\n 71      public String toString() {\n 72          return \"InventoryEntity [itemId=\" + itemId + \", availability=\" + quantity + \"/\" + location + \" link=\" + link + \"]\";\n 73      }\n 74  }\n","lineNumber":5,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/InventoryEntity.java","kind":"Module","name":"javax.persistence.Column","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/InventoryEntity.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  \n  5  import javax.persistence.Column;\n  6  import javax.persistence.Entity;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.Table;\n  9  import javax.persistence.UniqueConstraint;\n 10  import javax.xml.bind.annotation.XmlRootElement;\n 11  \n 12  @Entity\n 13  @XmlRootElement\n 14  @Table(name = \"INVENTORY\", uniqueConstraints = @UniqueConstraint(columnNames = \"itemId\"))\n 15  public class InventoryEntity implements Serializable {\n 16  \n 17  \tprivate static final long serialVersionUID = 7526472295622776147L; \n 18  \n 19      @Id\n 20      private String itemId;\n 21  \n 22  \n 23      @Column\n 24      private String location;\n 25  \n 26  \n 27      @Column\n 28      private int quantity;\n 29  \n 30  \n 31      @Column\n 32      private String link;\n 33  \n 34      public InventoryEntity() {\n 35  \n 36      }\n 37  \n 38      public String getItemId() {\n 39  \t\treturn itemId;\n 40  \t}\n 41  \n 42  \tpublic void setItemId(String itemId) {\n 43  \t\tthis.itemId = itemId;\n 44  \t}\n 45  \n 46  \tpublic String getLocation() {\n 47  \t\treturn location;\n 48  \t}\n 49  \n 50  \tpublic void setLocation(String location) {\n 51  \t\tthis.location = location;\n 52  \t}\n 53  \n 54  \tpublic int getQuantity() {\n 55  \t\treturn quantity;\n 56  \t}\n 57  \n 58  \tpublic void setQuantity(int quantity) {\n 59  \t\tthis.quantity = quantity;\n 60  \t}\n 61  \n 62  \tpublic String getLink() {\n 63  \t\treturn link;\n 64  \t}\n 65  \n 66  \tpublic void setLink(String link) {\n 67  \t\tthis.link = link;\n 68  \t}\n 69  \n 70  \t@Override\n 71      public String toString() {\n 72          return \"InventoryEntity [itemId=\" + itemId + \", availability=\" + quantity + \"/\" + location + \" link=\" + link + \"]\";\n 73      }\n 74  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/InventoryEntity.java","kind":"Module","name":"javax.persistence.Entity","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/InventoryEntity.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  \n  5  import javax.persistence.Column;\n  6  import javax.persistence.Entity;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.Table;\n  9  import javax.persistence.UniqueConstraint;\n 10  import javax.xml.bind.annotation.XmlRootElement;\n 11  \n 12  @Entity\n 13  @XmlRootElement\n 14  @Table(name = \"INVENTORY\", uniqueConstraints = @UniqueConstraint(columnNames = \"itemId\"))\n 15  public class InventoryEntity implements Serializable {\n 16  \n 17  \tprivate static final long serialVersionUID = 7526472295622776147L; \n 18  \n 19      @Id\n 20      private String itemId;\n 21  \n 22  \n 23      @Column\n 24      private String location;\n 25  \n 26  \n 27      @Column\n 28      private int quantity;\n 29  \n 30  \n 31      @Column\n 32      private String link;\n 33  \n 34      public InventoryEntity() {\n 35  \n 36      }\n 37  \n 38      public String getItemId() {\n 39  \t\treturn itemId;\n 40  \t}\n 41  \n 42  \tpublic void setItemId(String itemId) {\n 43  \t\tthis.itemId = itemId;\n 44  \t}\n 45  \n 46  \tpublic String getLocation() {\n 47  \t\treturn location;\n 48  \t}\n 49  \n 50  \tpublic void setLocation(String location) {\n 51  \t\tthis.location = location;\n 52  \t}\n 53  \n 54  \tpublic int getQuantity() {\n 55  \t\treturn quantity;\n 56  \t}\n 57  \n 58  \tpublic void setQuantity(int quantity) {\n 59  \t\tthis.quantity = quantity;\n 60  \t}\n 61  \n 62  \tpublic String getLink() {\n 63  \t\treturn link;\n 64  \t}\n 65  \n 66  \tpublic void setLink(String link) {\n 67  \t\tthis.link = link;\n 68  \t}\n 69  \n 70  \t@Override\n 71      public String toString() {\n 72          return \"InventoryEntity [itemId=\" + itemId + \", availability=\" + quantity + \"/\" + location + \" link=\" + link + \"]\";\n 73      }\n 74  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/InventoryEntity.java","kind":"Module","name":"javax.persistence.Id","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/InventoryEntity.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  \n  5  import javax.persistence.Column;\n  6  import javax.persistence.Entity;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.Table;\n  9  import javax.persistence.UniqueConstraint;\n 10  import javax.xml.bind.annotation.XmlRootElement;\n 11  \n 12  @Entity\n 13  @XmlRootElement\n 14  @Table(name = \"INVENTORY\", uniqueConstraints = @UniqueConstraint(columnNames = \"itemId\"))\n 15  public class InventoryEntity implements Serializable {\n 16  \n 17  \tprivate static final long serialVersionUID = 7526472295622776147L; \n 18  \n 19      @Id\n 20      private String itemId;\n 21  \n 22  \n 23      @Column\n 24      private String location;\n 25  \n 26  \n 27      @Column\n 28      private int quantity;\n 29  \n 30  \n 31      @Column\n 32      private String link;\n 33  \n 34      public InventoryEntity() {\n 35  \n 36      }\n 37  \n 38      public String getItemId() {\n 39  \t\treturn itemId;\n 40  \t}\n 41  \n 42  \tpublic void setItemId(String itemId) {\n 43  \t\tthis.itemId = itemId;\n 44  \t}\n 45  \n 46  \tpublic String getLocation() {\n 47  \t\treturn location;\n 48  \t}\n 49  \n 50  \tpublic void setLocation(String location) {\n 51  \t\tthis.location = location;\n 52  \t}\n 53  \n 54  \tpublic int getQuantity() {\n 55  \t\treturn quantity;\n 56  \t}\n 57  \n 58  \tpublic void setQuantity(int quantity) {\n 59  \t\tthis.quantity = quantity;\n 60  \t}\n 61  \n 62  \tpublic String getLink() {\n 63  \t\treturn link;\n 64  \t}\n 65  \n 66  \tpublic void setLink(String link) {\n 67  \t\tthis.link = link;\n 68  \t}\n 69  \n 70  \t@Override\n 71      public String toString() {\n 72          return \"InventoryEntity [itemId=\" + itemId + \", availability=\" + quantity + \"/\" + location + \" link=\" + link + \"]\";\n 73      }\n 74  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/InventoryEntity.java","kind":"Module","name":"javax.persistence.Table","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/InventoryEntity.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  \n  5  import javax.persistence.Column;\n  6  import javax.persistence.Entity;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.Table;\n  9  import javax.persistence.UniqueConstraint;\n 10  import javax.xml.bind.annotation.XmlRootElement;\n 11  \n 12  @Entity\n 13  @XmlRootElement\n 14  @Table(name = \"INVENTORY\", uniqueConstraints = @UniqueConstraint(columnNames = \"itemId\"))\n 15  public class InventoryEntity implements Serializable {\n 16  \n 17  \tprivate static final long serialVersionUID = 7526472295622776147L; \n 18  \n 19      @Id\n 20      private String itemId;\n 21  \n 22  \n 23      @Column\n 24      private String location;\n 25  \n 26  \n 27      @Column\n 28      private int quantity;\n 29  \n 30  \n 31      @Column\n 32      private String link;\n 33  \n 34      public InventoryEntity() {\n 35  \n 36      }\n 37  \n 38      public String getItemId() {\n 39  \t\treturn itemId;\n 40  \t}\n 41  \n 42  \tpublic void setItemId(String itemId) {\n 43  \t\tthis.itemId = itemId;\n 44  \t}\n 45  \n 46  \tpublic String getLocation() {\n 47  \t\treturn location;\n 48  \t}\n 49  \n 50  \tpublic void setLocation(String location) {\n 51  \t\tthis.location = location;\n 52  \t}\n 53  \n 54  \tpublic int getQuantity() {\n 55  \t\treturn quantity;\n 56  \t}\n 57  \n 58  \tpublic void setQuantity(int quantity) {\n 59  \t\tthis.quantity = quantity;\n 60  \t}\n 61  \n 62  \tpublic String getLink() {\n 63  \t\treturn link;\n 64  \t}\n 65  \n 66  \tpublic void setLink(String link) {\n 67  \t\tthis.link = link;\n 68  \t}\n 69  \n 70  \t@Override\n 71      public String toString() {\n 72          return \"InventoryEntity [itemId=\" + itemId + \", availability=\" + quantity + \"/\" + location + \" link=\" + link + \"]\";\n 73      }\n 74  }\n","lineNumber":9,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/InventoryEntity.java","kind":"Module","name":"javax.persistence.UniqueConstraint","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/InventoryEntity.java","message":"Replace the `javax.xml` import statement with `jakarta.xml` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  \n  5  import javax.persistence.Column;\n  6  import javax.persistence.Entity;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.Table;\n  9  import javax.persistence.UniqueConstraint;\n 10  import javax.xml.bind.annotation.XmlRootElement;\n 11  \n 12  @Entity\n 13  @XmlRootElement\n 14  @Table(name = \"INVENTORY\", uniqueConstraints = @UniqueConstraint(columnNames = \"itemId\"))\n 15  public class InventoryEntity implements Serializable {\n 16  \n 17  \tprivate static final long serialVersionUID = 7526472295622776147L; \n 18  \n 19      @Id\n 20      private String itemId;\n 21  \n 22  \n 23      @Column\n 24      private String location;\n 25  \n 26  \n 27      @Column\n 28      private int quantity;\n 29  \n 30  \n 31      @Column\n 32      private String link;\n 33  \n 34      public InventoryEntity() {\n 35  \n 36      }\n 37  \n 38      public String getItemId() {\n 39  \t\treturn itemId;\n 40  \t}\n 41  \n 42  \tpublic void setItemId(String itemId) {\n 43  \t\tthis.itemId = itemId;\n 44  \t}\n 45  \n 46  \tpublic String getLocation() {\n 47  \t\treturn location;\n 48  \t}\n 49  \n 50  \tpublic void setLocation(String location) {\n 51  \t\tthis.location = location;\n 52  \t}\n 53  \n 54  \tpublic int getQuantity() {\n 55  \t\treturn quantity;\n 56  \t}\n 57  \n 58  \tpublic void setQuantity(int quantity) {\n 59  \t\tthis.quantity = quantity;\n 60  \t}\n 61  \n 62  \tpublic String getLink() {\n 63  \t\treturn link;\n 64  \t}\n 65  \n 66  \tpublic void setLink(String link) {\n 67  \t\tthis.link = link;\n 68  \t}\n 69  \n 70  \t@Override\n 71      public String toString() {\n 72          return \"InventoryEntity [itemId=\" + itemId + \", availability=\" + quantity + \"/\" + location + \" link=\" + link + \"]\";\n 73      }\n 74  }\n","lineNumber":10,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/InventoryEntity.java","kind":"Module","name":"javax.xml.bind.annotation.XmlRootElement","package":"com.redhat.coolstore.model","renamed":"xml"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.List;\n  6  \n  7  import javax.persistence.CascadeType;\n  8  import javax.persistence.Column;\n  9  import javax.persistence.Entity;\n 10  import javax.persistence.FetchType;\n 11  import javax.persistence.GeneratedValue;\n 12  import javax.persistence.Id;\n 13  import javax.persistence.JoinColumn;\n 14  import javax.persistence.OneToMany;\n 15  import javax.persistence.Table;\n 16  \n 17  @Entity\n 18  @Table(name = \"ORDERS\")\n 19  public class Order implements Serializable {\n 20  \n 21  \tprivate static final long serialVersionUID = -1L;\n 22  \n 23  \t@Id\n 24  \t@GeneratedValue\n 25  \tprivate long orderId;\n 26  \n 27  \tprivate String customerName;\n 28  \n 29  \tprivate String customerEmail;\n 30  \n 31  \tprivate double orderValue;\n 32  \n 33  \tprivate double retailPrice;\n 34  \n 35  \tprivate double discount;\n 36  \n 37  \tprivate double shippingFee;\n 38  \n 39  \tprivate double shippingDiscount;\n 40  \n 41  \t@Column(name=\"TOTAL_PRICE\")\n 42  \n 43  \t\n 44  \t@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)\n 45  \t@JoinColumn(name=\"ORDER_ID\")\n 46  \tprivate List\u003cOrderItem\u003e itemList = new ArrayList\u003c\u003e();\n 47  \n 48  \tpublic Order() {}\n 49  \n 50  \tpublic long getOrderId() {\n 51  \t\treturn orderId;\n 52  \t}\n 53  \n 54  \tpublic void setOrderId(long orderId) {\n 55  \t\tthis.orderId = orderId;\n 56  \t}\n 57  \n 58  \tpublic String getCustomerName() {\n 59  \t\treturn customerName;\n 60  \t}\n 61  \n 62  \tpublic void setCustomerName(String customerName) {\n 63  \t\tthis.customerName = customerName;\n 64  \t}\n 65  \n 66  \tpublic String getCustomerEmail() {\n 67  \t\treturn customerEmail;\n 68  \t}\n 69  \n 70  \tpublic void setCustomerEmail(String customerEmail) {\n 71  \t\tthis.customerEmail = customerEmail;\n 72  \t}\n 73  \n 74  \tpublic double getOrderValue() {\n 75  \t\treturn orderValue;\n 76  \t}\n 77  \n 78  \tpublic void setOrderValue(double orderValue) {\n 79  \t\tthis.orderValue = orderValue;\n 80  \t}\n 81  \n 82  \tpublic double getRetailPrice() {\n 83  \t\treturn retailPrice;\n 84  \t}\n 85  \n 86  \tpublic void setRetailPrice(double retailPrice) {\n 87  \t\tthis.retailPrice = retailPrice;\n 88  \t}\n 89  \n 90  \tpublic double getDiscount() {\n 91  \t\treturn discount;\n 92  \t}\n 93  \n 94  \tpublic void setDiscount(double discount) {\n 95  \t\tthis.discount = discount;\n 96  \t}\n 97  \n 98  \tpublic double getShippingFee() {\n 99  \t\treturn shippingFee;\n100  \t}\n101  \n102  \tpublic void setShippingFee(double shippingFee) {\n103  \t\tthis.shippingFee = shippingFee;\n104  \t}\n105  \n106  \tpublic double getShippingDiscount() {\n107  \t\treturn shippingDiscount;","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","kind":"Module","name":"javax.persistence.CascadeType","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.List;\n  6  \n  7  import javax.persistence.CascadeType;\n  8  import javax.persistence.Column;\n  9  import javax.persistence.Entity;\n 10  import javax.persistence.FetchType;\n 11  import javax.persistence.GeneratedValue;\n 12  import javax.persistence.Id;\n 13  import javax.persistence.JoinColumn;\n 14  import javax.persistence.OneToMany;\n 15  import javax.persistence.Table;\n 16  \n 17  @Entity\n 18  @Table(name = \"ORDERS\")\n 19  public class Order implements Serializable {\n 20  \n 21  \tprivate static final long serialVersionUID = -1L;\n 22  \n 23  \t@Id\n 24  \t@GeneratedValue\n 25  \tprivate long orderId;\n 26  \n 27  \tprivate String customerName;\n 28  \n 29  \tprivate String customerEmail;\n 30  \n 31  \tprivate double orderValue;\n 32  \n 33  \tprivate double retailPrice;\n 34  \n 35  \tprivate double discount;\n 36  \n 37  \tprivate double shippingFee;\n 38  \n 39  \tprivate double shippingDiscount;\n 40  \n 41  \t@Column(name=\"TOTAL_PRICE\")\n 42  \n 43  \t\n 44  \t@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)\n 45  \t@JoinColumn(name=\"ORDER_ID\")\n 46  \tprivate List\u003cOrderItem\u003e itemList = new ArrayList\u003c\u003e();\n 47  \n 48  \tpublic Order() {}\n 49  \n 50  \tpublic long getOrderId() {\n 51  \t\treturn orderId;\n 52  \t}\n 53  \n 54  \tpublic void setOrderId(long orderId) {\n 55  \t\tthis.orderId = orderId;\n 56  \t}\n 57  \n 58  \tpublic String getCustomerName() {\n 59  \t\treturn customerName;\n 60  \t}\n 61  \n 62  \tpublic void setCustomerName(String customerName) {\n 63  \t\tthis.customerName = customerName;\n 64  \t}\n 65  \n 66  \tpublic String getCustomerEmail() {\n 67  \t\treturn customerEmail;\n 68  \t}\n 69  \n 70  \tpublic void setCustomerEmail(String customerEmail) {\n 71  \t\tthis.customerEmail = customerEmail;\n 72  \t}\n 73  \n 74  \tpublic double getOrderValue() {\n 75  \t\treturn orderValue;\n 76  \t}\n 77  \n 78  \tpublic void setOrderValue(double orderValue) {\n 79  \t\tthis.orderValue = orderValue;\n 80  \t}\n 81  \n 82  \tpublic double getRetailPrice() {\n 83  \t\treturn retailPrice;\n 84  \t}\n 85  \n 86  \tpublic void setRetailPrice(double retailPrice) {\n 87  \t\tthis.retailPrice = retailPrice;\n 88  \t}\n 89  \n 90  \tpublic double getDiscount() {\n 91  \t\treturn discount;\n 92  \t}\n 93  \n 94  \tpublic void setDiscount(double discount) {\n 95  \t\tthis.discount = discount;\n 96  \t}\n 97  \n 98  \tpublic double getShippingFee() {\n 99  \t\treturn shippingFee;\n100  \t}\n101  \n102  \tpublic void setShippingFee(double shippingFee) {\n103  \t\tthis.shippingFee = shippingFee;\n104  \t}\n105  \n106  \tpublic double getShippingDiscount() {\n107  \t\treturn shippingDiscount;\n108  \t}","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","kind":"Module","name":"javax.persistence.Column","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.List;\n  6  \n  7  import javax.persistence.CascadeType;\n  8  import javax.persistence.Column;\n  9  import javax.persistence.Entity;\n 10  import javax.persistence.FetchType;\n 11  import javax.persistence.GeneratedValue;\n 12  import javax.persistence.Id;\n 13  import javax.persistence.JoinColumn;\n 14  import javax.persistence.OneToMany;\n 15  import javax.persistence.Table;\n 16  \n 17  @Entity\n 18  @Table(name = \"ORDERS\")\n 19  public class Order implements Serializable {\n 20  \n 21  \tprivate static final long serialVersionUID = -1L;\n 22  \n 23  \t@Id\n 24  \t@GeneratedValue\n 25  \tprivate long orderId;\n 26  \n 27  \tprivate String customerName;\n 28  \n 29  \tprivate String customerEmail;\n 30  \n 31  \tprivate double orderValue;\n 32  \n 33  \tprivate double retailPrice;\n 34  \n 35  \tprivate double discount;\n 36  \n 37  \tprivate double shippingFee;\n 38  \n 39  \tprivate double shippingDiscount;\n 40  \n 41  \t@Column(name=\"TOTAL_PRICE\")\n 42  \n 43  \t\n 44  \t@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)\n 45  \t@JoinColumn(name=\"ORDER_ID\")\n 46  \tprivate List\u003cOrderItem\u003e itemList = new ArrayList\u003c\u003e();\n 47  \n 48  \tpublic Order() {}\n 49  \n 50  \tpublic long getOrderId() {\n 51  \t\treturn orderId;\n 52  \t}\n 53  \n 54  \tpublic void setOrderId(long orderId) {\n 55  \t\tthis.orderId = orderId;\n 56  \t}\n 57  \n 58  \tpublic String getCustomerName() {\n 59  \t\treturn customerName;\n 60  \t}\n 61  \n 62  \tpublic void setCustomerName(String customerName) {\n 63  \t\tthis.customerName = customerName;\n 64  \t}\n 65  \n 66  \tpublic String getCustomerEmail() {\n 67  \t\treturn customerEmail;\n 68  \t}\n 69  \n 70  \tpublic void setCustomerEmail(String customerEmail) {\n 71  \t\tthis.customerEmail = customerEmail;\n 72  \t}\n 73  \n 74  \tpublic double getOrderValue() {\n 75  \t\treturn orderValue;\n 76  \t}\n 77  \n 78  \tpublic void setOrderValue(double orderValue) {\n 79  \t\tthis.orderValue = orderValue;\n 80  \t}\n 81  \n 82  \tpublic double getRetailPrice() {\n 83  \t\treturn retailPrice;\n 84  \t}\n 85  \n 86  \tpublic void setRetailPrice(double retailPrice) {\n 87  \t\tthis.retailPrice = retailPrice;\n 88  \t}\n 89  \n 90  \tpublic double getDiscount() {\n 91  \t\treturn discount;\n 92  \t}\n 93  \n 94  \tpublic void setDiscount(double discount) {\n 95  \t\tthis.discount = discount;\n 96  \t}\n 97  \n 98  \tpublic double getShippingFee() {\n 99  \t\treturn shippingFee;\n100  \t}\n101  \n102  \tpublic void setShippingFee(double shippingFee) {\n103  \t\tthis.shippingFee = shippingFee;\n104  \t}\n105  \n106  \tpublic double getShippingDiscount() {\n107  \t\treturn shippingDiscount;\n108  \t}\n109  ","lineNumber":9,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","kind":"Module","name":"javax.persistence.Entity","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.List;\n  6  \n  7  import javax.persistence.CascadeType;\n  8  import javax.persistence.Column;\n  9  import javax.persistence.Entity;\n 10  import javax.persistence.FetchType;\n 11  import javax.persistence.GeneratedValue;\n 12  import javax.persistence.Id;\n 13  import javax.persistence.JoinColumn;\n 14  import javax.persistence.OneToMany;\n 15  import javax.persistence.Table;\n 16  \n 17  @Entity\n 18  @Table(name = \"ORDERS\")\n 19  public class Order implements Serializable {\n 20  \n 21  \tprivate static final long serialVersionUID = -1L;\n 22  \n 23  \t@Id\n 24  \t@GeneratedValue\n 25  \tprivate long orderId;\n 26  \n 27  \tprivate String customerName;\n 28  \n 29  \tprivate String customerEmail;\n 30  \n 31  \tprivate double orderValue;\n 32  \n 33  \tprivate double retailPrice;\n 34  \n 35  \tprivate double discount;\n 36  \n 37  \tprivate double shippingFee;\n 38  \n 39  \tprivate double shippingDiscount;\n 40  \n 41  \t@Column(name=\"TOTAL_PRICE\")\n 42  \n 43  \t\n 44  \t@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)\n 45  \t@JoinColumn(name=\"ORDER_ID\")\n 46  \tprivate List\u003cOrderItem\u003e itemList = new ArrayList\u003c\u003e();\n 47  \n 48  \tpublic Order() {}\n 49  \n 50  \tpublic long getOrderId() {\n 51  \t\treturn orderId;\n 52  \t}\n 53  \n 54  \tpublic void setOrderId(long orderId) {\n 55  \t\tthis.orderId = orderId;\n 56  \t}\n 57  \n 58  \tpublic String getCustomerName() {\n 59  \t\treturn customerName;\n 60  \t}\n 61  \n 62  \tpublic void setCustomerName(String customerName) {\n 63  \t\tthis.customerName = customerName;\n 64  \t}\n 65  \n 66  \tpublic String getCustomerEmail() {\n 67  \t\treturn customerEmail;\n 68  \t}\n 69  \n 70  \tpublic void setCustomerEmail(String customerEmail) {\n 71  \t\tthis.customerEmail = customerEmail;\n 72  \t}\n 73  \n 74  \tpublic double getOrderValue() {\n 75  \t\treturn orderValue;\n 76  \t}\n 77  \n 78  \tpublic void setOrderValue(double orderValue) {\n 79  \t\tthis.orderValue = orderValue;\n 80  \t}\n 81  \n 82  \tpublic double getRetailPrice() {\n 83  \t\treturn retailPrice;\n 84  \t}\n 85  \n 86  \tpublic void setRetailPrice(double retailPrice) {\n 87  \t\tthis.retailPrice = retailPrice;\n 88  \t}\n 89  \n 90  \tpublic double getDiscount() {\n 91  \t\treturn discount;\n 92  \t}\n 93  \n 94  \tpublic void setDiscount(double discount) {\n 95  \t\tthis.discount = discount;\n 96  \t}\n 97  \n 98  \tpublic double getShippingFee() {\n 99  \t\treturn shippingFee;\n100  \t}\n101  \n102  \tpublic void setShippingFee(double shippingFee) {\n103  \t\tthis.shippingFee = shippingFee;\n104  \t}\n105  \n106  \tpublic double getShippingDiscount() {\n107  \t\treturn shippingDiscount;\n108  \t}\n109  \n110  \tpublic void setShippingDiscount(double shippingDiscount) {","lineNumber":10,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","kind":"Module","name":"javax.persistence.FetchType","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.List;\n  6  \n  7  import javax.persistence.CascadeType;\n  8  import javax.persistence.Column;\n  9  import javax.persistence.Entity;\n 10  import javax.persistence.FetchType;\n 11  import javax.persistence.GeneratedValue;\n 12  import javax.persistence.Id;\n 13  import javax.persistence.JoinColumn;\n 14  import javax.persistence.OneToMany;\n 15  import javax.persistence.Table;\n 16  \n 17  @Entity\n 18  @Table(name = \"ORDERS\")\n 19  public class Order implements Serializable {\n 20  \n 21  \tprivate static final long serialVersionUID = -1L;\n 22  \n 23  \t@Id\n 24  \t@GeneratedValue\n 25  \tprivate long orderId;\n 26  \n 27  \tprivate String customerName;\n 28  \n 29  \tprivate String customerEmail;\n 30  \n 31  \tprivate double orderValue;\n 32  \n 33  \tprivate double retailPrice;\n 34  \n 35  \tprivate double discount;\n 36  \n 37  \tprivate double shippingFee;\n 38  \n 39  \tprivate double shippingDiscount;\n 40  \n 41  \t@Column(name=\"TOTAL_PRICE\")\n 42  \n 43  \t\n 44  \t@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)\n 45  \t@JoinColumn(name=\"ORDER_ID\")\n 46  \tprivate List\u003cOrderItem\u003e itemList = new ArrayList\u003c\u003e();\n 47  \n 48  \tpublic Order() {}\n 49  \n 50  \tpublic long getOrderId() {\n 51  \t\treturn orderId;\n 52  \t}\n 53  \n 54  \tpublic void setOrderId(long orderId) {\n 55  \t\tthis.orderId = orderId;\n 56  \t}\n 57  \n 58  \tpublic String getCustomerName() {\n 59  \t\treturn customerName;\n 60  \t}\n 61  \n 62  \tpublic void setCustomerName(String customerName) {\n 63  \t\tthis.customerName = customerName;\n 64  \t}\n 65  \n 66  \tpublic String getCustomerEmail() {\n 67  \t\treturn customerEmail;\n 68  \t}\n 69  \n 70  \tpublic void setCustomerEmail(String customerEmail) {\n 71  \t\tthis.customerEmail = customerEmail;\n 72  \t}\n 73  \n 74  \tpublic double getOrderValue() {\n 75  \t\treturn orderValue;\n 76  \t}\n 77  \n 78  \tpublic void setOrderValue(double orderValue) {\n 79  \t\tthis.orderValue = orderValue;\n 80  \t}\n 81  \n 82  \tpublic double getRetailPrice() {\n 83  \t\treturn retailPrice;\n 84  \t}\n 85  \n 86  \tpublic void setRetailPrice(double retailPrice) {\n 87  \t\tthis.retailPrice = retailPrice;\n 88  \t}\n 89  \n 90  \tpublic double getDiscount() {\n 91  \t\treturn discount;\n 92  \t}\n 93  \n 94  \tpublic void setDiscount(double discount) {\n 95  \t\tthis.discount = discount;\n 96  \t}\n 97  \n 98  \tpublic double getShippingFee() {\n 99  \t\treturn shippingFee;\n100  \t}\n101  \n102  \tpublic void setShippingFee(double shippingFee) {\n103  \t\tthis.shippingFee = shippingFee;\n104  \t}\n105  \n106  \tpublic double getShippingDiscount() {\n107  \t\treturn shippingDiscount;\n108  \t}\n109  \n110  \tpublic void setShippingDiscount(double shippingDiscount) {\n111  \t\tthis.shippingDiscount = shippingDiscount;","lineNumber":11,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","kind":"Module","name":"javax.persistence.GeneratedValue","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.List;\n  6  \n  7  import javax.persistence.CascadeType;\n  8  import javax.persistence.Column;\n  9  import javax.persistence.Entity;\n 10  import javax.persistence.FetchType;\n 11  import javax.persistence.GeneratedValue;\n 12  import javax.persistence.Id;\n 13  import javax.persistence.JoinColumn;\n 14  import javax.persistence.OneToMany;\n 15  import javax.persistence.Table;\n 16  \n 17  @Entity\n 18  @Table(name = \"ORDERS\")\n 19  public class Order implements Serializable {\n 20  \n 21  \tprivate static final long serialVersionUID = -1L;\n 22  \n 23  \t@Id\n 24  \t@GeneratedValue\n 25  \tprivate long orderId;\n 26  \n 27  \tprivate String customerName;\n 28  \n 29  \tprivate String customerEmail;\n 30  \n 31  \tprivate double orderValue;\n 32  \n 33  \tprivate double retailPrice;\n 34  \n 35  \tprivate double discount;\n 36  \n 37  \tprivate double shippingFee;\n 38  \n 39  \tprivate double shippingDiscount;\n 40  \n 41  \t@Column(name=\"TOTAL_PRICE\")\n 42  \n 43  \t\n 44  \t@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)\n 45  \t@JoinColumn(name=\"ORDER_ID\")\n 46  \tprivate List\u003cOrderItem\u003e itemList = new ArrayList\u003c\u003e();\n 47  \n 48  \tpublic Order() {}\n 49  \n 50  \tpublic long getOrderId() {\n 51  \t\treturn orderId;\n 52  \t}\n 53  \n 54  \tpublic void setOrderId(long orderId) {\n 55  \t\tthis.orderId = orderId;\n 56  \t}\n 57  \n 58  \tpublic String getCustomerName() {\n 59  \t\treturn customerName;\n 60  \t}\n 61  \n 62  \tpublic void setCustomerName(String customerName) {\n 63  \t\tthis.customerName = customerName;\n 64  \t}\n 65  \n 66  \tpublic String getCustomerEmail() {\n 67  \t\treturn customerEmail;\n 68  \t}\n 69  \n 70  \tpublic void setCustomerEmail(String customerEmail) {\n 71  \t\tthis.customerEmail = customerEmail;\n 72  \t}\n 73  \n 74  \tpublic double getOrderValue() {\n 75  \t\treturn orderValue;\n 76  \t}\n 77  \n 78  \tpublic void setOrderValue(double orderValue) {\n 79  \t\tthis.orderValue = orderValue;\n 80  \t}\n 81  \n 82  \tpublic double getRetailPrice() {\n 83  \t\treturn retailPrice;\n 84  \t}\n 85  \n 86  \tpublic void setRetailPrice(double retailPrice) {\n 87  \t\tthis.retailPrice = retailPrice;\n 88  \t}\n 89  \n 90  \tpublic double getDiscount() {\n 91  \t\treturn discount;\n 92  \t}\n 93  \n 94  \tpublic void setDiscount(double discount) {\n 95  \t\tthis.discount = discount;\n 96  \t}\n 97  \n 98  \tpublic double getShippingFee() {\n 99  \t\treturn shippingFee;\n100  \t}\n101  \n102  \tpublic void setShippingFee(double shippingFee) {\n103  \t\tthis.shippingFee = shippingFee;\n104  \t}\n105  \n106  \tpublic double getShippingDiscount() {\n107  \t\treturn shippingDiscount;\n108  \t}\n109  \n110  \tpublic void setShippingDiscount(double shippingDiscount) {\n111  \t\tthis.shippingDiscount = shippingDiscount;\n112  \t}","lineNumber":12,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","kind":"Module","name":"javax.persistence.Id","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.List;\n  6  \n  7  import javax.persistence.CascadeType;\n  8  import javax.persistence.Column;\n  9  import javax.persistence.Entity;\n 10  import javax.persistence.FetchType;\n 11  import javax.persistence.GeneratedValue;\n 12  import javax.persistence.Id;\n 13  import javax.persistence.JoinColumn;\n 14  import javax.persistence.OneToMany;\n 15  import javax.persistence.Table;\n 16  \n 17  @Entity\n 18  @Table(name = \"ORDERS\")\n 19  public class Order implements Serializable {\n 20  \n 21  \tprivate static final long serialVersionUID = -1L;\n 22  \n 23  \t@Id\n 24  \t@GeneratedValue\n 25  \tprivate long orderId;\n 26  \n 27  \tprivate String customerName;\n 28  \n 29  \tprivate String customerEmail;\n 30  \n 31  \tprivate double orderValue;\n 32  \n 33  \tprivate double retailPrice;\n 34  \n 35  \tprivate double discount;\n 36  \n 37  \tprivate double shippingFee;\n 38  \n 39  \tprivate double shippingDiscount;\n 40  \n 41  \t@Column(name=\"TOTAL_PRICE\")\n 42  \n 43  \t\n 44  \t@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)\n 45  \t@JoinColumn(name=\"ORDER_ID\")\n 46  \tprivate List\u003cOrderItem\u003e itemList = new ArrayList\u003c\u003e();\n 47  \n 48  \tpublic Order() {}\n 49  \n 50  \tpublic long getOrderId() {\n 51  \t\treturn orderId;\n 52  \t}\n 53  \n 54  \tpublic void setOrderId(long orderId) {\n 55  \t\tthis.orderId = orderId;\n 56  \t}\n 57  \n 58  \tpublic String getCustomerName() {\n 59  \t\treturn customerName;\n 60  \t}\n 61  \n 62  \tpublic void setCustomerName(String customerName) {\n 63  \t\tthis.customerName = customerName;\n 64  \t}\n 65  \n 66  \tpublic String getCustomerEmail() {\n 67  \t\treturn customerEmail;\n 68  \t}\n 69  \n 70  \tpublic void setCustomerEmail(String customerEmail) {\n 71  \t\tthis.customerEmail = customerEmail;\n 72  \t}\n 73  \n 74  \tpublic double getOrderValue() {\n 75  \t\treturn orderValue;\n 76  \t}\n 77  \n 78  \tpublic void setOrderValue(double orderValue) {\n 79  \t\tthis.orderValue = orderValue;\n 80  \t}\n 81  \n 82  \tpublic double getRetailPrice() {\n 83  \t\treturn retailPrice;\n 84  \t}\n 85  \n 86  \tpublic void setRetailPrice(double retailPrice) {\n 87  \t\tthis.retailPrice = retailPrice;\n 88  \t}\n 89  \n 90  \tpublic double getDiscount() {\n 91  \t\treturn discount;\n 92  \t}\n 93  \n 94  \tpublic void setDiscount(double discount) {\n 95  \t\tthis.discount = discount;\n 96  \t}\n 97  \n 98  \tpublic double getShippingFee() {\n 99  \t\treturn shippingFee;\n100  \t}\n101  \n102  \tpublic void setShippingFee(double shippingFee) {\n103  \t\tthis.shippingFee = shippingFee;\n104  \t}\n105  \n106  \tpublic double getShippingDiscount() {\n107  \t\treturn shippingDiscount;\n108  \t}\n109  \n110  \tpublic void setShippingDiscount(double shippingDiscount) {\n111  \t\tthis.shippingDiscount = shippingDiscount;\n112  \t}\n113  ","lineNumber":13,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","kind":"Module","name":"javax.persistence.JoinColumn","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.List;\n  6  \n  7  import javax.persistence.CascadeType;\n  8  import javax.persistence.Column;\n  9  import javax.persistence.Entity;\n 10  import javax.persistence.FetchType;\n 11  import javax.persistence.GeneratedValue;\n 12  import javax.persistence.Id;\n 13  import javax.persistence.JoinColumn;\n 14  import javax.persistence.OneToMany;\n 15  import javax.persistence.Table;\n 16  \n 17  @Entity\n 18  @Table(name = \"ORDERS\")\n 19  public class Order implements Serializable {\n 20  \n 21  \tprivate static final long serialVersionUID = -1L;\n 22  \n 23  \t@Id\n 24  \t@GeneratedValue\n 25  \tprivate long orderId;\n 26  \n 27  \tprivate String customerName;\n 28  \n 29  \tprivate String customerEmail;\n 30  \n 31  \tprivate double orderValue;\n 32  \n 33  \tprivate double retailPrice;\n 34  \n 35  \tprivate double discount;\n 36  \n 37  \tprivate double shippingFee;\n 38  \n 39  \tprivate double shippingDiscount;\n 40  \n 41  \t@Column(name=\"TOTAL_PRICE\")\n 42  \n 43  \t\n 44  \t@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)\n 45  \t@JoinColumn(name=\"ORDER_ID\")\n 46  \tprivate List\u003cOrderItem\u003e itemList = new ArrayList\u003c\u003e();\n 47  \n 48  \tpublic Order() {}\n 49  \n 50  \tpublic long getOrderId() {\n 51  \t\treturn orderId;\n 52  \t}\n 53  \n 54  \tpublic void setOrderId(long orderId) {\n 55  \t\tthis.orderId = orderId;\n 56  \t}\n 57  \n 58  \tpublic String getCustomerName() {\n 59  \t\treturn customerName;\n 60  \t}\n 61  \n 62  \tpublic void setCustomerName(String customerName) {\n 63  \t\tthis.customerName = customerName;\n 64  \t}\n 65  \n 66  \tpublic String getCustomerEmail() {\n 67  \t\treturn customerEmail;\n 68  \t}\n 69  \n 70  \tpublic void setCustomerEmail(String customerEmail) {\n 71  \t\tthis.customerEmail = customerEmail;\n 72  \t}\n 73  \n 74  \tpublic double getOrderValue() {\n 75  \t\treturn orderValue;\n 76  \t}\n 77  \n 78  \tpublic void setOrderValue(double orderValue) {\n 79  \t\tthis.orderValue = orderValue;\n 80  \t}\n 81  \n 82  \tpublic double getRetailPrice() {\n 83  \t\treturn retailPrice;\n 84  \t}\n 85  \n 86  \tpublic void setRetailPrice(double retailPrice) {\n 87  \t\tthis.retailPrice = retailPrice;\n 88  \t}\n 89  \n 90  \tpublic double getDiscount() {\n 91  \t\treturn discount;\n 92  \t}\n 93  \n 94  \tpublic void setDiscount(double discount) {\n 95  \t\tthis.discount = discount;\n 96  \t}\n 97  \n 98  \tpublic double getShippingFee() {\n 99  \t\treturn shippingFee;\n100  \t}\n101  \n102  \tpublic void setShippingFee(double shippingFee) {\n103  \t\tthis.shippingFee = shippingFee;\n104  \t}\n105  \n106  \tpublic double getShippingDiscount() {\n107  \t\treturn shippingDiscount;\n108  \t}\n109  \n110  \tpublic void setShippingDiscount(double shippingDiscount) {\n111  \t\tthis.shippingDiscount = shippingDiscount;\n112  \t}\n113  \n114  \tpublic void setItemList(List\u003cOrderItem\u003e itemList) {","lineNumber":14,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","kind":"Module","name":"javax.persistence.OneToMany","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.List;\n  6  \n  7  import javax.persistence.CascadeType;\n  8  import javax.persistence.Column;\n  9  import javax.persistence.Entity;\n 10  import javax.persistence.FetchType;\n 11  import javax.persistence.GeneratedValue;\n 12  import javax.persistence.Id;\n 13  import javax.persistence.JoinColumn;\n 14  import javax.persistence.OneToMany;\n 15  import javax.persistence.Table;\n 16  \n 17  @Entity\n 18  @Table(name = \"ORDERS\")\n 19  public class Order implements Serializable {\n 20  \n 21  \tprivate static final long serialVersionUID = -1L;\n 22  \n 23  \t@Id\n 24  \t@GeneratedValue\n 25  \tprivate long orderId;\n 26  \n 27  \tprivate String customerName;\n 28  \n 29  \tprivate String customerEmail;\n 30  \n 31  \tprivate double orderValue;\n 32  \n 33  \tprivate double retailPrice;\n 34  \n 35  \tprivate double discount;\n 36  \n 37  \tprivate double shippingFee;\n 38  \n 39  \tprivate double shippingDiscount;\n 40  \n 41  \t@Column(name=\"TOTAL_PRICE\")\n 42  \n 43  \t\n 44  \t@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)\n 45  \t@JoinColumn(name=\"ORDER_ID\")\n 46  \tprivate List\u003cOrderItem\u003e itemList = new ArrayList\u003c\u003e();\n 47  \n 48  \tpublic Order() {}\n 49  \n 50  \tpublic long getOrderId() {\n 51  \t\treturn orderId;\n 52  \t}\n 53  \n 54  \tpublic void setOrderId(long orderId) {\n 55  \t\tthis.orderId = orderId;\n 56  \t}\n 57  \n 58  \tpublic String getCustomerName() {\n 59  \t\treturn customerName;\n 60  \t}\n 61  \n 62  \tpublic void setCustomerName(String customerName) {\n 63  \t\tthis.customerName = customerName;\n 64  \t}\n 65  \n 66  \tpublic String getCustomerEmail() {\n 67  \t\treturn customerEmail;\n 68  \t}\n 69  \n 70  \tpublic void setCustomerEmail(String customerEmail) {\n 71  \t\tthis.customerEmail = customerEmail;\n 72  \t}\n 73  \n 74  \tpublic double getOrderValue() {\n 75  \t\treturn orderValue;\n 76  \t}\n 77  \n 78  \tpublic void setOrderValue(double orderValue) {\n 79  \t\tthis.orderValue = orderValue;\n 80  \t}\n 81  \n 82  \tpublic double getRetailPrice() {\n 83  \t\treturn retailPrice;\n 84  \t}\n 85  \n 86  \tpublic void setRetailPrice(double retailPrice) {\n 87  \t\tthis.retailPrice = retailPrice;\n 88  \t}\n 89  \n 90  \tpublic double getDiscount() {\n 91  \t\treturn discount;\n 92  \t}\n 93  \n 94  \tpublic void setDiscount(double discount) {\n 95  \t\tthis.discount = discount;\n 96  \t}\n 97  \n 98  \tpublic double getShippingFee() {\n 99  \t\treturn shippingFee;\n100  \t}\n101  \n102  \tpublic void setShippingFee(double shippingFee) {\n103  \t\tthis.shippingFee = shippingFee;\n104  \t}\n105  \n106  \tpublic double getShippingDiscount() {\n107  \t\treturn shippingDiscount;\n108  \t}\n109  \n110  \tpublic void setShippingDiscount(double shippingDiscount) {\n111  \t\tthis.shippingDiscount = shippingDiscount;\n112  \t}\n113  \n114  \tpublic void setItemList(List\u003cOrderItem\u003e itemList) {\n115  \t\tthis.itemList = itemList;","lineNumber":15,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/Order.java","kind":"Module","name":"javax.persistence.Table","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/OrderItem.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  \n  5  import javax.persistence.Column;\n  6  import javax.persistence.Entity;\n  7  import javax.persistence.GeneratedValue;\n  8  import javax.persistence.Id;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"ORDER_ITEMS\")\n 13  public class OrderItem implements Serializable {\n 14  \tprivate static final long serialVersionUID = 64565445665456666L;\n 15  \n 16  \t@Id\n 17  \t@Column(name=\"ID\")\n 18  \t@GeneratedValue\n 19  \tprivate long id;\n 20  \n 21  \tprivate int quantity;\n 22  \n 23  \tprivate String productId;\n 24  \n 25  \tpublic OrderItem() {}\n 26  \n 27  \tpublic String getProductId() {\n 28  \t\treturn productId;\n 29  \t}\n 30  \n 31  \tpublic void setProductId(String productId) {\n 32  \t\tthis.productId = productId;\n 33  \t}\n 34  \n 35  \tpublic int getQuantity() {\n 36  \t\treturn quantity;\n 37  \t}\n 38  \n 39  \tpublic void setQuantity(int quantity) {\n 40  \t\tthis.quantity = quantity;\n 41  \t}\n 42  \n 43  \t@Override\n 44  \tpublic String toString() {\n 45  \t\treturn \"OrderItem [productId=\" + productId + \", quantity=\" + quantity + \"]\";\n 46  \t}\n 47  \n 48  }\n","lineNumber":5,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/OrderItem.java","kind":"Module","name":"javax.persistence.Column","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/OrderItem.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  \n  5  import javax.persistence.Column;\n  6  import javax.persistence.Entity;\n  7  import javax.persistence.GeneratedValue;\n  8  import javax.persistence.Id;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"ORDER_ITEMS\")\n 13  public class OrderItem implements Serializable {\n 14  \tprivate static final long serialVersionUID = 64565445665456666L;\n 15  \n 16  \t@Id\n 17  \t@Column(name=\"ID\")\n 18  \t@GeneratedValue\n 19  \tprivate long id;\n 20  \n 21  \tprivate int quantity;\n 22  \n 23  \tprivate String productId;\n 24  \n 25  \tpublic OrderItem() {}\n 26  \n 27  \tpublic String getProductId() {\n 28  \t\treturn productId;\n 29  \t}\n 30  \n 31  \tpublic void setProductId(String productId) {\n 32  \t\tthis.productId = productId;\n 33  \t}\n 34  \n 35  \tpublic int getQuantity() {\n 36  \t\treturn quantity;\n 37  \t}\n 38  \n 39  \tpublic void setQuantity(int quantity) {\n 40  \t\tthis.quantity = quantity;\n 41  \t}\n 42  \n 43  \t@Override\n 44  \tpublic String toString() {\n 45  \t\treturn \"OrderItem [productId=\" + productId + \", quantity=\" + quantity + \"]\";\n 46  \t}\n 47  \n 48  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/OrderItem.java","kind":"Module","name":"javax.persistence.Entity","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/OrderItem.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  \n  5  import javax.persistence.Column;\n  6  import javax.persistence.Entity;\n  7  import javax.persistence.GeneratedValue;\n  8  import javax.persistence.Id;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"ORDER_ITEMS\")\n 13  public class OrderItem implements Serializable {\n 14  \tprivate static final long serialVersionUID = 64565445665456666L;\n 15  \n 16  \t@Id\n 17  \t@Column(name=\"ID\")\n 18  \t@GeneratedValue\n 19  \tprivate long id;\n 20  \n 21  \tprivate int quantity;\n 22  \n 23  \tprivate String productId;\n 24  \n 25  \tpublic OrderItem() {}\n 26  \n 27  \tpublic String getProductId() {\n 28  \t\treturn productId;\n 29  \t}\n 30  \n 31  \tpublic void setProductId(String productId) {\n 32  \t\tthis.productId = productId;\n 33  \t}\n 34  \n 35  \tpublic int getQuantity() {\n 36  \t\treturn quantity;\n 37  \t}\n 38  \n 39  \tpublic void setQuantity(int quantity) {\n 40  \t\tthis.quantity = quantity;\n 41  \t}\n 42  \n 43  \t@Override\n 44  \tpublic String toString() {\n 45  \t\treturn \"OrderItem [productId=\" + productId + \", quantity=\" + quantity + \"]\";\n 46  \t}\n 47  \n 48  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/OrderItem.java","kind":"Module","name":"javax.persistence.GeneratedValue","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/OrderItem.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  \n  5  import javax.persistence.Column;\n  6  import javax.persistence.Entity;\n  7  import javax.persistence.GeneratedValue;\n  8  import javax.persistence.Id;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"ORDER_ITEMS\")\n 13  public class OrderItem implements Serializable {\n 14  \tprivate static final long serialVersionUID = 64565445665456666L;\n 15  \n 16  \t@Id\n 17  \t@Column(name=\"ID\")\n 18  \t@GeneratedValue\n 19  \tprivate long id;\n 20  \n 21  \tprivate int quantity;\n 22  \n 23  \tprivate String productId;\n 24  \n 25  \tpublic OrderItem() {}\n 26  \n 27  \tpublic String getProductId() {\n 28  \t\treturn productId;\n 29  \t}\n 30  \n 31  \tpublic void setProductId(String productId) {\n 32  \t\tthis.productId = productId;\n 33  \t}\n 34  \n 35  \tpublic int getQuantity() {\n 36  \t\treturn quantity;\n 37  \t}\n 38  \n 39  \tpublic void setQuantity(int quantity) {\n 40  \t\tthis.quantity = quantity;\n 41  \t}\n 42  \n 43  \t@Override\n 44  \tpublic String toString() {\n 45  \t\treturn \"OrderItem [productId=\" + productId + \", quantity=\" + quantity + \"]\";\n 46  \t}\n 47  \n 48  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/OrderItem.java","kind":"Module","name":"javax.persistence.Id","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/OrderItem.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  \n  5  import javax.persistence.Column;\n  6  import javax.persistence.Entity;\n  7  import javax.persistence.GeneratedValue;\n  8  import javax.persistence.Id;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"ORDER_ITEMS\")\n 13  public class OrderItem implements Serializable {\n 14  \tprivate static final long serialVersionUID = 64565445665456666L;\n 15  \n 16  \t@Id\n 17  \t@Column(name=\"ID\")\n 18  \t@GeneratedValue\n 19  \tprivate long id;\n 20  \n 21  \tprivate int quantity;\n 22  \n 23  \tprivate String productId;\n 24  \n 25  \tpublic OrderItem() {}\n 26  \n 27  \tpublic String getProductId() {\n 28  \t\treturn productId;\n 29  \t}\n 30  \n 31  \tpublic void setProductId(String productId) {\n 32  \t\tthis.productId = productId;\n 33  \t}\n 34  \n 35  \tpublic int getQuantity() {\n 36  \t\treturn quantity;\n 37  \t}\n 38  \n 39  \tpublic void setQuantity(int quantity) {\n 40  \t\tthis.quantity = quantity;\n 41  \t}\n 42  \n 43  \t@Override\n 44  \tpublic String toString() {\n 45  \t\treturn \"OrderItem [productId=\" + productId + \", quantity=\" + quantity + \"]\";\n 46  \t}\n 47  \n 48  }\n","lineNumber":9,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/OrderItem.java","kind":"Module","name":"javax.persistence.Table","package":"com.redhat.coolstore.model","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/ShoppingCart.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise` ","codeSnip":"  1  package com.redhat.coolstore.model;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.List;\n  6  \n  7  import javax.enterprise.context.Dependent;\n  8  \n  9  @Dependent\n 10  public class ShoppingCart implements Serializable {\n 11  \n 12  \tprivate static final long serialVersionUID = -1108043957592113528L;\n 13  \n 14  \tprivate double cartItemTotal;\n 15  \n 16  \tprivate double cartItemPromoSavings;\n 17  \t\n 18  \tprivate double shippingTotal;\n 19  \t\n 20  \tprivate double shippingPromoSavings;\n 21  \t\n 22  \tprivate double cartTotal;\n 23  \t\t\t\n 24  \tprivate List\u003cShoppingCartItem\u003e shoppingCartItemList = new ArrayList\u003cShoppingCartItem\u003e();\n 25  \n 26  \tpublic ShoppingCart() {\n 27  \t\t\n 28  \t}\n 29  \t\n 30  \tpublic List\u003cShoppingCartItem\u003e getShoppingCartItemList() {\n 31  \t\treturn shoppingCartItemList;\n 32  \t}\n 33  \n 34  \tpublic void setShoppingCartItemList(List\u003cShoppingCartItem\u003e shoppingCartItemList) {\n 35  \t\tthis.shoppingCartItemList = shoppingCartItemList;\n 36  \t}\n 37  \n 38  \tpublic void resetShoppingCartItemList() {\n 39  \t\tshoppingCartItemList = new ArrayList\u003cShoppingCartItem\u003e();\n 40  \t}\n 41  \n 42  \tpublic void addShoppingCartItem(ShoppingCartItem sci) {\n 43  \t\t\n 44  \t\tif ( sci != null ) {\n 45  \t\t\t\n 46  \t\t\tshoppingCartItemList.add(sci);\n 47  \t\t\t\n 48  \t\t}\n 49  \t\t\n 50  \t}\n 51  \t\n 52  \tpublic boolean removeShoppingCartItem(ShoppingCartItem sci) {\n 53  \t\t\n 54  \t\tboolean removed = false;\n 55  \t\t\n 56  \t\tif ( sci != null ) {\n 57  \t\t\t\n 58  \t\t\tremoved = shoppingCartItemList.remove(sci);\n 59  \t\t\t\n 60  \t\t}\n 61  \t\t\n 62  \t\treturn removed;\n 63  \t\t\n 64  \t}\n 65  \n 66  \tpublic double getCartItemTotal() {\n 67  \t\treturn cartItemTotal;\n 68  \t}\n 69  \n 70  \tpublic void setCartItemTotal(double cartItemTotal) {\n 71  \t\tthis.cartItemTotal = cartItemTotal;\n 72  \t}\n 73  \n 74  \tpublic double getShippingTotal() {\n 75  \t\treturn shippingTotal;\n 76  \t}\n 77  \n 78  \tpublic void setShippingTotal(double shippingTotal) {\n 79  \t\tthis.shippingTotal = shippingTotal;\n 80  \t}\n 81  \n 82  \tpublic double getCartTotal() {\n 83  \t\treturn cartTotal;\n 84  \t}\n 85  \n 86  \tpublic void setCartTotal(double cartTotal) {\n 87  \t\tthis.cartTotal = cartTotal;\n 88  \t}\n 89  \n 90  \tpublic double getCartItemPromoSavings() {\n 91  \t\treturn cartItemPromoSavings;\n 92  \t}\n 93  \n 94  \tpublic void setCartItemPromoSavings(double cartItemPromoSavings) {\n 95  \t\tthis.cartItemPromoSavings = cartItemPromoSavings;\n 96  \t}\n 97  \n 98  \tpublic double getShippingPromoSavings() {\n 99  \t\treturn shippingPromoSavings;\n100  \t}\n101  \n102  \tpublic void setShippingPromoSavings(double shippingPromoSavings) {\n103  \t\tthis.shippingPromoSavings = shippingPromoSavings;\n104  \t}\n105  \n106  \t@Override\n107  \tpublic String toString() {","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/model/ShoppingCart.java","kind":"Module","name":"javax.enterprise.context.Dependent","package":"com.redhat.coolstore.model","renamed":"enterprise"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/persistence/Resources.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise` ","codeSnip":"  1  package com.redhat.coolstore.persistence;\n  2  \n  3  import javax.enterprise.context.Dependent;\n  4  import javax.enterprise.inject.Produces;\n  5  import javax.persistence.EntityManager;\n  6  import javax.persistence.PersistenceContext;\n  7  \n  8  @Dependent\n  9  public class Resources {\n 10  \n 11      @PersistenceContext\n 12      private EntityManager em;\n 13  \n 14      @Produces\n 15      public EntityManager getEntityManager() {\n 16          return em;\n 17      }\n 18  }\n","lineNumber":3,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/persistence/Resources.java","kind":"Module","name":"javax.enterprise.context.Dependent","package":"com.redhat.coolstore.persistence","renamed":"enterprise"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/persistence/Resources.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise` ","codeSnip":"  1  package com.redhat.coolstore.persistence;\n  2  \n  3  import javax.enterprise.context.Dependent;\n  4  import javax.enterprise.inject.Produces;\n  5  import javax.persistence.EntityManager;\n  6  import javax.persistence.PersistenceContext;\n  7  \n  8  @Dependent\n  9  public class Resources {\n 10  \n 11      @PersistenceContext\n 12      private EntityManager em;\n 13  \n 14      @Produces\n 15      public EntityManager getEntityManager() {\n 16          return em;\n 17      }\n 18  }\n","lineNumber":4,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/persistence/Resources.java","kind":"Module","name":"javax.enterprise.inject.Produces","package":"com.redhat.coolstore.persistence","renamed":"enterprise"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/persistence/Resources.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.persistence;\n  2  \n  3  import javax.enterprise.context.Dependent;\n  4  import javax.enterprise.inject.Produces;\n  5  import javax.persistence.EntityManager;\n  6  import javax.persistence.PersistenceContext;\n  7  \n  8  @Dependent\n  9  public class Resources {\n 10  \n 11      @PersistenceContext\n 12      private EntityManager em;\n 13  \n 14      @Produces\n 15      public EntityManager getEntityManager() {\n 16          return em;\n 17      }\n 18  }\n","lineNumber":5,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/persistence/Resources.java","kind":"Module","name":"javax.persistence.EntityManager","package":"com.redhat.coolstore.persistence","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/persistence/Resources.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.persistence;\n  2  \n  3  import javax.enterprise.context.Dependent;\n  4  import javax.enterprise.inject.Produces;\n  5  import javax.persistence.EntityManager;\n  6  import javax.persistence.PersistenceContext;\n  7  \n  8  @Dependent\n  9  public class Resources {\n 10  \n 11      @PersistenceContext\n 12      private EntityManager em;\n 13  \n 14      @Produces\n 15      public EntityManager getEntityManager() {\n 16          return em;\n 17      }\n 18  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/persistence/Resources.java","kind":"Module","name":"javax.persistence.PersistenceContext","package":"com.redhat.coolstore.persistence","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.HashMap;\n  6  import java.util.List;\n  7  import java.util.Map;\n  8  \n  9  import javax.enterprise.context.SessionScoped;\n 10  import javax.inject.Inject;\n 11  import javax.ws.rs.DELETE;\n 12  import javax.ws.rs.GET;\n 13  import javax.ws.rs.POST;\n 14  import javax.ws.rs.Path;\n 15  import javax.ws.rs.PathParam;\n 16  import javax.ws.rs.Produces;\n 17  import javax.ws.rs.core.MediaType;\n 18  \n 19  import com.redhat.coolstore.model.Product;\n 20  import com.redhat.coolstore.model.ShoppingCart;\n 21  import com.redhat.coolstore.model.ShoppingCartItem;\n 22  import com.redhat.coolstore.service.ShoppingCartService;\n 23  \n 24  @SessionScoped\n 25  @Path(\"/cart\")\n 26  public class CartEndpoint implements Serializable {\n 27  \n 28  \tprivate static final long serialVersionUID = -7227732980791688773L;\n 29  \n 30  \t@Inject\n 31  \tprivate ShoppingCartService shoppingCartService;\n 32  \n 33  \t@GET\n 34  \t@Path(\"/{cartId}\")\n 35  \t@Produces(MediaType.APPLICATION_JSON)\n 36  \tpublic ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\n 37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n 38  \t}\n 39  \n 40  \t@POST\n 41  \t@Path(\"/checkout/{cartId}\")\n 42  \t@Produces(MediaType.APPLICATION_JSON)\n 43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n 44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n 45  \t}\n 46  \n 47  \t@POST\n 48  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n 49  \t@Produces(MediaType.APPLICATION_JSON)\n 50  \tpublic ShoppingCart add(@PathParam(\"cartId\") String cartId,\n 51  \t\t\t\t\t\t\t@PathParam(\"itemId\") String itemId,\n 52  \t\t\t\t\t\t\t@PathParam(\"quantity\") int quantity) throws Exception {\n 53  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 54  \n 55  \t\tProduct product = shoppingCartService.getProduct(itemId);\n 56  \n 57  \t\tShoppingCartItem sci = new ShoppingCartItem();\n 58  \t\tsci.setProduct(product);\n 59  \t\tsci.setQuantity(quantity);\n 60  \t\tsci.setPrice(product.getPrice());\n 61  \t\tcart.addShoppingCartItem(sci);\n 62  \n 63  \t\ttry {\n 64  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 65  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 66  \t\t} catch (Exception ex) {\n 67  \t\t\tcart.removeShoppingCartItem(sci);\n 68  \t\t\tthrow ex;\n 69  \t\t}\n 70  \n 71  \t\treturn cart;\n 72  \t}\n 73  \n 74  \t@POST\n 75  \t@Path(\"/{cartId}/{tmpId}\")\n 76  \t@Produces(MediaType.APPLICATION_JSON)\n 77  \tpublic ShoppingCart set(@PathParam(\"cartId\") String cartId,\n 78  \t\t\t\t\t\t\t@PathParam(\"tmpId\") String tmpId) throws Exception {\n 79  \n 80  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 81  \t\tShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);\n 82  \n 83  \t\tif (tmpCart != null) {\n 84  \t\t\tcart.resetShoppingCartItemList();\n 85  \t\t\tcart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());\n 86  \t\t}\n 87  \n 88  \t\ttry {\n 89  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 90  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 91  \t\t} catch (Exception ex) {\n 92  \t\t\tthrow ex;\n 93  \t\t}\n 94  \n 95  \t\treturn cart;\n 96  \t}\n 97  \n 98  \t@DELETE\n 99  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n100  \t@Produces(MediaType.APPLICATION_JSON)\n101  \tpublic ShoppingCart delete(@PathParam(\"cartId\") String cartId,\n102  \t\t\t\t\t\t\t   @PathParam(\"itemId\") String itemId,\n103  \t\t\t\t\t\t\t   @PathParam(\"quantity\") int quantity) throws Exception {\n104  \n105  \t\tList\u003cShoppingCartItem\u003e toRemoveList = new ArrayList\u003c\u003e();\n106  \n107  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n108  \n109  \t\tcart.getShoppingCartItemList().stream()","lineNumber":9,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","kind":"Module","name":"javax.enterprise.context.SessionScoped","package":"com.redhat.coolstore.rest","renamed":"enterprise"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","message":"Replace the `javax.inject` import statement with `jakarta.inject` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.HashMap;\n  6  import java.util.List;\n  7  import java.util.Map;\n  8  \n  9  import javax.enterprise.context.SessionScoped;\n 10  import javax.inject.Inject;\n 11  import javax.ws.rs.DELETE;\n 12  import javax.ws.rs.GET;\n 13  import javax.ws.rs.POST;\n 14  import javax.ws.rs.Path;\n 15  import javax.ws.rs.PathParam;\n 16  import javax.ws.rs.Produces;\n 17  import javax.ws.rs.core.MediaType;\n 18  \n 19  import com.redhat.coolstore.model.Product;\n 20  import com.redhat.coolstore.model.ShoppingCart;\n 21  import com.redhat.coolstore.model.ShoppingCartItem;\n 22  import com.redhat.coolstore.service.ShoppingCartService;\n 23  \n 24  @SessionScoped\n 25  @Path(\"/cart\")\n 26  public class CartEndpoint implements Serializable {\n 27  \n 28  \tprivate static final long serialVersionUID = -7227732980791688773L;\n 29  \n 30  \t@Inject\n 31  \tprivate ShoppingCartService shoppingCartService;\n 32  \n 33  \t@GET\n 34  \t@Path(\"/{cartId}\")\n 35  \t@Produces(MediaType.APPLICATION_JSON)\n 36  \tpublic ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\n 37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n 38  \t}\n 39  \n 40  \t@POST\n 41  \t@Path(\"/checkout/{cartId}\")\n 42  \t@Produces(MediaType.APPLICATION_JSON)\n 43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n 44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n 45  \t}\n 46  \n 47  \t@POST\n 48  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n 49  \t@Produces(MediaType.APPLICATION_JSON)\n 50  \tpublic ShoppingCart add(@PathParam(\"cartId\") String cartId,\n 51  \t\t\t\t\t\t\t@PathParam(\"itemId\") String itemId,\n 52  \t\t\t\t\t\t\t@PathParam(\"quantity\") int quantity) throws Exception {\n 53  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 54  \n 55  \t\tProduct product = shoppingCartService.getProduct(itemId);\n 56  \n 57  \t\tShoppingCartItem sci = new ShoppingCartItem();\n 58  \t\tsci.setProduct(product);\n 59  \t\tsci.setQuantity(quantity);\n 60  \t\tsci.setPrice(product.getPrice());\n 61  \t\tcart.addShoppingCartItem(sci);\n 62  \n 63  \t\ttry {\n 64  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 65  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 66  \t\t} catch (Exception ex) {\n 67  \t\t\tcart.removeShoppingCartItem(sci);\n 68  \t\t\tthrow ex;\n 69  \t\t}\n 70  \n 71  \t\treturn cart;\n 72  \t}\n 73  \n 74  \t@POST\n 75  \t@Path(\"/{cartId}/{tmpId}\")\n 76  \t@Produces(MediaType.APPLICATION_JSON)\n 77  \tpublic ShoppingCart set(@PathParam(\"cartId\") String cartId,\n 78  \t\t\t\t\t\t\t@PathParam(\"tmpId\") String tmpId) throws Exception {\n 79  \n 80  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 81  \t\tShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);\n 82  \n 83  \t\tif (tmpCart != null) {\n 84  \t\t\tcart.resetShoppingCartItemList();\n 85  \t\t\tcart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());\n 86  \t\t}\n 87  \n 88  \t\ttry {\n 89  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 90  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 91  \t\t} catch (Exception ex) {\n 92  \t\t\tthrow ex;\n 93  \t\t}\n 94  \n 95  \t\treturn cart;\n 96  \t}\n 97  \n 98  \t@DELETE\n 99  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n100  \t@Produces(MediaType.APPLICATION_JSON)\n101  \tpublic ShoppingCart delete(@PathParam(\"cartId\") String cartId,\n102  \t\t\t\t\t\t\t   @PathParam(\"itemId\") String itemId,\n103  \t\t\t\t\t\t\t   @PathParam(\"quantity\") int quantity) throws Exception {\n104  \n105  \t\tList\u003cShoppingCartItem\u003e toRemoveList = new ArrayList\u003c\u003e();\n106  \n107  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n108  \n109  \t\tcart.getShoppingCartItemList().stream()\n110  \t\t\t\t.filter(sci -\u003e sci.getProduct().getItemId().equals(itemId))","lineNumber":10,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","kind":"Module","name":"javax.inject.Inject","package":"com.redhat.coolstore.rest","renamed":"inject"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.HashMap;\n  6  import java.util.List;\n  7  import java.util.Map;\n  8  \n  9  import javax.enterprise.context.SessionScoped;\n 10  import javax.inject.Inject;\n 11  import javax.ws.rs.DELETE;\n 12  import javax.ws.rs.GET;\n 13  import javax.ws.rs.POST;\n 14  import javax.ws.rs.Path;\n 15  import javax.ws.rs.PathParam;\n 16  import javax.ws.rs.Produces;\n 17  import javax.ws.rs.core.MediaType;\n 18  \n 19  import com.redhat.coolstore.model.Product;\n 20  import com.redhat.coolstore.model.ShoppingCart;\n 21  import com.redhat.coolstore.model.ShoppingCartItem;\n 22  import com.redhat.coolstore.service.ShoppingCartService;\n 23  \n 24  @SessionScoped\n 25  @Path(\"/cart\")\n 26  public class CartEndpoint implements Serializable {\n 27  \n 28  \tprivate static final long serialVersionUID = -7227732980791688773L;\n 29  \n 30  \t@Inject\n 31  \tprivate ShoppingCartService shoppingCartService;\n 32  \n 33  \t@GET\n 34  \t@Path(\"/{cartId}\")\n 35  \t@Produces(MediaType.APPLICATION_JSON)\n 36  \tpublic ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\n 37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n 38  \t}\n 39  \n 40  \t@POST\n 41  \t@Path(\"/checkout/{cartId}\")\n 42  \t@Produces(MediaType.APPLICATION_JSON)\n 43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n 44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n 45  \t}\n 46  \n 47  \t@POST\n 48  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n 49  \t@Produces(MediaType.APPLICATION_JSON)\n 50  \tpublic ShoppingCart add(@PathParam(\"cartId\") String cartId,\n 51  \t\t\t\t\t\t\t@PathParam(\"itemId\") String itemId,\n 52  \t\t\t\t\t\t\t@PathParam(\"quantity\") int quantity) throws Exception {\n 53  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 54  \n 55  \t\tProduct product = shoppingCartService.getProduct(itemId);\n 56  \n 57  \t\tShoppingCartItem sci = new ShoppingCartItem();\n 58  \t\tsci.setProduct(product);\n 59  \t\tsci.setQuantity(quantity);\n 60  \t\tsci.setPrice(product.getPrice());\n 61  \t\tcart.addShoppingCartItem(sci);\n 62  \n 63  \t\ttry {\n 64  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 65  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 66  \t\t} catch (Exception ex) {\n 67  \t\t\tcart.removeShoppingCartItem(sci);\n 68  \t\t\tthrow ex;\n 69  \t\t}\n 70  \n 71  \t\treturn cart;\n 72  \t}\n 73  \n 74  \t@POST\n 75  \t@Path(\"/{cartId}/{tmpId}\")\n 76  \t@Produces(MediaType.APPLICATION_JSON)\n 77  \tpublic ShoppingCart set(@PathParam(\"cartId\") String cartId,\n 78  \t\t\t\t\t\t\t@PathParam(\"tmpId\") String tmpId) throws Exception {\n 79  \n 80  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 81  \t\tShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);\n 82  \n 83  \t\tif (tmpCart != null) {\n 84  \t\t\tcart.resetShoppingCartItemList();\n 85  \t\t\tcart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());\n 86  \t\t}\n 87  \n 88  \t\ttry {\n 89  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 90  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 91  \t\t} catch (Exception ex) {\n 92  \t\t\tthrow ex;\n 93  \t\t}\n 94  \n 95  \t\treturn cart;\n 96  \t}\n 97  \n 98  \t@DELETE\n 99  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n100  \t@Produces(MediaType.APPLICATION_JSON)\n101  \tpublic ShoppingCart delete(@PathParam(\"cartId\") String cartId,\n102  \t\t\t\t\t\t\t   @PathParam(\"itemId\") String itemId,\n103  \t\t\t\t\t\t\t   @PathParam(\"quantity\") int quantity) throws Exception {\n104  \n105  \t\tList\u003cShoppingCartItem\u003e toRemoveList = new ArrayList\u003c\u003e();\n106  \n107  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n108  \n109  \t\tcart.getShoppingCartItemList().stream()\n110  \t\t\t\t.filter(sci -\u003e sci.getProduct().getItemId().equals(itemId))\n111  \t\t\t\t.forEach(sci -\u003e {","lineNumber":11,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","kind":"Module","name":"javax.ws.rs.DELETE","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.HashMap;\n  6  import java.util.List;\n  7  import java.util.Map;\n  8  \n  9  import javax.enterprise.context.SessionScoped;\n 10  import javax.inject.Inject;\n 11  import javax.ws.rs.DELETE;\n 12  import javax.ws.rs.GET;\n 13  import javax.ws.rs.POST;\n 14  import javax.ws.rs.Path;\n 15  import javax.ws.rs.PathParam;\n 16  import javax.ws.rs.Produces;\n 17  import javax.ws.rs.core.MediaType;\n 18  \n 19  import com.redhat.coolstore.model.Product;\n 20  import com.redhat.coolstore.model.ShoppingCart;\n 21  import com.redhat.coolstore.model.ShoppingCartItem;\n 22  import com.redhat.coolstore.service.ShoppingCartService;\n 23  \n 24  @SessionScoped\n 25  @Path(\"/cart\")\n 26  public class CartEndpoint implements Serializable {\n 27  \n 28  \tprivate static final long serialVersionUID = -7227732980791688773L;\n 29  \n 30  \t@Inject\n 31  \tprivate ShoppingCartService shoppingCartService;\n 32  \n 33  \t@GET\n 34  \t@Path(\"/{cartId}\")\n 35  \t@Produces(MediaType.APPLICATION_JSON)\n 36  \tpublic ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\n 37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n 38  \t}\n 39  \n 40  \t@POST\n 41  \t@Path(\"/checkout/{cartId}\")\n 42  \t@Produces(MediaType.APPLICATION_JSON)\n 43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n 44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n 45  \t}\n 46  \n 47  \t@POST\n 48  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n 49  \t@Produces(MediaType.APPLICATION_JSON)\n 50  \tpublic ShoppingCart add(@PathParam(\"cartId\") String cartId,\n 51  \t\t\t\t\t\t\t@PathParam(\"itemId\") String itemId,\n 52  \t\t\t\t\t\t\t@PathParam(\"quantity\") int quantity) throws Exception {\n 53  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 54  \n 55  \t\tProduct product = shoppingCartService.getProduct(itemId);\n 56  \n 57  \t\tShoppingCartItem sci = new ShoppingCartItem();\n 58  \t\tsci.setProduct(product);\n 59  \t\tsci.setQuantity(quantity);\n 60  \t\tsci.setPrice(product.getPrice());\n 61  \t\tcart.addShoppingCartItem(sci);\n 62  \n 63  \t\ttry {\n 64  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 65  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 66  \t\t} catch (Exception ex) {\n 67  \t\t\tcart.removeShoppingCartItem(sci);\n 68  \t\t\tthrow ex;\n 69  \t\t}\n 70  \n 71  \t\treturn cart;\n 72  \t}\n 73  \n 74  \t@POST\n 75  \t@Path(\"/{cartId}/{tmpId}\")\n 76  \t@Produces(MediaType.APPLICATION_JSON)\n 77  \tpublic ShoppingCart set(@PathParam(\"cartId\") String cartId,\n 78  \t\t\t\t\t\t\t@PathParam(\"tmpId\") String tmpId) throws Exception {\n 79  \n 80  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 81  \t\tShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);\n 82  \n 83  \t\tif (tmpCart != null) {\n 84  \t\t\tcart.resetShoppingCartItemList();\n 85  \t\t\tcart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());\n 86  \t\t}\n 87  \n 88  \t\ttry {\n 89  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 90  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 91  \t\t} catch (Exception ex) {\n 92  \t\t\tthrow ex;\n 93  \t\t}\n 94  \n 95  \t\treturn cart;\n 96  \t}\n 97  \n 98  \t@DELETE\n 99  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n100  \t@Produces(MediaType.APPLICATION_JSON)\n101  \tpublic ShoppingCart delete(@PathParam(\"cartId\") String cartId,\n102  \t\t\t\t\t\t\t   @PathParam(\"itemId\") String itemId,\n103  \t\t\t\t\t\t\t   @PathParam(\"quantity\") int quantity) throws Exception {\n104  \n105  \t\tList\u003cShoppingCartItem\u003e toRemoveList = new ArrayList\u003c\u003e();\n106  \n107  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n108  \n109  \t\tcart.getShoppingCartItemList().stream()\n110  \t\t\t\t.filter(sci -\u003e sci.getProduct().getItemId().equals(itemId))\n111  \t\t\t\t.forEach(sci -\u003e {\n112  \t\t\t\t\tif (quantity \u003e= sci.getQuantity()) {","lineNumber":12,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","kind":"Module","name":"javax.ws.rs.GET","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.HashMap;\n  6  import java.util.List;\n  7  import java.util.Map;\n  8  \n  9  import javax.enterprise.context.SessionScoped;\n 10  import javax.inject.Inject;\n 11  import javax.ws.rs.DELETE;\n 12  import javax.ws.rs.GET;\n 13  import javax.ws.rs.POST;\n 14  import javax.ws.rs.Path;\n 15  import javax.ws.rs.PathParam;\n 16  import javax.ws.rs.Produces;\n 17  import javax.ws.rs.core.MediaType;\n 18  \n 19  import com.redhat.coolstore.model.Product;\n 20  import com.redhat.coolstore.model.ShoppingCart;\n 21  import com.redhat.coolstore.model.ShoppingCartItem;\n 22  import com.redhat.coolstore.service.ShoppingCartService;\n 23  \n 24  @SessionScoped\n 25  @Path(\"/cart\")\n 26  public class CartEndpoint implements Serializable {\n 27  \n 28  \tprivate static final long serialVersionUID = -7227732980791688773L;\n 29  \n 30  \t@Inject\n 31  \tprivate ShoppingCartService shoppingCartService;\n 32  \n 33  \t@GET\n 34  \t@Path(\"/{cartId}\")\n 35  \t@Produces(MediaType.APPLICATION_JSON)\n 36  \tpublic ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\n 37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n 38  \t}\n 39  \n 40  \t@POST\n 41  \t@Path(\"/checkout/{cartId}\")\n 42  \t@Produces(MediaType.APPLICATION_JSON)\n 43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n 44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n 45  \t}\n 46  \n 47  \t@POST\n 48  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n 49  \t@Produces(MediaType.APPLICATION_JSON)\n 50  \tpublic ShoppingCart add(@PathParam(\"cartId\") String cartId,\n 51  \t\t\t\t\t\t\t@PathParam(\"itemId\") String itemId,\n 52  \t\t\t\t\t\t\t@PathParam(\"quantity\") int quantity) throws Exception {\n 53  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 54  \n 55  \t\tProduct product = shoppingCartService.getProduct(itemId);\n 56  \n 57  \t\tShoppingCartItem sci = new ShoppingCartItem();\n 58  \t\tsci.setProduct(product);\n 59  \t\tsci.setQuantity(quantity);\n 60  \t\tsci.setPrice(product.getPrice());\n 61  \t\tcart.addShoppingCartItem(sci);\n 62  \n 63  \t\ttry {\n 64  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 65  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 66  \t\t} catch (Exception ex) {\n 67  \t\t\tcart.removeShoppingCartItem(sci);\n 68  \t\t\tthrow ex;\n 69  \t\t}\n 70  \n 71  \t\treturn cart;\n 72  \t}\n 73  \n 74  \t@POST\n 75  \t@Path(\"/{cartId}/{tmpId}\")\n 76  \t@Produces(MediaType.APPLICATION_JSON)\n 77  \tpublic ShoppingCart set(@PathParam(\"cartId\") String cartId,\n 78  \t\t\t\t\t\t\t@PathParam(\"tmpId\") String tmpId) throws Exception {\n 79  \n 80  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 81  \t\tShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);\n 82  \n 83  \t\tif (tmpCart != null) {\n 84  \t\t\tcart.resetShoppingCartItemList();\n 85  \t\t\tcart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());\n 86  \t\t}\n 87  \n 88  \t\ttry {\n 89  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 90  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 91  \t\t} catch (Exception ex) {\n 92  \t\t\tthrow ex;\n 93  \t\t}\n 94  \n 95  \t\treturn cart;\n 96  \t}\n 97  \n 98  \t@DELETE\n 99  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n100  \t@Produces(MediaType.APPLICATION_JSON)\n101  \tpublic ShoppingCart delete(@PathParam(\"cartId\") String cartId,\n102  \t\t\t\t\t\t\t   @PathParam(\"itemId\") String itemId,\n103  \t\t\t\t\t\t\t   @PathParam(\"quantity\") int quantity) throws Exception {\n104  \n105  \t\tList\u003cShoppingCartItem\u003e toRemoveList = new ArrayList\u003c\u003e();\n106  \n107  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n108  \n109  \t\tcart.getShoppingCartItemList().stream()\n110  \t\t\t\t.filter(sci -\u003e sci.getProduct().getItemId().equals(itemId))\n111  \t\t\t\t.forEach(sci -\u003e {\n112  \t\t\t\t\tif (quantity \u003e= sci.getQuantity()) {\n113  \t\t\t\t\t\ttoRemoveList.add(sci);","lineNumber":13,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","kind":"Module","name":"javax.ws.rs.POST","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.HashMap;\n  6  import java.util.List;\n  7  import java.util.Map;\n  8  \n  9  import javax.enterprise.context.SessionScoped;\n 10  import javax.inject.Inject;\n 11  import javax.ws.rs.DELETE;\n 12  import javax.ws.rs.GET;\n 13  import javax.ws.rs.POST;\n 14  import javax.ws.rs.Path;\n 15  import javax.ws.rs.PathParam;\n 16  import javax.ws.rs.Produces;\n 17  import javax.ws.rs.core.MediaType;\n 18  \n 19  import com.redhat.coolstore.model.Product;\n 20  import com.redhat.coolstore.model.ShoppingCart;\n 21  import com.redhat.coolstore.model.ShoppingCartItem;\n 22  import com.redhat.coolstore.service.ShoppingCartService;\n 23  \n 24  @SessionScoped\n 25  @Path(\"/cart\")\n 26  public class CartEndpoint implements Serializable {\n 27  \n 28  \tprivate static final long serialVersionUID = -7227732980791688773L;\n 29  \n 30  \t@Inject\n 31  \tprivate ShoppingCartService shoppingCartService;\n 32  \n 33  \t@GET\n 34  \t@Path(\"/{cartId}\")\n 35  \t@Produces(MediaType.APPLICATION_JSON)\n 36  \tpublic ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\n 37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n 38  \t}\n 39  \n 40  \t@POST\n 41  \t@Path(\"/checkout/{cartId}\")\n 42  \t@Produces(MediaType.APPLICATION_JSON)\n 43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n 44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n 45  \t}\n 46  \n 47  \t@POST\n 48  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n 49  \t@Produces(MediaType.APPLICATION_JSON)\n 50  \tpublic ShoppingCart add(@PathParam(\"cartId\") String cartId,\n 51  \t\t\t\t\t\t\t@PathParam(\"itemId\") String itemId,\n 52  \t\t\t\t\t\t\t@PathParam(\"quantity\") int quantity) throws Exception {\n 53  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 54  \n 55  \t\tProduct product = shoppingCartService.getProduct(itemId);\n 56  \n 57  \t\tShoppingCartItem sci = new ShoppingCartItem();\n 58  \t\tsci.setProduct(product);\n 59  \t\tsci.setQuantity(quantity);\n 60  \t\tsci.setPrice(product.getPrice());\n 61  \t\tcart.addShoppingCartItem(sci);\n 62  \n 63  \t\ttry {\n 64  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 65  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 66  \t\t} catch (Exception ex) {\n 67  \t\t\tcart.removeShoppingCartItem(sci);\n 68  \t\t\tthrow ex;\n 69  \t\t}\n 70  \n 71  \t\treturn cart;\n 72  \t}\n 73  \n 74  \t@POST\n 75  \t@Path(\"/{cartId}/{tmpId}\")\n 76  \t@Produces(MediaType.APPLICATION_JSON)\n 77  \tpublic ShoppingCart set(@PathParam(\"cartId\") String cartId,\n 78  \t\t\t\t\t\t\t@PathParam(\"tmpId\") String tmpId) throws Exception {\n 79  \n 80  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 81  \t\tShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);\n 82  \n 83  \t\tif (tmpCart != null) {\n 84  \t\t\tcart.resetShoppingCartItemList();\n 85  \t\t\tcart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());\n 86  \t\t}\n 87  \n 88  \t\ttry {\n 89  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 90  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 91  \t\t} catch (Exception ex) {\n 92  \t\t\tthrow ex;\n 93  \t\t}\n 94  \n 95  \t\treturn cart;\n 96  \t}\n 97  \n 98  \t@DELETE\n 99  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n100  \t@Produces(MediaType.APPLICATION_JSON)\n101  \tpublic ShoppingCart delete(@PathParam(\"cartId\") String cartId,\n102  \t\t\t\t\t\t\t   @PathParam(\"itemId\") String itemId,\n103  \t\t\t\t\t\t\t   @PathParam(\"quantity\") int quantity) throws Exception {\n104  \n105  \t\tList\u003cShoppingCartItem\u003e toRemoveList = new ArrayList\u003c\u003e();\n106  \n107  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n108  \n109  \t\tcart.getShoppingCartItemList().stream()\n110  \t\t\t\t.filter(sci -\u003e sci.getProduct().getItemId().equals(itemId))\n111  \t\t\t\t.forEach(sci -\u003e {\n112  \t\t\t\t\tif (quantity \u003e= sci.getQuantity()) {\n113  \t\t\t\t\t\ttoRemoveList.add(sci);\n114  \t\t\t\t\t} else {","lineNumber":14,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","kind":"Module","name":"javax.ws.rs.Path","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.HashMap;\n  6  import java.util.List;\n  7  import java.util.Map;\n  8  \n  9  import javax.enterprise.context.SessionScoped;\n 10  import javax.inject.Inject;\n 11  import javax.ws.rs.DELETE;\n 12  import javax.ws.rs.GET;\n 13  import javax.ws.rs.POST;\n 14  import javax.ws.rs.Path;\n 15  import javax.ws.rs.PathParam;\n 16  import javax.ws.rs.Produces;\n 17  import javax.ws.rs.core.MediaType;\n 18  \n 19  import com.redhat.coolstore.model.Product;\n 20  import com.redhat.coolstore.model.ShoppingCart;\n 21  import com.redhat.coolstore.model.ShoppingCartItem;\n 22  import com.redhat.coolstore.service.ShoppingCartService;\n 23  \n 24  @SessionScoped\n 25  @Path(\"/cart\")\n 26  public class CartEndpoint implements Serializable {\n 27  \n 28  \tprivate static final long serialVersionUID = -7227732980791688773L;\n 29  \n 30  \t@Inject\n 31  \tprivate ShoppingCartService shoppingCartService;\n 32  \n 33  \t@GET\n 34  \t@Path(\"/{cartId}\")\n 35  \t@Produces(MediaType.APPLICATION_JSON)\n 36  \tpublic ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\n 37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n 38  \t}\n 39  \n 40  \t@POST\n 41  \t@Path(\"/checkout/{cartId}\")\n 42  \t@Produces(MediaType.APPLICATION_JSON)\n 43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n 44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n 45  \t}\n 46  \n 47  \t@POST\n 48  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n 49  \t@Produces(MediaType.APPLICATION_JSON)\n 50  \tpublic ShoppingCart add(@PathParam(\"cartId\") String cartId,\n 51  \t\t\t\t\t\t\t@PathParam(\"itemId\") String itemId,\n 52  \t\t\t\t\t\t\t@PathParam(\"quantity\") int quantity) throws Exception {\n 53  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 54  \n 55  \t\tProduct product = shoppingCartService.getProduct(itemId);\n 56  \n 57  \t\tShoppingCartItem sci = new ShoppingCartItem();\n 58  \t\tsci.setProduct(product);\n 59  \t\tsci.setQuantity(quantity);\n 60  \t\tsci.setPrice(product.getPrice());\n 61  \t\tcart.addShoppingCartItem(sci);\n 62  \n 63  \t\ttry {\n 64  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 65  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 66  \t\t} catch (Exception ex) {\n 67  \t\t\tcart.removeShoppingCartItem(sci);\n 68  \t\t\tthrow ex;\n 69  \t\t}\n 70  \n 71  \t\treturn cart;\n 72  \t}\n 73  \n 74  \t@POST\n 75  \t@Path(\"/{cartId}/{tmpId}\")\n 76  \t@Produces(MediaType.APPLICATION_JSON)\n 77  \tpublic ShoppingCart set(@PathParam(\"cartId\") String cartId,\n 78  \t\t\t\t\t\t\t@PathParam(\"tmpId\") String tmpId) throws Exception {\n 79  \n 80  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 81  \t\tShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);\n 82  \n 83  \t\tif (tmpCart != null) {\n 84  \t\t\tcart.resetShoppingCartItemList();\n 85  \t\t\tcart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());\n 86  \t\t}\n 87  \n 88  \t\ttry {\n 89  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 90  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 91  \t\t} catch (Exception ex) {\n 92  \t\t\tthrow ex;\n 93  \t\t}\n 94  \n 95  \t\treturn cart;\n 96  \t}\n 97  \n 98  \t@DELETE\n 99  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n100  \t@Produces(MediaType.APPLICATION_JSON)\n101  \tpublic ShoppingCart delete(@PathParam(\"cartId\") String cartId,\n102  \t\t\t\t\t\t\t   @PathParam(\"itemId\") String itemId,\n103  \t\t\t\t\t\t\t   @PathParam(\"quantity\") int quantity) throws Exception {\n104  \n105  \t\tList\u003cShoppingCartItem\u003e toRemoveList = new ArrayList\u003c\u003e();\n106  \n107  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n108  \n109  \t\tcart.getShoppingCartItemList().stream()\n110  \t\t\t\t.filter(sci -\u003e sci.getProduct().getItemId().equals(itemId))\n111  \t\t\t\t.forEach(sci -\u003e {\n112  \t\t\t\t\tif (quantity \u003e= sci.getQuantity()) {\n113  \t\t\t\t\t\ttoRemoveList.add(sci);\n114  \t\t\t\t\t} else {\n115  \t\t\t\t\t\tsci.setQuantity(sci.getQuantity() - quantity);","lineNumber":15,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","kind":"Module","name":"javax.ws.rs.PathParam","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.HashMap;\n  6  import java.util.List;\n  7  import java.util.Map;\n  8  \n  9  import javax.enterprise.context.SessionScoped;\n 10  import javax.inject.Inject;\n 11  import javax.ws.rs.DELETE;\n 12  import javax.ws.rs.GET;\n 13  import javax.ws.rs.POST;\n 14  import javax.ws.rs.Path;\n 15  import javax.ws.rs.PathParam;\n 16  import javax.ws.rs.Produces;\n 17  import javax.ws.rs.core.MediaType;\n 18  \n 19  import com.redhat.coolstore.model.Product;\n 20  import com.redhat.coolstore.model.ShoppingCart;\n 21  import com.redhat.coolstore.model.ShoppingCartItem;\n 22  import com.redhat.coolstore.service.ShoppingCartService;\n 23  \n 24  @SessionScoped\n 25  @Path(\"/cart\")\n 26  public class CartEndpoint implements Serializable {\n 27  \n 28  \tprivate static final long serialVersionUID = -7227732980791688773L;\n 29  \n 30  \t@Inject\n 31  \tprivate ShoppingCartService shoppingCartService;\n 32  \n 33  \t@GET\n 34  \t@Path(\"/{cartId}\")\n 35  \t@Produces(MediaType.APPLICATION_JSON)\n 36  \tpublic ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\n 37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n 38  \t}\n 39  \n 40  \t@POST\n 41  \t@Path(\"/checkout/{cartId}\")\n 42  \t@Produces(MediaType.APPLICATION_JSON)\n 43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n 44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n 45  \t}\n 46  \n 47  \t@POST\n 48  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n 49  \t@Produces(MediaType.APPLICATION_JSON)\n 50  \tpublic ShoppingCart add(@PathParam(\"cartId\") String cartId,\n 51  \t\t\t\t\t\t\t@PathParam(\"itemId\") String itemId,\n 52  \t\t\t\t\t\t\t@PathParam(\"quantity\") int quantity) throws Exception {\n 53  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 54  \n 55  \t\tProduct product = shoppingCartService.getProduct(itemId);\n 56  \n 57  \t\tShoppingCartItem sci = new ShoppingCartItem();\n 58  \t\tsci.setProduct(product);\n 59  \t\tsci.setQuantity(quantity);\n 60  \t\tsci.setPrice(product.getPrice());\n 61  \t\tcart.addShoppingCartItem(sci);\n 62  \n 63  \t\ttry {\n 64  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 65  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 66  \t\t} catch (Exception ex) {\n 67  \t\t\tcart.removeShoppingCartItem(sci);\n 68  \t\t\tthrow ex;\n 69  \t\t}\n 70  \n 71  \t\treturn cart;\n 72  \t}\n 73  \n 74  \t@POST\n 75  \t@Path(\"/{cartId}/{tmpId}\")\n 76  \t@Produces(MediaType.APPLICATION_JSON)\n 77  \tpublic ShoppingCart set(@PathParam(\"cartId\") String cartId,\n 78  \t\t\t\t\t\t\t@PathParam(\"tmpId\") String tmpId) throws Exception {\n 79  \n 80  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 81  \t\tShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);\n 82  \n 83  \t\tif (tmpCart != null) {\n 84  \t\t\tcart.resetShoppingCartItemList();\n 85  \t\t\tcart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());\n 86  \t\t}\n 87  \n 88  \t\ttry {\n 89  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 90  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 91  \t\t} catch (Exception ex) {\n 92  \t\t\tthrow ex;\n 93  \t\t}\n 94  \n 95  \t\treturn cart;\n 96  \t}\n 97  \n 98  \t@DELETE\n 99  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n100  \t@Produces(MediaType.APPLICATION_JSON)\n101  \tpublic ShoppingCart delete(@PathParam(\"cartId\") String cartId,\n102  \t\t\t\t\t\t\t   @PathParam(\"itemId\") String itemId,\n103  \t\t\t\t\t\t\t   @PathParam(\"quantity\") int quantity) throws Exception {\n104  \n105  \t\tList\u003cShoppingCartItem\u003e toRemoveList = new ArrayList\u003c\u003e();\n106  \n107  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n108  \n109  \t\tcart.getShoppingCartItemList().stream()\n110  \t\t\t\t.filter(sci -\u003e sci.getProduct().getItemId().equals(itemId))\n111  \t\t\t\t.forEach(sci -\u003e {\n112  \t\t\t\t\tif (quantity \u003e= sci.getQuantity()) {\n113  \t\t\t\t\t\ttoRemoveList.add(sci);\n114  \t\t\t\t\t} else {\n115  \t\t\t\t\t\tsci.setQuantity(sci.getQuantity() - quantity);\n116  \t\t\t\t\t}","lineNumber":16,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","kind":"Module","name":"javax.ws.rs.Produces","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.ArrayList;\n  5  import java.util.HashMap;\n  6  import java.util.List;\n  7  import java.util.Map;\n  8  \n  9  import javax.enterprise.context.SessionScoped;\n 10  import javax.inject.Inject;\n 11  import javax.ws.rs.DELETE;\n 12  import javax.ws.rs.GET;\n 13  import javax.ws.rs.POST;\n 14  import javax.ws.rs.Path;\n 15  import javax.ws.rs.PathParam;\n 16  import javax.ws.rs.Produces;\n 17  import javax.ws.rs.core.MediaType;\n 18  \n 19  import com.redhat.coolstore.model.Product;\n 20  import com.redhat.coolstore.model.ShoppingCart;\n 21  import com.redhat.coolstore.model.ShoppingCartItem;\n 22  import com.redhat.coolstore.service.ShoppingCartService;\n 23  \n 24  @SessionScoped\n 25  @Path(\"/cart\")\n 26  public class CartEndpoint implements Serializable {\n 27  \n 28  \tprivate static final long serialVersionUID = -7227732980791688773L;\n 29  \n 30  \t@Inject\n 31  \tprivate ShoppingCartService shoppingCartService;\n 32  \n 33  \t@GET\n 34  \t@Path(\"/{cartId}\")\n 35  \t@Produces(MediaType.APPLICATION_JSON)\n 36  \tpublic ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\n 37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n 38  \t}\n 39  \n 40  \t@POST\n 41  \t@Path(\"/checkout/{cartId}\")\n 42  \t@Produces(MediaType.APPLICATION_JSON)\n 43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n 44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n 45  \t}\n 46  \n 47  \t@POST\n 48  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n 49  \t@Produces(MediaType.APPLICATION_JSON)\n 50  \tpublic ShoppingCart add(@PathParam(\"cartId\") String cartId,\n 51  \t\t\t\t\t\t\t@PathParam(\"itemId\") String itemId,\n 52  \t\t\t\t\t\t\t@PathParam(\"quantity\") int quantity) throws Exception {\n 53  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 54  \n 55  \t\tProduct product = shoppingCartService.getProduct(itemId);\n 56  \n 57  \t\tShoppingCartItem sci = new ShoppingCartItem();\n 58  \t\tsci.setProduct(product);\n 59  \t\tsci.setQuantity(quantity);\n 60  \t\tsci.setPrice(product.getPrice());\n 61  \t\tcart.addShoppingCartItem(sci);\n 62  \n 63  \t\ttry {\n 64  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 65  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 66  \t\t} catch (Exception ex) {\n 67  \t\t\tcart.removeShoppingCartItem(sci);\n 68  \t\t\tthrow ex;\n 69  \t\t}\n 70  \n 71  \t\treturn cart;\n 72  \t}\n 73  \n 74  \t@POST\n 75  \t@Path(\"/{cartId}/{tmpId}\")\n 76  \t@Produces(MediaType.APPLICATION_JSON)\n 77  \tpublic ShoppingCart set(@PathParam(\"cartId\") String cartId,\n 78  \t\t\t\t\t\t\t@PathParam(\"tmpId\") String tmpId) throws Exception {\n 79  \n 80  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n 81  \t\tShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);\n 82  \n 83  \t\tif (tmpCart != null) {\n 84  \t\t\tcart.resetShoppingCartItemList();\n 85  \t\t\tcart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());\n 86  \t\t}\n 87  \n 88  \t\ttry {\n 89  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 90  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n 91  \t\t} catch (Exception ex) {\n 92  \t\t\tthrow ex;\n 93  \t\t}\n 94  \n 95  \t\treturn cart;\n 96  \t}\n 97  \n 98  \t@DELETE\n 99  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n100  \t@Produces(MediaType.APPLICATION_JSON)\n101  \tpublic ShoppingCart delete(@PathParam(\"cartId\") String cartId,\n102  \t\t\t\t\t\t\t   @PathParam(\"itemId\") String itemId,\n103  \t\t\t\t\t\t\t   @PathParam(\"quantity\") int quantity) throws Exception {\n104  \n105  \t\tList\u003cShoppingCartItem\u003e toRemoveList = new ArrayList\u003c\u003e();\n106  \n107  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n108  \n109  \t\tcart.getShoppingCartItemList().stream()\n110  \t\t\t\t.filter(sci -\u003e sci.getProduct().getItemId().equals(itemId))\n111  \t\t\t\t.forEach(sci -\u003e {\n112  \t\t\t\t\tif (quantity \u003e= sci.getQuantity()) {\n113  \t\t\t\t\t\ttoRemoveList.add(sci);\n114  \t\t\t\t\t} else {\n115  \t\t\t\t\t\tsci.setQuantity(sci.getQuantity() - quantity);\n116  \t\t\t\t\t}\n117  \t\t\t\t});","lineNumber":17,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java","kind":"Module","name":"javax.ws.rs.core.MediaType","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.List;\n  5  \n  6  import javax.enterprise.context.RequestScoped;\n  7  import javax.inject.Inject;\n  8  import javax.ws.rs.Consumes;\n  9  import javax.ws.rs.GET;\n 10  import javax.ws.rs.Path;\n 11  import javax.ws.rs.PathParam;\n 12  import javax.ws.rs.Produces;\n 13  import javax.ws.rs.core.MediaType;\n 14  \n 15  import com.redhat.coolstore.model.Order;\n 16  import com.redhat.coolstore.service.OrderService;\n 17  \n 18  @RequestScoped\n 19  @Path(\"/orders\")\n 20  @Consumes(MediaType.APPLICATION_JSON)\n 21  @Produces(MediaType.APPLICATION_JSON)\n 22  public class OrderEndpoint implements Serializable {\n 23  \n 24      private static final long serialVersionUID = -7227732980791688774L;\n 25  \n 26      @Inject\n 27      private OrderService os;\n 28  \n 29  \n 30      @GET\n 31      @Path(\"/\")\n 32      public List\u003cOrder\u003e listAll() {\n 33          return os.getOrders();\n 34      }\n 35  \n 36      @GET\n 37      @Path(\"/{orderId}\")\n 38      public Order getOrder(@PathParam(\"orderId\") long orderId) {\n 39          return os.getOrderById(orderId);\n 40      }\n 41  \n 42  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","kind":"Module","name":"javax.enterprise.context.RequestScoped","package":"com.redhat.coolstore.rest","renamed":"enterprise"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","message":"Replace the `javax.inject` import statement with `jakarta.inject` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.List;\n  5  \n  6  import javax.enterprise.context.RequestScoped;\n  7  import javax.inject.Inject;\n  8  import javax.ws.rs.Consumes;\n  9  import javax.ws.rs.GET;\n 10  import javax.ws.rs.Path;\n 11  import javax.ws.rs.PathParam;\n 12  import javax.ws.rs.Produces;\n 13  import javax.ws.rs.core.MediaType;\n 14  \n 15  import com.redhat.coolstore.model.Order;\n 16  import com.redhat.coolstore.service.OrderService;\n 17  \n 18  @RequestScoped\n 19  @Path(\"/orders\")\n 20  @Consumes(MediaType.APPLICATION_JSON)\n 21  @Produces(MediaType.APPLICATION_JSON)\n 22  public class OrderEndpoint implements Serializable {\n 23  \n 24      private static final long serialVersionUID = -7227732980791688774L;\n 25  \n 26      @Inject\n 27      private OrderService os;\n 28  \n 29  \n 30      @GET\n 31      @Path(\"/\")\n 32      public List\u003cOrder\u003e listAll() {\n 33          return os.getOrders();\n 34      }\n 35  \n 36      @GET\n 37      @Path(\"/{orderId}\")\n 38      public Order getOrder(@PathParam(\"orderId\") long orderId) {\n 39          return os.getOrderById(orderId);\n 40      }\n 41  \n 42  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","kind":"Module","name":"javax.inject.Inject","package":"com.redhat.coolstore.rest","renamed":"inject"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.List;\n  5  \n  6  import javax.enterprise.context.RequestScoped;\n  7  import javax.inject.Inject;\n  8  import javax.ws.rs.Consumes;\n  9  import javax.ws.rs.GET;\n 10  import javax.ws.rs.Path;\n 11  import javax.ws.rs.PathParam;\n 12  import javax.ws.rs.Produces;\n 13  import javax.ws.rs.core.MediaType;\n 14  \n 15  import com.redhat.coolstore.model.Order;\n 16  import com.redhat.coolstore.service.OrderService;\n 17  \n 18  @RequestScoped\n 19  @Path(\"/orders\")\n 20  @Consumes(MediaType.APPLICATION_JSON)\n 21  @Produces(MediaType.APPLICATION_JSON)\n 22  public class OrderEndpoint implements Serializable {\n 23  \n 24      private static final long serialVersionUID = -7227732980791688774L;\n 25  \n 26      @Inject\n 27      private OrderService os;\n 28  \n 29  \n 30      @GET\n 31      @Path(\"/\")\n 32      public List\u003cOrder\u003e listAll() {\n 33          return os.getOrders();\n 34      }\n 35  \n 36      @GET\n 37      @Path(\"/{orderId}\")\n 38      public Order getOrder(@PathParam(\"orderId\") long orderId) {\n 39          return os.getOrderById(orderId);\n 40      }\n 41  \n 42  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","kind":"Module","name":"javax.ws.rs.Consumes","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.List;\n  5  \n  6  import javax.enterprise.context.RequestScoped;\n  7  import javax.inject.Inject;\n  8  import javax.ws.rs.Consumes;\n  9  import javax.ws.rs.GET;\n 10  import javax.ws.rs.Path;\n 11  import javax.ws.rs.PathParam;\n 12  import javax.ws.rs.Produces;\n 13  import javax.ws.rs.core.MediaType;\n 14  \n 15  import com.redhat.coolstore.model.Order;\n 16  import com.redhat.coolstore.service.OrderService;\n 17  \n 18  @RequestScoped\n 19  @Path(\"/orders\")\n 20  @Consumes(MediaType.APPLICATION_JSON)\n 21  @Produces(MediaType.APPLICATION_JSON)\n 22  public class OrderEndpoint implements Serializable {\n 23  \n 24      private static final long serialVersionUID = -7227732980791688774L;\n 25  \n 26      @Inject\n 27      private OrderService os;\n 28  \n 29  \n 30      @GET\n 31      @Path(\"/\")\n 32      public List\u003cOrder\u003e listAll() {\n 33          return os.getOrders();\n 34      }\n 35  \n 36      @GET\n 37      @Path(\"/{orderId}\")\n 38      public Order getOrder(@PathParam(\"orderId\") long orderId) {\n 39          return os.getOrderById(orderId);\n 40      }\n 41  \n 42  }\n","lineNumber":9,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","kind":"Module","name":"javax.ws.rs.GET","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.List;\n  5  \n  6  import javax.enterprise.context.RequestScoped;\n  7  import javax.inject.Inject;\n  8  import javax.ws.rs.Consumes;\n  9  import javax.ws.rs.GET;\n 10  import javax.ws.rs.Path;\n 11  import javax.ws.rs.PathParam;\n 12  import javax.ws.rs.Produces;\n 13  import javax.ws.rs.core.MediaType;\n 14  \n 15  import com.redhat.coolstore.model.Order;\n 16  import com.redhat.coolstore.service.OrderService;\n 17  \n 18  @RequestScoped\n 19  @Path(\"/orders\")\n 20  @Consumes(MediaType.APPLICATION_JSON)\n 21  @Produces(MediaType.APPLICATION_JSON)\n 22  public class OrderEndpoint implements Serializable {\n 23  \n 24      private static final long serialVersionUID = -7227732980791688774L;\n 25  \n 26      @Inject\n 27      private OrderService os;\n 28  \n 29  \n 30      @GET\n 31      @Path(\"/\")\n 32      public List\u003cOrder\u003e listAll() {\n 33          return os.getOrders();\n 34      }\n 35  \n 36      @GET\n 37      @Path(\"/{orderId}\")\n 38      public Order getOrder(@PathParam(\"orderId\") long orderId) {\n 39          return os.getOrderById(orderId);\n 40      }\n 41  \n 42  }\n","lineNumber":10,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","kind":"Module","name":"javax.ws.rs.Path","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.List;\n  5  \n  6  import javax.enterprise.context.RequestScoped;\n  7  import javax.inject.Inject;\n  8  import javax.ws.rs.Consumes;\n  9  import javax.ws.rs.GET;\n 10  import javax.ws.rs.Path;\n 11  import javax.ws.rs.PathParam;\n 12  import javax.ws.rs.Produces;\n 13  import javax.ws.rs.core.MediaType;\n 14  \n 15  import com.redhat.coolstore.model.Order;\n 16  import com.redhat.coolstore.service.OrderService;\n 17  \n 18  @RequestScoped\n 19  @Path(\"/orders\")\n 20  @Consumes(MediaType.APPLICATION_JSON)\n 21  @Produces(MediaType.APPLICATION_JSON)\n 22  public class OrderEndpoint implements Serializable {\n 23  \n 24      private static final long serialVersionUID = -7227732980791688774L;\n 25  \n 26      @Inject\n 27      private OrderService os;\n 28  \n 29  \n 30      @GET\n 31      @Path(\"/\")\n 32      public List\u003cOrder\u003e listAll() {\n 33          return os.getOrders();\n 34      }\n 35  \n 36      @GET\n 37      @Path(\"/{orderId}\")\n 38      public Order getOrder(@PathParam(\"orderId\") long orderId) {\n 39          return os.getOrderById(orderId);\n 40      }\n 41  \n 42  }\n","lineNumber":11,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","kind":"Module","name":"javax.ws.rs.PathParam","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.List;\n  5  \n  6  import javax.enterprise.context.RequestScoped;\n  7  import javax.inject.Inject;\n  8  import javax.ws.rs.Consumes;\n  9  import javax.ws.rs.GET;\n 10  import javax.ws.rs.Path;\n 11  import javax.ws.rs.PathParam;\n 12  import javax.ws.rs.Produces;\n 13  import javax.ws.rs.core.MediaType;\n 14  \n 15  import com.redhat.coolstore.model.Order;\n 16  import com.redhat.coolstore.service.OrderService;\n 17  \n 18  @RequestScoped\n 19  @Path(\"/orders\")\n 20  @Consumes(MediaType.APPLICATION_JSON)\n 21  @Produces(MediaType.APPLICATION_JSON)\n 22  public class OrderEndpoint implements Serializable {\n 23  \n 24      private static final long serialVersionUID = -7227732980791688774L;\n 25  \n 26      @Inject\n 27      private OrderService os;\n 28  \n 29  \n 30      @GET\n 31      @Path(\"/\")\n 32      public List\u003cOrder\u003e listAll() {\n 33          return os.getOrders();\n 34      }\n 35  \n 36      @GET\n 37      @Path(\"/{orderId}\")\n 38      public Order getOrder(@PathParam(\"orderId\") long orderId) {\n 39          return os.getOrderById(orderId);\n 40      }\n 41  \n 42  }\n","lineNumber":12,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","kind":"Module","name":"javax.ws.rs.Produces","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.List;\n  5  \n  6  import javax.enterprise.context.RequestScoped;\n  7  import javax.inject.Inject;\n  8  import javax.ws.rs.Consumes;\n  9  import javax.ws.rs.GET;\n 10  import javax.ws.rs.Path;\n 11  import javax.ws.rs.PathParam;\n 12  import javax.ws.rs.Produces;\n 13  import javax.ws.rs.core.MediaType;\n 14  \n 15  import com.redhat.coolstore.model.Order;\n 16  import com.redhat.coolstore.service.OrderService;\n 17  \n 18  @RequestScoped\n 19  @Path(\"/orders\")\n 20  @Consumes(MediaType.APPLICATION_JSON)\n 21  @Produces(MediaType.APPLICATION_JSON)\n 22  public class OrderEndpoint implements Serializable {\n 23  \n 24      private static final long serialVersionUID = -7227732980791688774L;\n 25  \n 26      @Inject\n 27      private OrderService os;\n 28  \n 29  \n 30      @GET\n 31      @Path(\"/\")\n 32      public List\u003cOrder\u003e listAll() {\n 33          return os.getOrders();\n 34      }\n 35  \n 36      @GET\n 37      @Path(\"/{orderId}\")\n 38      public Order getOrder(@PathParam(\"orderId\") long orderId) {\n 39          return os.getOrderById(orderId);\n 40      }\n 41  \n 42  }\n","lineNumber":13,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java","kind":"Module","name":"javax.ws.rs.core.MediaType","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.List;\n  5  \n  6  import javax.enterprise.context.RequestScoped;\n  7  import javax.inject.Inject;\n  8  import javax.ws.rs.*;\n  9  import javax.ws.rs.core.MediaType;\n 10  \n 11  import com.redhat.coolstore.model.Product;\n 12  import com.redhat.coolstore.service.ProductService;\n 13  \n 14  @RequestScoped\n 15  @Path(\"/products\")\n 16  @Consumes(MediaType.APPLICATION_JSON)\n 17  @Produces(MediaType.APPLICATION_JSON)\n 18  public class ProductEndpoint implements Serializable {\n 19  \n 20      /**\n 21       *\n 22       */\n 23      private static final long serialVersionUID = -7227732980791688773L;\n 24  \n 25      @Inject\n 26      private ProductService pm;\n 27  \n 28  \n 29      @GET\n 30      @Path(\"/\")\n 31      public List\u003cProduct\u003e listAll() {\n 32          return pm.getProducts();\n 33      }\n 34  \n 35      @GET\n 36      @Path(\"/{itemId}\")\n 37      public Product getProduct(@PathParam(\"itemId\") String itemId) {\n 38          return pm.getProductByItemId(itemId);\n 39      }\n 40  \n 41  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java","kind":"Module","name":"javax.enterprise.context.RequestScoped","package":"com.redhat.coolstore.rest","renamed":"enterprise"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java","message":"Replace the `javax.inject` import statement with `jakarta.inject` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.List;\n  5  \n  6  import javax.enterprise.context.RequestScoped;\n  7  import javax.inject.Inject;\n  8  import javax.ws.rs.*;\n  9  import javax.ws.rs.core.MediaType;\n 10  \n 11  import com.redhat.coolstore.model.Product;\n 12  import com.redhat.coolstore.service.ProductService;\n 13  \n 14  @RequestScoped\n 15  @Path(\"/products\")\n 16  @Consumes(MediaType.APPLICATION_JSON)\n 17  @Produces(MediaType.APPLICATION_JSON)\n 18  public class ProductEndpoint implements Serializable {\n 19  \n 20      /**\n 21       *\n 22       */\n 23      private static final long serialVersionUID = -7227732980791688773L;\n 24  \n 25      @Inject\n 26      private ProductService pm;\n 27  \n 28  \n 29      @GET\n 30      @Path(\"/\")\n 31      public List\u003cProduct\u003e listAll() {\n 32          return pm.getProducts();\n 33      }\n 34  \n 35      @GET\n 36      @Path(\"/{itemId}\")\n 37      public Product getProduct(@PathParam(\"itemId\") String itemId) {\n 38          return pm.getProductByItemId(itemId);\n 39      }\n 40  \n 41  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java","kind":"Module","name":"javax.inject.Inject","package":"com.redhat.coolstore.rest","renamed":"inject"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.List;\n  5  \n  6  import javax.enterprise.context.RequestScoped;\n  7  import javax.inject.Inject;\n  8  import javax.ws.rs.*;\n  9  import javax.ws.rs.core.MediaType;\n 10  \n 11  import com.redhat.coolstore.model.Product;\n 12  import com.redhat.coolstore.service.ProductService;\n 13  \n 14  @RequestScoped\n 15  @Path(\"/products\")\n 16  @Consumes(MediaType.APPLICATION_JSON)\n 17  @Produces(MediaType.APPLICATION_JSON)\n 18  public class ProductEndpoint implements Serializable {\n 19  \n 20      /**\n 21       *\n 22       */\n 23      private static final long serialVersionUID = -7227732980791688773L;\n 24  \n 25      @Inject\n 26      private ProductService pm;\n 27  \n 28  \n 29      @GET\n 30      @Path(\"/\")\n 31      public List\u003cProduct\u003e listAll() {\n 32          return pm.getProducts();\n 33      }\n 34  \n 35      @GET\n 36      @Path(\"/{itemId}\")\n 37      public Product getProduct(@PathParam(\"itemId\") String itemId) {\n 38          return pm.getProductByItemId(itemId);\n 39      }\n 40  \n 41  }\n","lineNumber":9,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java","kind":"Module","name":"javax.ws.rs.core.MediaType","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/RestApplication.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import javax.ws.rs.ApplicationPath;\n  4  import javax.ws.rs.core.Application;\n  5  \n  6  \n  7  @ApplicationPath(\"/services\")\n  8  public class RestApplication extends Application {\n  9  \n 10  }\n","lineNumber":3,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/RestApplication.java","kind":"Module","name":"javax.ws.rs.ApplicationPath","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/RestApplication.java","message":"Replace the `javax.ws` import statement with `jakarta.ws` ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import javax.ws.rs.ApplicationPath;\n  4  import javax.ws.rs.core.Application;\n  5  \n  6  \n  7  @ApplicationPath(\"/services\")\n  8  public class RestApplication extends Application {\n  9  \n 10  }\n","lineNumber":4,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/RestApplication.java","kind":"Module","name":"javax.ws.rs.core.Application","package":"com.redhat.coolstore.rest","renamed":"ws"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.List;\n  4  import java.util.logging.Logger;\n  5  \n  6  import javax.inject.Inject;\n  7  \n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  import javax.ejb.Stateless;\n 13  import javax.persistence.EntityManager;\n 14  \n 15  import com.redhat.coolstore.model.*;\n 16  \n 17  @Stateless\n 18  public class CatalogService {\n 19  \n 20      @Inject\n 21      Logger log;\n 22  \n 23      @Inject\n 24      private EntityManager em;\n 25  \n 26      public CatalogService() {\n 27      }\n 28  \n 29      public List\u003cCatalogItemEntity\u003e getCatalogItems() {\n 30          CriteriaBuilder cb = em.getCriteriaBuilder();\n 31          CriteriaQuery\u003cCatalogItemEntity\u003e criteria = cb.createQuery(CatalogItemEntity.class);\n 32          Root\u003cCatalogItemEntity\u003e member = criteria.from(CatalogItemEntity.class);\n 33          criteria.select(member);\n 34          return em.createQuery(criteria).getResultList();\n 35      }\n 36  \n 37      public CatalogItemEntity getCatalogItemById(String itemId) {\n 38          return em.find(CatalogItemEntity.class, itemId);\n 39      }\n 40  \n 41      public void updateInventoryItems(String itemId, int deducts) {\n 42          InventoryEntity inventoryEntity = getCatalogItemById(itemId).getInventory();\n 43          int currentQuantity = inventoryEntity.getQuantity();\n 44          inventoryEntity.setQuantity(currentQuantity-deducts);\n 45          em.merge(inventoryEntity);\n 46      }\n 47  \n 48  }\n","lineNumber":12,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","kind":"Module","name":"javax.ejb.Stateless","package":"com.redhat.coolstore.service","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","message":"Replace the `javax.inject` import statement with `jakarta.inject` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.List;\n  4  import java.util.logging.Logger;\n  5  \n  6  import javax.inject.Inject;\n  7  \n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  import javax.ejb.Stateless;\n 13  import javax.persistence.EntityManager;\n 14  \n 15  import com.redhat.coolstore.model.*;\n 16  \n 17  @Stateless\n 18  public class CatalogService {\n 19  \n 20      @Inject\n 21      Logger log;\n 22  \n 23      @Inject\n 24      private EntityManager em;\n 25  \n 26      public CatalogService() {\n 27      }\n 28  \n 29      public List\u003cCatalogItemEntity\u003e getCatalogItems() {\n 30          CriteriaBuilder cb = em.getCriteriaBuilder();\n 31          CriteriaQuery\u003cCatalogItemEntity\u003e criteria = cb.createQuery(CatalogItemEntity.class);\n 32          Root\u003cCatalogItemEntity\u003e member = criteria.from(CatalogItemEntity.class);\n 33          criteria.select(member);\n 34          return em.createQuery(criteria).getResultList();\n 35      }\n 36  \n 37      public CatalogItemEntity getCatalogItemById(String itemId) {\n 38          return em.find(CatalogItemEntity.class, itemId);\n 39      }\n 40  \n 41      public void updateInventoryItems(String itemId, int deducts) {\n 42          InventoryEntity inventoryEntity = getCatalogItemById(itemId).getInventory();\n 43          int currentQuantity = inventoryEntity.getQuantity();\n 44          inventoryEntity.setQuantity(currentQuantity-deducts);\n 45          em.merge(inventoryEntity);\n 46      }\n 47  \n 48  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","kind":"Module","name":"javax.inject.Inject","package":"com.redhat.coolstore.service","renamed":"inject"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.List;\n  4  import java.util.logging.Logger;\n  5  \n  6  import javax.inject.Inject;\n  7  \n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  import javax.ejb.Stateless;\n 13  import javax.persistence.EntityManager;\n 14  \n 15  import com.redhat.coolstore.model.*;\n 16  \n 17  @Stateless\n 18  public class CatalogService {\n 19  \n 20      @Inject\n 21      Logger log;\n 22  \n 23      @Inject\n 24      private EntityManager em;\n 25  \n 26      public CatalogService() {\n 27      }\n 28  \n 29      public List\u003cCatalogItemEntity\u003e getCatalogItems() {\n 30          CriteriaBuilder cb = em.getCriteriaBuilder();\n 31          CriteriaQuery\u003cCatalogItemEntity\u003e criteria = cb.createQuery(CatalogItemEntity.class);\n 32          Root\u003cCatalogItemEntity\u003e member = criteria.from(CatalogItemEntity.class);\n 33          criteria.select(member);\n 34          return em.createQuery(criteria).getResultList();\n 35      }\n 36  \n 37      public CatalogItemEntity getCatalogItemById(String itemId) {\n 38          return em.find(CatalogItemEntity.class, itemId);\n 39      }\n 40  \n 41      public void updateInventoryItems(String itemId, int deducts) {\n 42          InventoryEntity inventoryEntity = getCatalogItemById(itemId).getInventory();\n 43          int currentQuantity = inventoryEntity.getQuantity();\n 44          inventoryEntity.setQuantity(currentQuantity-deducts);\n 45          em.merge(inventoryEntity);\n 46      }\n 47  \n 48  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","kind":"Module","name":"javax.persistence.criteria.CriteriaBuilder","package":"com.redhat.coolstore.service","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.List;\n  4  import java.util.logging.Logger;\n  5  \n  6  import javax.inject.Inject;\n  7  \n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  import javax.ejb.Stateless;\n 13  import javax.persistence.EntityManager;\n 14  \n 15  import com.redhat.coolstore.model.*;\n 16  \n 17  @Stateless\n 18  public class CatalogService {\n 19  \n 20      @Inject\n 21      Logger log;\n 22  \n 23      @Inject\n 24      private EntityManager em;\n 25  \n 26      public CatalogService() {\n 27      }\n 28  \n 29      public List\u003cCatalogItemEntity\u003e getCatalogItems() {\n 30          CriteriaBuilder cb = em.getCriteriaBuilder();\n 31          CriteriaQuery\u003cCatalogItemEntity\u003e criteria = cb.createQuery(CatalogItemEntity.class);\n 32          Root\u003cCatalogItemEntity\u003e member = criteria.from(CatalogItemEntity.class);\n 33          criteria.select(member);\n 34          return em.createQuery(criteria).getResultList();\n 35      }\n 36  \n 37      public CatalogItemEntity getCatalogItemById(String itemId) {\n 38          return em.find(CatalogItemEntity.class, itemId);\n 39      }\n 40  \n 41      public void updateInventoryItems(String itemId, int deducts) {\n 42          InventoryEntity inventoryEntity = getCatalogItemById(itemId).getInventory();\n 43          int currentQuantity = inventoryEntity.getQuantity();\n 44          inventoryEntity.setQuantity(currentQuantity-deducts);\n 45          em.merge(inventoryEntity);\n 46      }\n 47  \n 48  }\n","lineNumber":9,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","kind":"Module","name":"javax.persistence.criteria.CriteriaQuery","package":"com.redhat.coolstore.service","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.List;\n  4  import java.util.logging.Logger;\n  5  \n  6  import javax.inject.Inject;\n  7  \n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  import javax.ejb.Stateless;\n 13  import javax.persistence.EntityManager;\n 14  \n 15  import com.redhat.coolstore.model.*;\n 16  \n 17  @Stateless\n 18  public class CatalogService {\n 19  \n 20      @Inject\n 21      Logger log;\n 22  \n 23      @Inject\n 24      private EntityManager em;\n 25  \n 26      public CatalogService() {\n 27      }\n 28  \n 29      public List\u003cCatalogItemEntity\u003e getCatalogItems() {\n 30          CriteriaBuilder cb = em.getCriteriaBuilder();\n 31          CriteriaQuery\u003cCatalogItemEntity\u003e criteria = cb.createQuery(CatalogItemEntity.class);\n 32          Root\u003cCatalogItemEntity\u003e member = criteria.from(CatalogItemEntity.class);\n 33          criteria.select(member);\n 34          return em.createQuery(criteria).getResultList();\n 35      }\n 36  \n 37      public CatalogItemEntity getCatalogItemById(String itemId) {\n 38          return em.find(CatalogItemEntity.class, itemId);\n 39      }\n 40  \n 41      public void updateInventoryItems(String itemId, int deducts) {\n 42          InventoryEntity inventoryEntity = getCatalogItemById(itemId).getInventory();\n 43          int currentQuantity = inventoryEntity.getQuantity();\n 44          inventoryEntity.setQuantity(currentQuantity-deducts);\n 45          em.merge(inventoryEntity);\n 46      }\n 47  \n 48  }\n","lineNumber":10,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","kind":"Module","name":"javax.persistence.criteria.Root","package":"com.redhat.coolstore.service","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.List;\n  4  import java.util.logging.Logger;\n  5  \n  6  import javax.inject.Inject;\n  7  \n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  import javax.ejb.Stateless;\n 13  import javax.persistence.EntityManager;\n 14  \n 15  import com.redhat.coolstore.model.*;\n 16  \n 17  @Stateless\n 18  public class CatalogService {\n 19  \n 20      @Inject\n 21      Logger log;\n 22  \n 23      @Inject\n 24      private EntityManager em;\n 25  \n 26      public CatalogService() {\n 27      }\n 28  \n 29      public List\u003cCatalogItemEntity\u003e getCatalogItems() {\n 30          CriteriaBuilder cb = em.getCriteriaBuilder();\n 31          CriteriaQuery\u003cCatalogItemEntity\u003e criteria = cb.createQuery(CatalogItemEntity.class);\n 32          Root\u003cCatalogItemEntity\u003e member = criteria.from(CatalogItemEntity.class);\n 33          criteria.select(member);\n 34          return em.createQuery(criteria).getResultList();\n 35      }\n 36  \n 37      public CatalogItemEntity getCatalogItemById(String itemId) {\n 38          return em.find(CatalogItemEntity.class, itemId);\n 39      }\n 40  \n 41      public void updateInventoryItems(String itemId, int deducts) {\n 42          InventoryEntity inventoryEntity = getCatalogItemById(itemId).getInventory();\n 43          int currentQuantity = inventoryEntity.getQuantity();\n 44          inventoryEntity.setQuantity(currentQuantity-deducts);\n 45          em.merge(inventoryEntity);\n 46      }\n 47  \n 48  }\n","lineNumber":13,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","kind":"Module","name":"javax.persistence.EntityManager","package":"com.redhat.coolstore.service","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java","message":"Replace the `javax.inject` import statement with `jakarta.inject` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.Order;\n  4  import com.redhat.coolstore.utils.Transformers;\n  5  \n  6  import javax.inject.Inject;\n  7  import javax.jms.*;\n  8  import javax.naming.Context;\n  9  import javax.naming.InitialContext;\n 10  import javax.naming.NamingException;\n 11  import javax.rmi.PortableRemoteObject;\n 12  import java.util.Hashtable;\n 13  \n 14  public class InventoryNotificationMDB implements MessageListener {\n 15  \n 16      private static final int LOW_THRESHOLD = 50;\n 17  \n 18      @Inject\n 19      private CatalogService catalogService;\n 20  \n 21      private final static String JNDI_FACTORY = \"weblogic.jndi.WLInitialContextFactory\";\n 22      private final static String JMS_FACTORY = \"TCF\";\n 23      private final static String TOPIC = \"topic/orders\";\n 24      private TopicConnection tcon;\n 25      private TopicSession tsession;\n 26      private TopicSubscriber tsubscriber;\n 27  \n 28      public void onMessage(Message rcvMessage) {\n 29          TextMessage msg;\n 30          {\n 31              try {\n 32                  System.out.println(\"received message inventory\");\n 33                  if (rcvMessage instanceof TextMessage) {\n 34                      msg = (TextMessage) rcvMessage;\n 35                      String orderStr = msg.getBody(String.class);\n 36                      Order order = Transformers.jsonToOrder(orderStr);\n 37                      order.getItemList().forEach(orderItem -\u003e {\n 38                          int old_quantity = catalogService.getCatalogItemById(orderItem.getProductId()).getInventory().getQuantity();\n 39                          int new_quantity = old_quantity - orderItem.getQuantity();\n 40                          if (new_quantity \u003c LOW_THRESHOLD) {\n 41                              System.out.println(\"Inventory for item \" + orderItem.getProductId() + \" is below threshold (\" + LOW_THRESHOLD + \"), contact supplier!\");\n 42                          } else {\n 43                              orderItem.setQuantity(new_quantity);\n 44                          }\n 45                      });\n 46                  }\n 47  \n 48  \n 49              } catch (JMSException jmse) {\n 50                  System.err.println(\"An exception occurred: \" + jmse.getMessage());\n 51              }\n 52          }\n 53      }\n 54  \n 55      public void init() throws NamingException, JMSException {\n 56          Context ctx = getInitialContext();\n 57          TopicConnectionFactory tconFactory = (TopicConnectionFactory) PortableRemoteObject.narrow(ctx.lookup(JMS_FACTORY), TopicConnectionFactory.class);\n 58          tcon = tconFactory.createTopicConnection();\n 59          tsession = tcon.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);\n 60          Topic topic = (Topic) PortableRemoteObject.narrow(ctx.lookup(TOPIC), Topic.class);\n 61          tsubscriber = tsession.createSubscriber(topic);\n 62          tsubscriber.setMessageListener(this);\n 63          tcon.start();\n 64      }\n 65  \n 66      public void close() throws JMSException {\n 67          tsubscriber.close();\n 68          tsession.close();\n 69          tcon.close();\n 70      }\n 71  \n 72      private static InitialContext getInitialContext() throws NamingException {\n 73          Hashtable\u003cString, String\u003e env = new Hashtable\u003c\u003e();\n 74          env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);\n 75          env.put(Context.PROVIDER_URL, \"t3://localhost:7001\");\n 76          env.put(\"weblogic.jndi.createIntermediateContexts\", \"true\");\n 77          return new InitialContext(env);\n 78      }\n 79  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java","kind":"Module","name":"javax.inject.Inject","package":"com.redhat.coolstore.service","renamed":"inject"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.Order;\n  4  import java.util.List;\n  5  import javax.ejb.Stateless;\n  6  import javax.inject.Inject;\n  7  import javax.persistence.EntityManager;\n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  @Stateless\n 13  public class OrderService {\n 14  \n 15    @Inject\n 16    private EntityManager em;\n 17  \n 18    public void save(Order order) {\n 19      em.persist(order);\n 20    }\n 21  \n 22    public List\u003cOrder\u003e getOrders() {\n 23      CriteriaBuilder cb = em.getCriteriaBuilder();\n 24      CriteriaQuery\u003cOrder\u003e criteria = cb.createQuery(Order.class);\n 25      Root\u003cOrder\u003e member = criteria.from(Order.class);\n 26      criteria.select(member);\n 27      return em.createQuery(criteria).getResultList();\n 28    }\n 29  \n 30    public Order getOrderById(long id) {\n 31      return em.find(Order.class, id);\n 32    }\n 33  }\n","lineNumber":5,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","kind":"Module","name":"javax.ejb.Stateless","package":"com.redhat.coolstore.service","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","message":"Replace the `javax.inject` import statement with `jakarta.inject` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.Order;\n  4  import java.util.List;\n  5  import javax.ejb.Stateless;\n  6  import javax.inject.Inject;\n  7  import javax.persistence.EntityManager;\n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  @Stateless\n 13  public class OrderService {\n 14  \n 15    @Inject\n 16    private EntityManager em;\n 17  \n 18    public void save(Order order) {\n 19      em.persist(order);\n 20    }\n 21  \n 22    public List\u003cOrder\u003e getOrders() {\n 23      CriteriaBuilder cb = em.getCriteriaBuilder();\n 24      CriteriaQuery\u003cOrder\u003e criteria = cb.createQuery(Order.class);\n 25      Root\u003cOrder\u003e member = criteria.from(Order.class);\n 26      criteria.select(member);\n 27      return em.createQuery(criteria).getResultList();\n 28    }\n 29  \n 30    public Order getOrderById(long id) {\n 31      return em.find(Order.class, id);\n 32    }\n 33  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","kind":"Module","name":"javax.inject.Inject","package":"com.redhat.coolstore.service","renamed":"inject"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.Order;\n  4  import java.util.List;\n  5  import javax.ejb.Stateless;\n  6  import javax.inject.Inject;\n  7  import javax.persistence.EntityManager;\n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  @Stateless\n 13  public class OrderService {\n 14  \n 15    @Inject\n 16    private EntityManager em;\n 17  \n 18    public void save(Order order) {\n 19      em.persist(order);\n 20    }\n 21  \n 22    public List\u003cOrder\u003e getOrders() {\n 23      CriteriaBuilder cb = em.getCriteriaBuilder();\n 24      CriteriaQuery\u003cOrder\u003e criteria = cb.createQuery(Order.class);\n 25      Root\u003cOrder\u003e member = criteria.from(Order.class);\n 26      criteria.select(member);\n 27      return em.createQuery(criteria).getResultList();\n 28    }\n 29  \n 30    public Order getOrderById(long id) {\n 31      return em.find(Order.class, id);\n 32    }\n 33  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","kind":"Module","name":"javax.persistence.EntityManager","package":"com.redhat.coolstore.service","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.Order;\n  4  import java.util.List;\n  5  import javax.ejb.Stateless;\n  6  import javax.inject.Inject;\n  7  import javax.persistence.EntityManager;\n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  @Stateless\n 13  public class OrderService {\n 14  \n 15    @Inject\n 16    private EntityManager em;\n 17  \n 18    public void save(Order order) {\n 19      em.persist(order);\n 20    }\n 21  \n 22    public List\u003cOrder\u003e getOrders() {\n 23      CriteriaBuilder cb = em.getCriteriaBuilder();\n 24      CriteriaQuery\u003cOrder\u003e criteria = cb.createQuery(Order.class);\n 25      Root\u003cOrder\u003e member = criteria.from(Order.class);\n 26      criteria.select(member);\n 27      return em.createQuery(criteria).getResultList();\n 28    }\n 29  \n 30    public Order getOrderById(long id) {\n 31      return em.find(Order.class, id);\n 32    }\n 33  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","kind":"Module","name":"javax.persistence.criteria.CriteriaBuilder","package":"com.redhat.coolstore.service","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.Order;\n  4  import java.util.List;\n  5  import javax.ejb.Stateless;\n  6  import javax.inject.Inject;\n  7  import javax.persistence.EntityManager;\n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  @Stateless\n 13  public class OrderService {\n 14  \n 15    @Inject\n 16    private EntityManager em;\n 17  \n 18    public void save(Order order) {\n 19      em.persist(order);\n 20    }\n 21  \n 22    public List\u003cOrder\u003e getOrders() {\n 23      CriteriaBuilder cb = em.getCriteriaBuilder();\n 24      CriteriaQuery\u003cOrder\u003e criteria = cb.createQuery(Order.class);\n 25      Root\u003cOrder\u003e member = criteria.from(Order.class);\n 26      criteria.select(member);\n 27      return em.createQuery(criteria).getResultList();\n 28    }\n 29  \n 30    public Order getOrderById(long id) {\n 31      return em.find(Order.class, id);\n 32    }\n 33  }\n","lineNumber":9,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","kind":"Module","name":"javax.persistence.criteria.CriteriaQuery","package":"com.redhat.coolstore.service","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.Order;\n  4  import java.util.List;\n  5  import javax.ejb.Stateless;\n  6  import javax.inject.Inject;\n  7  import javax.persistence.EntityManager;\n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  @Stateless\n 13  public class OrderService {\n 14  \n 15    @Inject\n 16    private EntityManager em;\n 17  \n 18    public void save(Order order) {\n 19      em.persist(order);\n 20    }\n 21  \n 22    public List\u003cOrder\u003e getOrders() {\n 23      CriteriaBuilder cb = em.getCriteriaBuilder();\n 24      CriteriaQuery\u003cOrder\u003e criteria = cb.createQuery(Order.class);\n 25      Root\u003cOrder\u003e member = criteria.from(Order.class);\n 26      criteria.select(member);\n 27      return em.createQuery(criteria).getResultList();\n 28    }\n 29  \n 30    public Order getOrderById(long id) {\n 31      return em.find(Order.class, id);\n 32    }\n 33  }\n","lineNumber":10,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","kind":"Module","name":"javax.persistence.criteria.Root","package":"com.redhat.coolstore.service","renamed":"persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":3,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Module","name":"javax.ejb.ActivationConfigProperty","package":"com.redhat.coolstore.service","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":4,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Module","name":"javax.ejb.MessageDriven","package":"com.redhat.coolstore.service","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"Replace the `javax.inject` import statement with `jakarta.inject` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":5,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Module","name":"javax.inject.Inject","package":"com.redhat.coolstore.service","renamed":"inject"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"Replace the `javax.jms` import statement with `jakarta.jms` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Module","name":"javax.jms.JMSException","package":"com.redhat.coolstore.service","renamed":"jms"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"Replace the `javax.jms` import statement with `jakarta.jms` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Module","name":"javax.jms.Message","package":"com.redhat.coolstore.service","renamed":"jms"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"Replace the `javax.jms` import statement with `jakarta.jms` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Module","name":"javax.jms.MessageListener","package":"com.redhat.coolstore.service","renamed":"jms"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"Replace the `javax.jms` import statement with `jakarta.jms` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":9,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Module","name":"javax.jms.TextMessage","package":"com.redhat.coolstore.service","renamed":"jms"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ProductService.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.CatalogItemEntity;\n  4  import com.redhat.coolstore.model.Product;\n  5  import com.redhat.coolstore.utils.Transformers;\n  6  \n  7  import javax.ejb.Stateless;\n  8  import javax.inject.Inject;\n  9  import java.util.List;\n 10  import java.util.stream.Collectors;\n 11  \n 12  import static com.redhat.coolstore.utils.Transformers.toProduct;\n 13  \n 14  @Stateless\n 15  public class ProductService {\n 16  \n 17      @Inject\n 18      CatalogService cm;\n 19  \n 20      public ProductService() {\n 21      }\n 22  \n 23      public List\u003cProduct\u003e getProducts() {\n 24          return cm.getCatalogItems().stream().map(entity -\u003e toProduct(entity)).collect(Collectors.toList());\n 25      }\n 26  \n 27      public Product getProductByItemId(String itemId) {\n 28          CatalogItemEntity entity = cm.getCatalogItemById(itemId);\n 29          if (entity == null)\n 30              return null;\n 31  \n 32          // Return the entity\n 33          return Transformers.toProduct(entity);\n 34      }\n 35  \n 36  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ProductService.java","kind":"Module","name":"javax.ejb.Stateless","package":"com.redhat.coolstore.service","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ProductService.java","message":"Replace the `javax.inject` import statement with `jakarta.inject` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.CatalogItemEntity;\n  4  import com.redhat.coolstore.model.Product;\n  5  import com.redhat.coolstore.utils.Transformers;\n  6  \n  7  import javax.ejb.Stateless;\n  8  import javax.inject.Inject;\n  9  import java.util.List;\n 10  import java.util.stream.Collectors;\n 11  \n 12  import static com.redhat.coolstore.utils.Transformers.toProduct;\n 13  \n 14  @Stateless\n 15  public class ProductService {\n 16  \n 17      @Inject\n 18      CatalogService cm;\n 19  \n 20      public ProductService() {\n 21      }\n 22  \n 23      public List\u003cProduct\u003e getProducts() {\n 24          return cm.getCatalogItems().stream().map(entity -\u003e toProduct(entity)).collect(Collectors.toList());\n 25      }\n 26  \n 27      public Product getProductByItemId(String itemId) {\n 28          CatalogItemEntity entity = cm.getCatalogItemById(itemId);\n 29          if (entity == null)\n 30              return null;\n 31  \n 32          // Return the entity\n 33          return Transformers.toProduct(entity);\n 34      }\n 35  \n 36  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ProductService.java","kind":"Module","name":"javax.inject.Inject","package":"com.redhat.coolstore.service","renamed":"inject"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/PromoService.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.io.Serializable;\n  4  import java.util.HashMap;\n  5  import java.util.HashSet;\n  6  import java.util.Map;\n  7  import java.util.Set;\n  8  \n  9  import javax.enterprise.context.ApplicationScoped;\n 10  \n 11  import com.redhat.coolstore.model.Promotion;\n 12  import com.redhat.coolstore.model.ShoppingCart;\n 13  import com.redhat.coolstore.model.ShoppingCartItem;\n 14  \n 15  @ApplicationScoped\n 16  public class PromoService implements Serializable {\n 17  \n 18      private static final long serialVersionUID = 2088590587856645568L;\n 19  \n 20      private String name = null;\n 21  \n 22      private Set\u003cPromotion\u003e promotionSet = null;\n 23  \n 24      public PromoService() {\n 25  \n 26          promotionSet = new HashSet\u003c\u003e();\n 27  \n 28          promotionSet.add(new Promotion(\"329299\", .25));\n 29  \n 30      }\n 31  \n 32      public void applyCartItemPromotions(ShoppingCart shoppingCart) {\n 33  \n 34          if (shoppingCart != null \u0026\u0026 shoppingCart.getShoppingCartItemList().size() \u003e 0) {\n 35  \n 36              Map\u003cString, Promotion\u003e promoMap = new HashMap\u003cString, Promotion\u003e();\n 37  \n 38              for (Promotion promo : getPromotions()) {\n 39  \n 40                  promoMap.put(promo.getItemId(), promo);\n 41  \n 42              }\n 43  \n 44              for (ShoppingCartItem sci : shoppingCart.getShoppingCartItemList()) {\n 45  \n 46                  String productId = sci.getProduct().getItemId();\n 47  \n 48                  Promotion promo = promoMap.get(productId);\n 49  \n 50                  if (promo != null) {\n 51  \n 52                      sci.setPromoSavings(sci.getProduct().getPrice() * promo.getPercentOff() * -1);\n 53                      sci.setPrice(sci.getProduct().getPrice() * (1 - promo.getPercentOff()));\n 54  \n 55                  }\n 56  \n 57              }\n 58  \n 59          }\n 60  \n 61      }\n 62  \n 63      public void applyShippingPromotions(ShoppingCart shoppingCart) {\n 64  \n 65          if (shoppingCart != null) {\n 66  \n 67              //PROMO: if cart total is greater than 75, free shipping\n 68              if (shoppingCart.getCartItemTotal() \u003e= 75) {\n 69  \n 70                  shoppingCart.setShippingPromoSavings(shoppingCart.getShippingTotal() * -1);\n 71                  shoppingCart.setShippingTotal(0);\n 72  \n 73              }\n 74  \n 75          }\n 76  \n 77      }\n 78  \n 79      public Set\u003cPromotion\u003e getPromotions() {\n 80  \n 81          if (promotionSet == null) {\n 82  \n 83              promotionSet = new HashSet\u003c\u003e();\n 84  \n 85          }\n 86  \n 87          return new HashSet\u003c\u003e(promotionSet);\n 88  \n 89      }\n 90  \n 91      public void setPromotions(Set\u003cPromotion\u003e promotionSet) {\n 92  \n 93          if (promotionSet != null) {\n 94  \n 95              this.promotionSet = new HashSet\u003c\u003e(promotionSet);\n 96  \n 97          } else {\n 98  \n 99              this.promotionSet = new HashSet\u003c\u003e();\n100  \n101          }\n102  \n103      }\n104  \n105      @Override\n106      public String toString() {\n107          return \"PromoService [name=\" + name + \", promotionSet=\" + promotionSet + \"]\";\n108      }\n109  ","lineNumber":9,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/PromoService.java","kind":"Module","name":"javax.enterprise.context.ApplicationScoped","package":"com.redhat.coolstore.service","renamed":"enterprise"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShippingService.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.math.BigDecimal;\n  4  import java.math.RoundingMode;\n  5  \n  6  import javax.ejb.Remote;\n  7  import javax.ejb.Stateless;\n  8  \n  9  import com.redhat.coolstore.model.ShoppingCart;\n 10  \n 11  @Stateless\n 12  @Remote\n 13  public class ShippingService implements ShippingServiceRemote {\n 14  \n 15      @Override\n 16      public double calculateShipping(ShoppingCart sc) {\n 17  \n 18          if (sc != null) {\n 19  \n 20              if (sc.getCartItemTotal() \u003e= 0 \u0026\u0026 sc.getCartItemTotal() \u003c 25) {\n 21  \n 22                  return 2.99;\n 23  \n 24              } else if (sc.getCartItemTotal() \u003e= 25 \u0026\u0026 sc.getCartItemTotal() \u003c 50) {\n 25  \n 26                  return 4.99;\n 27  \n 28              } else if (sc.getCartItemTotal() \u003e= 50 \u0026\u0026 sc.getCartItemTotal() \u003c 75) {\n 29  \n 30                  return 6.99;\n 31  \n 32              } else if (sc.getCartItemTotal() \u003e= 75 \u0026\u0026 sc.getCartItemTotal() \u003c 100) {\n 33  \n 34                  return 8.99;\n 35  \n 36              } else if (sc.getCartItemTotal() \u003e= 100 \u0026\u0026 sc.getCartItemTotal() \u003c 10000) {\n 37  \n 38                  return 10.99;\n 39  \n 40              }\n 41  \n 42          }\n 43  \n 44          return 0;\n 45  \n 46      }\n 47  \n 48      @Override\n 49      public double calculateShippingInsurance(ShoppingCart sc) {\n 50  \n 51          if (sc != null) {\n 52  \n 53              if (sc.getCartItemTotal() \u003e= 25 \u0026\u0026 sc.getCartItemTotal() \u003c 100) {\n 54  \n 55                  return getPercentOfTotal(sc.getCartItemTotal(), 0.02);\n 56  \n 57              } else if (sc.getCartItemTotal() \u003e= 100 \u0026\u0026 sc.getCartItemTotal() \u003c 500) {\n 58  \n 59                  return getPercentOfTotal(sc.getCartItemTotal(), 0.015);\n 60  \n 61              } else if (sc.getCartItemTotal() \u003e= 500 \u0026\u0026 sc.getCartItemTotal() \u003c 10000) {\n 62  \n 63                  return getPercentOfTotal(sc.getCartItemTotal(), 0.01);\n 64  \n 65              }\n 66  \n 67          }\n 68  \n 69          return 0;\n 70      }\n 71  \n 72      private static double getPercentOfTotal(double value, double percentOfTotal) {\n 73          return BigDecimal.valueOf(value * percentOfTotal)\n 74                  .setScale(2, RoundingMode.HALF_UP)\n 75                  .doubleValue();\n 76      }\n 77  \n 78  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShippingService.java","kind":"Module","name":"javax.ejb.Remote","package":"com.redhat.coolstore.service","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShippingService.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.math.BigDecimal;\n  4  import java.math.RoundingMode;\n  5  \n  6  import javax.ejb.Remote;\n  7  import javax.ejb.Stateless;\n  8  \n  9  import com.redhat.coolstore.model.ShoppingCart;\n 10  \n 11  @Stateless\n 12  @Remote\n 13  public class ShippingService implements ShippingServiceRemote {\n 14  \n 15      @Override\n 16      public double calculateShipping(ShoppingCart sc) {\n 17  \n 18          if (sc != null) {\n 19  \n 20              if (sc.getCartItemTotal() \u003e= 0 \u0026\u0026 sc.getCartItemTotal() \u003c 25) {\n 21  \n 22                  return 2.99;\n 23  \n 24              } else if (sc.getCartItemTotal() \u003e= 25 \u0026\u0026 sc.getCartItemTotal() \u003c 50) {\n 25  \n 26                  return 4.99;\n 27  \n 28              } else if (sc.getCartItemTotal() \u003e= 50 \u0026\u0026 sc.getCartItemTotal() \u003c 75) {\n 29  \n 30                  return 6.99;\n 31  \n 32              } else if (sc.getCartItemTotal() \u003e= 75 \u0026\u0026 sc.getCartItemTotal() \u003c 100) {\n 33  \n 34                  return 8.99;\n 35  \n 36              } else if (sc.getCartItemTotal() \u003e= 100 \u0026\u0026 sc.getCartItemTotal() \u003c 10000) {\n 37  \n 38                  return 10.99;\n 39  \n 40              }\n 41  \n 42          }\n 43  \n 44          return 0;\n 45  \n 46      }\n 47  \n 48      @Override\n 49      public double calculateShippingInsurance(ShoppingCart sc) {\n 50  \n 51          if (sc != null) {\n 52  \n 53              if (sc.getCartItemTotal() \u003e= 25 \u0026\u0026 sc.getCartItemTotal() \u003c 100) {\n 54  \n 55                  return getPercentOfTotal(sc.getCartItemTotal(), 0.02);\n 56  \n 57              } else if (sc.getCartItemTotal() \u003e= 100 \u0026\u0026 sc.getCartItemTotal() \u003c 500) {\n 58  \n 59                  return getPercentOfTotal(sc.getCartItemTotal(), 0.015);\n 60  \n 61              } else if (sc.getCartItemTotal() \u003e= 500 \u0026\u0026 sc.getCartItemTotal() \u003c 10000) {\n 62  \n 63                  return getPercentOfTotal(sc.getCartItemTotal(), 0.01);\n 64  \n 65              }\n 66  \n 67          }\n 68  \n 69          return 0;\n 70      }\n 71  \n 72      private static double getPercentOfTotal(double value, double percentOfTotal) {\n 73          return BigDecimal.valueOf(value * percentOfTotal)\n 74                  .setScale(2, RoundingMode.HALF_UP)\n 75                  .doubleValue();\n 76      }\n 77  \n 78  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShippingService.java","kind":"Module","name":"javax.ejb.Stateless","package":"com.redhat.coolstore.service","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","message":"Replace the `javax.annotation` import statement with `jakarta.annotation` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.logging.Logger;\n  4  import javax.ejb.Stateless;\n  5  import javax.annotation.Resource;\n  6  import javax.inject.Inject;\n  7  import javax.jms.JMSContext;\n  8  import javax.jms.Topic;\n  9  \n 10  import com.redhat.coolstore.model.ShoppingCart;\n 11  import com.redhat.coolstore.utils.Transformers;\n 12  \n 13  @Stateless\n 14  public class ShoppingCartOrderProcessor  {\n 15  \n 16      @Inject\n 17      Logger log;\n 18  \n 19  \n 20      @Inject\n 21      private transient JMSContext context;\n 22  \n 23      @Resource(lookup = \"java:/topic/orders\")\n 24      private Topic ordersTopic;\n 25  \n 26      \n 27    \n 28      public void  process(ShoppingCart cart) {\n 29          log.info(\"Sending order from processor: \");\n 30          context.createProducer().send(ordersTopic, Transformers.shoppingCartToJson(cart));\n 31      }\n 32  \n 33  \n 34  \n 35  }\n","lineNumber":5,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","kind":"Module","name":"javax.annotation.Resource","package":"com.redhat.coolstore.service","renamed":"annotation"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.logging.Logger;\n  4  import javax.ejb.Stateless;\n  5  import javax.annotation.Resource;\n  6  import javax.inject.Inject;\n  7  import javax.jms.JMSContext;\n  8  import javax.jms.Topic;\n  9  \n 10  import com.redhat.coolstore.model.ShoppingCart;\n 11  import com.redhat.coolstore.utils.Transformers;\n 12  \n 13  @Stateless\n 14  public class ShoppingCartOrderProcessor  {\n 15  \n 16      @Inject\n 17      Logger log;\n 18  \n 19  \n 20      @Inject\n 21      private transient JMSContext context;\n 22  \n 23      @Resource(lookup = \"java:/topic/orders\")\n 24      private Topic ordersTopic;\n 25  \n 26      \n 27    \n 28      public void  process(ShoppingCart cart) {\n 29          log.info(\"Sending order from processor: \");\n 30          context.createProducer().send(ordersTopic, Transformers.shoppingCartToJson(cart));\n 31      }\n 32  \n 33  \n 34  \n 35  }\n","lineNumber":4,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","kind":"Module","name":"javax.ejb.Stateless","package":"com.redhat.coolstore.service","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","message":"Replace the `javax.inject` import statement with `jakarta.inject` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.logging.Logger;\n  4  import javax.ejb.Stateless;\n  5  import javax.annotation.Resource;\n  6  import javax.inject.Inject;\n  7  import javax.jms.JMSContext;\n  8  import javax.jms.Topic;\n  9  \n 10  import com.redhat.coolstore.model.ShoppingCart;\n 11  import com.redhat.coolstore.utils.Transformers;\n 12  \n 13  @Stateless\n 14  public class ShoppingCartOrderProcessor  {\n 15  \n 16      @Inject\n 17      Logger log;\n 18  \n 19  \n 20      @Inject\n 21      private transient JMSContext context;\n 22  \n 23      @Resource(lookup = \"java:/topic/orders\")\n 24      private Topic ordersTopic;\n 25  \n 26      \n 27    \n 28      public void  process(ShoppingCart cart) {\n 29          log.info(\"Sending order from processor: \");\n 30          context.createProducer().send(ordersTopic, Transformers.shoppingCartToJson(cart));\n 31      }\n 32  \n 33  \n 34  \n 35  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","kind":"Module","name":"javax.inject.Inject","package":"com.redhat.coolstore.service","renamed":"inject"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","message":"Replace the `javax.jms` import statement with `jakarta.jms` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.logging.Logger;\n  4  import javax.ejb.Stateless;\n  5  import javax.annotation.Resource;\n  6  import javax.inject.Inject;\n  7  import javax.jms.JMSContext;\n  8  import javax.jms.Topic;\n  9  \n 10  import com.redhat.coolstore.model.ShoppingCart;\n 11  import com.redhat.coolstore.utils.Transformers;\n 12  \n 13  @Stateless\n 14  public class ShoppingCartOrderProcessor  {\n 15  \n 16      @Inject\n 17      Logger log;\n 18  \n 19  \n 20      @Inject\n 21      private transient JMSContext context;\n 22  \n 23      @Resource(lookup = \"java:/topic/orders\")\n 24      private Topic ordersTopic;\n 25  \n 26      \n 27    \n 28      public void  process(ShoppingCart cart) {\n 29          log.info(\"Sending order from processor: \");\n 30          context.createProducer().send(ordersTopic, Transformers.shoppingCartToJson(cart));\n 31      }\n 32  \n 33  \n 34  \n 35  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","kind":"Module","name":"javax.jms.JMSContext","package":"com.redhat.coolstore.service","renamed":"jms"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","message":"Replace the `javax.jms` import statement with `jakarta.jms` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.logging.Logger;\n  4  import javax.ejb.Stateless;\n  5  import javax.annotation.Resource;\n  6  import javax.inject.Inject;\n  7  import javax.jms.JMSContext;\n  8  import javax.jms.Topic;\n  9  \n 10  import com.redhat.coolstore.model.ShoppingCart;\n 11  import com.redhat.coolstore.utils.Transformers;\n 12  \n 13  @Stateless\n 14  public class ShoppingCartOrderProcessor  {\n 15  \n 16      @Inject\n 17      Logger log;\n 18  \n 19  \n 20      @Inject\n 21      private transient JMSContext context;\n 22  \n 23      @Resource(lookup = \"java:/topic/orders\")\n 24      private Topic ordersTopic;\n 25  \n 26      \n 27    \n 28      public void  process(ShoppingCart cart) {\n 29          log.info(\"Sending order from processor: \");\n 30          context.createProducer().send(ordersTopic, Transformers.shoppingCartToJson(cart));\n 31      }\n 32  \n 33  \n 34  \n 35  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","kind":"Module","name":"javax.jms.Topic","package":"com.redhat.coolstore.service","renamed":"jms"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.Hashtable;\n  4  import java.util.logging.Logger;\n  5  \n  6  import javax.ejb.Stateful;\n  7  import javax.inject.Inject;\n  8  import javax.naming.Context;\n  9  import javax.naming.InitialContext;\n 10  import javax.naming.NamingException;\n 11  \n 12  import com.redhat.coolstore.model.Product;\n 13  import com.redhat.coolstore.model.ShoppingCart;\n 14  import com.redhat.coolstore.model.ShoppingCartItem;\n 15  \n 16  @Stateful\n 17  public class ShoppingCartService  {\n 18  \n 19      @Inject\n 20      Logger log;\n 21  \n 22      @Inject\n 23      ProductService productServices;\n 24  \n 25      @Inject\n 26      PromoService ps;\n 27  \n 28  \n 29      @Inject\n 30      ShoppingCartOrderProcessor shoppingCartOrderProcessor;\n 31  \n 32      private ShoppingCart cart  = new ShoppingCart(); //Each user can have multiple shopping carts (tabbed browsing)\n 33  \n 34     \n 35  \n 36      public ShoppingCartService() {\n 37      }\n 38  \n 39      public ShoppingCart getShoppingCart(String cartId) {\n 40          return cart;\n 41      }\n 42  \n 43      public ShoppingCart checkOutShoppingCart(String cartId) {\n 44          ShoppingCart cart = this.getShoppingCart(cartId);\n 45        \n 46          log.info(\"Sending  order: \");\n 47          shoppingCartOrderProcessor.process(cart);\n 48     \n 49          cart.resetShoppingCartItemList();\n 50          priceShoppingCart(cart);\n 51          return cart;\n 52      }\n 53  \n 54      public void priceShoppingCart(ShoppingCart sc) {\n 55  \n 56          if (sc != null) {\n 57  \n 58              initShoppingCartForPricing(sc);\n 59  \n 60              if (sc.getShoppingCartItemList() != null \u0026\u0026 sc.getShoppingCartItemList().size() \u003e 0) {\n 61  \n 62                  ps.applyCartItemPromotions(sc);\n 63  \n 64                  for (ShoppingCartItem sci : sc.getShoppingCartItemList()) {\n 65  \n 66                      sc.setCartItemPromoSavings(\n 67                              sc.getCartItemPromoSavings() + sci.getPromoSavings() * sci.getQuantity());\n 68                      sc.setCartItemTotal(sc.getCartItemTotal() + sci.getPrice() * sci.getQuantity());\n 69  \n 70                  }\n 71  \n 72                  sc.setShippingTotal(lookupShippingServiceRemote().calculateShipping(sc));\n 73  \n 74                  if (sc.getCartItemTotal() \u003e= 25) {\n 75                      sc.setShippingTotal(sc.getShippingTotal()\n 76                              + lookupShippingServiceRemote().calculateShippingInsurance(sc));\n 77                  }\n 78  \n 79              }\n 80  \n 81              ps.applyShippingPromotions(sc);\n 82  \n 83              sc.setCartTotal(sc.getCartItemTotal() + sc.getShippingTotal());\n 84  \n 85          }\n 86  \n 87      }\n 88  \n 89      private void initShoppingCartForPricing(ShoppingCart sc) {\n 90  \n 91          sc.setCartItemTotal(0);\n 92          sc.setCartItemPromoSavings(0);\n 93          sc.setShippingTotal(0);\n 94          sc.setShippingPromoSavings(0);\n 95          sc.setCartTotal(0);\n 96  \n 97          for (ShoppingCartItem sci : sc.getShoppingCartItemList()) {\n 98              Product p = getProduct(sci.getProduct().getItemId());\n 99              //if product exist\n100              if (p != null) {\n101                  sci.setProduct(p);\n102                  sci.setPrice(p.getPrice());\n103              }\n104  \n105              sci.setPromoSavings(0);\n106          }","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java","kind":"Module","name":"javax.ejb.Stateful","package":"com.redhat.coolstore.service","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java","message":"Replace the `javax.inject` import statement with `jakarta.inject` ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.Hashtable;\n  4  import java.util.logging.Logger;\n  5  \n  6  import javax.ejb.Stateful;\n  7  import javax.inject.Inject;\n  8  import javax.naming.Context;\n  9  import javax.naming.InitialContext;\n 10  import javax.naming.NamingException;\n 11  \n 12  import com.redhat.coolstore.model.Product;\n 13  import com.redhat.coolstore.model.ShoppingCart;\n 14  import com.redhat.coolstore.model.ShoppingCartItem;\n 15  \n 16  @Stateful\n 17  public class ShoppingCartService  {\n 18  \n 19      @Inject\n 20      Logger log;\n 21  \n 22      @Inject\n 23      ProductService productServices;\n 24  \n 25      @Inject\n 26      PromoService ps;\n 27  \n 28  \n 29      @Inject\n 30      ShoppingCartOrderProcessor shoppingCartOrderProcessor;\n 31  \n 32      private ShoppingCart cart  = new ShoppingCart(); //Each user can have multiple shopping carts (tabbed browsing)\n 33  \n 34     \n 35  \n 36      public ShoppingCartService() {\n 37      }\n 38  \n 39      public ShoppingCart getShoppingCart(String cartId) {\n 40          return cart;\n 41      }\n 42  \n 43      public ShoppingCart checkOutShoppingCart(String cartId) {\n 44          ShoppingCart cart = this.getShoppingCart(cartId);\n 45        \n 46          log.info(\"Sending  order: \");\n 47          shoppingCartOrderProcessor.process(cart);\n 48     \n 49          cart.resetShoppingCartItemList();\n 50          priceShoppingCart(cart);\n 51          return cart;\n 52      }\n 53  \n 54      public void priceShoppingCart(ShoppingCart sc) {\n 55  \n 56          if (sc != null) {\n 57  \n 58              initShoppingCartForPricing(sc);\n 59  \n 60              if (sc.getShoppingCartItemList() != null \u0026\u0026 sc.getShoppingCartItemList().size() \u003e 0) {\n 61  \n 62                  ps.applyCartItemPromotions(sc);\n 63  \n 64                  for (ShoppingCartItem sci : sc.getShoppingCartItemList()) {\n 65  \n 66                      sc.setCartItemPromoSavings(\n 67                              sc.getCartItemPromoSavings() + sci.getPromoSavings() * sci.getQuantity());\n 68                      sc.setCartItemTotal(sc.getCartItemTotal() + sci.getPrice() * sci.getQuantity());\n 69  \n 70                  }\n 71  \n 72                  sc.setShippingTotal(lookupShippingServiceRemote().calculateShipping(sc));\n 73  \n 74                  if (sc.getCartItemTotal() \u003e= 25) {\n 75                      sc.setShippingTotal(sc.getShippingTotal()\n 76                              + lookupShippingServiceRemote().calculateShippingInsurance(sc));\n 77                  }\n 78  \n 79              }\n 80  \n 81              ps.applyShippingPromotions(sc);\n 82  \n 83              sc.setCartTotal(sc.getCartItemTotal() + sc.getShippingTotal());\n 84  \n 85          }\n 86  \n 87      }\n 88  \n 89      private void initShoppingCartForPricing(ShoppingCart sc) {\n 90  \n 91          sc.setCartItemTotal(0);\n 92          sc.setCartItemPromoSavings(0);\n 93          sc.setShippingTotal(0);\n 94          sc.setShippingPromoSavings(0);\n 95          sc.setCartTotal(0);\n 96  \n 97          for (ShoppingCartItem sci : sc.getShoppingCartItemList()) {\n 98              Product p = getProduct(sci.getProduct().getItemId());\n 99              //if product exist\n100              if (p != null) {\n101                  sci.setProduct(p);\n102                  sci.setPrice(p.getPrice());\n103              }\n104  \n105              sci.setPromoSavings(0);\n106          }\n107  ","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java","kind":"Module","name":"javax.inject.Inject","package":"com.redhat.coolstore.service","renamed":"inject"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","message":"Replace the `javax.annotation` import statement with `jakarta.annotation` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import org.flywaydb.core.Flyway;\n  4  import org.flywaydb.core.api.FlywayException;\n  5  \n  6  import javax.annotation.PostConstruct;\n  7  import javax.annotation.Resource;\n  8  import javax.ejb.Singleton;\n  9  import javax.ejb.Startup;\n 10  import javax.ejb.TransactionManagement;\n 11  import javax.ejb.TransactionManagementType;\n 12  import javax.inject.Inject;\n 13  import javax.sql.DataSource;\n 14  import java.util.logging.Level;\n 15  import java.util.logging.Logger;\n 16  \n 17  /**\n 18   * Created by tqvarnst on 2017-04-04.\n 19   */\n 20  @Singleton\n 21  @Startup\n 22  @TransactionManagement(TransactionManagementType.BEAN)\n 23  public class DataBaseMigrationStartup {\n 24  \n 25      @Inject\n 26      Logger logger;\n 27  \n 28      @Resource(mappedName = \"java:jboss/datasources/CoolstoreDS\")\n 29      DataSource dataSource;\n 30  \n 31      @PostConstruct\n 32      private void startup() {\n 33  \n 34  \n 35          try {\n 36              logger.info(\"Initializing/migrating the database using FlyWay\");\n 37              Flyway flyway = new Flyway();\n 38              flyway.setDataSource(dataSource);\n 39              flyway.baseline();\n 40              // Start the db.migration\n 41              flyway.migrate();\n 42          } catch (FlywayException e) {\n 43              if(logger !=null)\n 44                  logger.log(Level.SEVERE,\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage(),e);\n 45              else\n 46                  System.out.println(\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage() + \" and injection of logger doesn't work\");\n 47  \n 48          }\n 49      }\n 50  \n 51  \n 52  \n 53  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","kind":"Module","name":"javax.annotation.PostConstruct","package":"com.redhat.coolstore.utils","renamed":"annotation"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","message":"Replace the `javax.annotation` import statement with `jakarta.annotation` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import org.flywaydb.core.Flyway;\n  4  import org.flywaydb.core.api.FlywayException;\n  5  \n  6  import javax.annotation.PostConstruct;\n  7  import javax.annotation.Resource;\n  8  import javax.ejb.Singleton;\n  9  import javax.ejb.Startup;\n 10  import javax.ejb.TransactionManagement;\n 11  import javax.ejb.TransactionManagementType;\n 12  import javax.inject.Inject;\n 13  import javax.sql.DataSource;\n 14  import java.util.logging.Level;\n 15  import java.util.logging.Logger;\n 16  \n 17  /**\n 18   * Created by tqvarnst on 2017-04-04.\n 19   */\n 20  @Singleton\n 21  @Startup\n 22  @TransactionManagement(TransactionManagementType.BEAN)\n 23  public class DataBaseMigrationStartup {\n 24  \n 25      @Inject\n 26      Logger logger;\n 27  \n 28      @Resource(mappedName = \"java:jboss/datasources/CoolstoreDS\")\n 29      DataSource dataSource;\n 30  \n 31      @PostConstruct\n 32      private void startup() {\n 33  \n 34  \n 35          try {\n 36              logger.info(\"Initializing/migrating the database using FlyWay\");\n 37              Flyway flyway = new Flyway();\n 38              flyway.setDataSource(dataSource);\n 39              flyway.baseline();\n 40              // Start the db.migration\n 41              flyway.migrate();\n 42          } catch (FlywayException e) {\n 43              if(logger !=null)\n 44                  logger.log(Level.SEVERE,\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage(),e);\n 45              else\n 46                  System.out.println(\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage() + \" and injection of logger doesn't work\");\n 47  \n 48          }\n 49      }\n 50  \n 51  \n 52  \n 53  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","kind":"Module","name":"javax.annotation.Resource","package":"com.redhat.coolstore.utils","renamed":"annotation"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import org.flywaydb.core.Flyway;\n  4  import org.flywaydb.core.api.FlywayException;\n  5  \n  6  import javax.annotation.PostConstruct;\n  7  import javax.annotation.Resource;\n  8  import javax.ejb.Singleton;\n  9  import javax.ejb.Startup;\n 10  import javax.ejb.TransactionManagement;\n 11  import javax.ejb.TransactionManagementType;\n 12  import javax.inject.Inject;\n 13  import javax.sql.DataSource;\n 14  import java.util.logging.Level;\n 15  import java.util.logging.Logger;\n 16  \n 17  /**\n 18   * Created by tqvarnst on 2017-04-04.\n 19   */\n 20  @Singleton\n 21  @Startup\n 22  @TransactionManagement(TransactionManagementType.BEAN)\n 23  public class DataBaseMigrationStartup {\n 24  \n 25      @Inject\n 26      Logger logger;\n 27  \n 28      @Resource(mappedName = \"java:jboss/datasources/CoolstoreDS\")\n 29      DataSource dataSource;\n 30  \n 31      @PostConstruct\n 32      private void startup() {\n 33  \n 34  \n 35          try {\n 36              logger.info(\"Initializing/migrating the database using FlyWay\");\n 37              Flyway flyway = new Flyway();\n 38              flyway.setDataSource(dataSource);\n 39              flyway.baseline();\n 40              // Start the db.migration\n 41              flyway.migrate();\n 42          } catch (FlywayException e) {\n 43              if(logger !=null)\n 44                  logger.log(Level.SEVERE,\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage(),e);\n 45              else\n 46                  System.out.println(\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage() + \" and injection of logger doesn't work\");\n 47  \n 48          }\n 49      }\n 50  \n 51  \n 52  \n 53  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","kind":"Module","name":"javax.ejb.Singleton","package":"com.redhat.coolstore.utils","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import org.flywaydb.core.Flyway;\n  4  import org.flywaydb.core.api.FlywayException;\n  5  \n  6  import javax.annotation.PostConstruct;\n  7  import javax.annotation.Resource;\n  8  import javax.ejb.Singleton;\n  9  import javax.ejb.Startup;\n 10  import javax.ejb.TransactionManagement;\n 11  import javax.ejb.TransactionManagementType;\n 12  import javax.inject.Inject;\n 13  import javax.sql.DataSource;\n 14  import java.util.logging.Level;\n 15  import java.util.logging.Logger;\n 16  \n 17  /**\n 18   * Created by tqvarnst on 2017-04-04.\n 19   */\n 20  @Singleton\n 21  @Startup\n 22  @TransactionManagement(TransactionManagementType.BEAN)\n 23  public class DataBaseMigrationStartup {\n 24  \n 25      @Inject\n 26      Logger logger;\n 27  \n 28      @Resource(mappedName = \"java:jboss/datasources/CoolstoreDS\")\n 29      DataSource dataSource;\n 30  \n 31      @PostConstruct\n 32      private void startup() {\n 33  \n 34  \n 35          try {\n 36              logger.info(\"Initializing/migrating the database using FlyWay\");\n 37              Flyway flyway = new Flyway();\n 38              flyway.setDataSource(dataSource);\n 39              flyway.baseline();\n 40              // Start the db.migration\n 41              flyway.migrate();\n 42          } catch (FlywayException e) {\n 43              if(logger !=null)\n 44                  logger.log(Level.SEVERE,\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage(),e);\n 45              else\n 46                  System.out.println(\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage() + \" and injection of logger doesn't work\");\n 47  \n 48          }\n 49      }\n 50  \n 51  \n 52  \n 53  }\n","lineNumber":9,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","kind":"Module","name":"javax.ejb.Startup","package":"com.redhat.coolstore.utils","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import org.flywaydb.core.Flyway;\n  4  import org.flywaydb.core.api.FlywayException;\n  5  \n  6  import javax.annotation.PostConstruct;\n  7  import javax.annotation.Resource;\n  8  import javax.ejb.Singleton;\n  9  import javax.ejb.Startup;\n 10  import javax.ejb.TransactionManagement;\n 11  import javax.ejb.TransactionManagementType;\n 12  import javax.inject.Inject;\n 13  import javax.sql.DataSource;\n 14  import java.util.logging.Level;\n 15  import java.util.logging.Logger;\n 16  \n 17  /**\n 18   * Created by tqvarnst on 2017-04-04.\n 19   */\n 20  @Singleton\n 21  @Startup\n 22  @TransactionManagement(TransactionManagementType.BEAN)\n 23  public class DataBaseMigrationStartup {\n 24  \n 25      @Inject\n 26      Logger logger;\n 27  \n 28      @Resource(mappedName = \"java:jboss/datasources/CoolstoreDS\")\n 29      DataSource dataSource;\n 30  \n 31      @PostConstruct\n 32      private void startup() {\n 33  \n 34  \n 35          try {\n 36              logger.info(\"Initializing/migrating the database using FlyWay\");\n 37              Flyway flyway = new Flyway();\n 38              flyway.setDataSource(dataSource);\n 39              flyway.baseline();\n 40              // Start the db.migration\n 41              flyway.migrate();\n 42          } catch (FlywayException e) {\n 43              if(logger !=null)\n 44                  logger.log(Level.SEVERE,\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage(),e);\n 45              else\n 46                  System.out.println(\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage() + \" and injection of logger doesn't work\");\n 47  \n 48          }\n 49      }\n 50  \n 51  \n 52  \n 53  }\n","lineNumber":10,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","kind":"Module","name":"javax.ejb.TransactionManagement","package":"com.redhat.coolstore.utils","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import org.flywaydb.core.Flyway;\n  4  import org.flywaydb.core.api.FlywayException;\n  5  \n  6  import javax.annotation.PostConstruct;\n  7  import javax.annotation.Resource;\n  8  import javax.ejb.Singleton;\n  9  import javax.ejb.Startup;\n 10  import javax.ejb.TransactionManagement;\n 11  import javax.ejb.TransactionManagementType;\n 12  import javax.inject.Inject;\n 13  import javax.sql.DataSource;\n 14  import java.util.logging.Level;\n 15  import java.util.logging.Logger;\n 16  \n 17  /**\n 18   * Created by tqvarnst on 2017-04-04.\n 19   */\n 20  @Singleton\n 21  @Startup\n 22  @TransactionManagement(TransactionManagementType.BEAN)\n 23  public class DataBaseMigrationStartup {\n 24  \n 25      @Inject\n 26      Logger logger;\n 27  \n 28      @Resource(mappedName = \"java:jboss/datasources/CoolstoreDS\")\n 29      DataSource dataSource;\n 30  \n 31      @PostConstruct\n 32      private void startup() {\n 33  \n 34  \n 35          try {\n 36              logger.info(\"Initializing/migrating the database using FlyWay\");\n 37              Flyway flyway = new Flyway();\n 38              flyway.setDataSource(dataSource);\n 39              flyway.baseline();\n 40              // Start the db.migration\n 41              flyway.migrate();\n 42          } catch (FlywayException e) {\n 43              if(logger !=null)\n 44                  logger.log(Level.SEVERE,\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage(),e);\n 45              else\n 46                  System.out.println(\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage() + \" and injection of logger doesn't work\");\n 47  \n 48          }\n 49      }\n 50  \n 51  \n 52  \n 53  }\n","lineNumber":11,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","kind":"Module","name":"javax.ejb.TransactionManagementType","package":"com.redhat.coolstore.utils","renamed":"ejb"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","message":"Replace the `javax.inject` import statement with `jakarta.inject` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import org.flywaydb.core.Flyway;\n  4  import org.flywaydb.core.api.FlywayException;\n  5  \n  6  import javax.annotation.PostConstruct;\n  7  import javax.annotation.Resource;\n  8  import javax.ejb.Singleton;\n  9  import javax.ejb.Startup;\n 10  import javax.ejb.TransactionManagement;\n 11  import javax.ejb.TransactionManagementType;\n 12  import javax.inject.Inject;\n 13  import javax.sql.DataSource;\n 14  import java.util.logging.Level;\n 15  import java.util.logging.Logger;\n 16  \n 17  /**\n 18   * Created by tqvarnst on 2017-04-04.\n 19   */\n 20  @Singleton\n 21  @Startup\n 22  @TransactionManagement(TransactionManagementType.BEAN)\n 23  public class DataBaseMigrationStartup {\n 24  \n 25      @Inject\n 26      Logger logger;\n 27  \n 28      @Resource(mappedName = \"java:jboss/datasources/CoolstoreDS\")\n 29      DataSource dataSource;\n 30  \n 31      @PostConstruct\n 32      private void startup() {\n 33  \n 34  \n 35          try {\n 36              logger.info(\"Initializing/migrating the database using FlyWay\");\n 37              Flyway flyway = new Flyway();\n 38              flyway.setDataSource(dataSource);\n 39              flyway.baseline();\n 40              // Start the db.migration\n 41              flyway.migrate();\n 42          } catch (FlywayException e) {\n 43              if(logger !=null)\n 44                  logger.log(Level.SEVERE,\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage(),e);\n 45              else\n 46                  System.out.println(\"FAILED TO INITIALIZE THE DATABASE: \" + e.getMessage() + \" and injection of logger doesn't work\");\n 47  \n 48          }\n 49      }\n 50  \n 51  \n 52  \n 53  }\n","lineNumber":12,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java","kind":"Module","name":"javax.inject.Inject","package":"com.redhat.coolstore.utils","renamed":"inject"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Producers.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import javax.enterprise.inject.Produces;\n  4  import javax.enterprise.inject.spi.InjectionPoint;\n  5  import java.util.logging.Logger;\n  6  \n  7  \n  8  public class Producers {\n  9  \n 10      Logger log = Logger.getLogger(Producers.class.getName());\n 11  \n 12      @Produces\n 13      public Logger produceLog(InjectionPoint injectionPoint) {\n 14          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 15      }\n 16  \n 17  }\n","lineNumber":3,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Producers.java","kind":"Module","name":"javax.enterprise.inject.Produces","package":"com.redhat.coolstore.utils","renamed":"enterprise"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Producers.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import javax.enterprise.inject.Produces;\n  4  import javax.enterprise.inject.spi.InjectionPoint;\n  5  import java.util.logging.Logger;\n  6  \n  7  \n  8  public class Producers {\n  9  \n 10      Logger log = Logger.getLogger(Producers.class.getName());\n 11  \n 12      @Produces\n 13      public Logger produceLog(InjectionPoint injectionPoint) {\n 14          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 15      }\n 16  \n 17  }\n","lineNumber":4,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Producers.java","kind":"Module","name":"javax.enterprise.inject.spi.InjectionPoint","package":"com.redhat.coolstore.utils","renamed":"enterprise"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/StartupListener.java","message":"Replace the `javax.inject` import statement with `jakarta.inject` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import weblogic.application.ApplicationLifecycleEvent;\n  4  import weblogic.application.ApplicationLifecycleListener;\n  5  \n  6  import javax.inject.Inject;\n  7  import java.util.logging.Logger;\n  8  \n  9  public class StartupListener extends ApplicationLifecycleListener {\n 10  \n 11      @Inject\n 12      Logger log;\n 13  \n 14      @Override\n 15      public void postStart(ApplicationLifecycleEvent evt) {\n 16          log.info(\"AppListener(postStart)\");\n 17      }\n 18  \n 19      @Override\n 20      public void preStop(ApplicationLifecycleEvent evt) {\n 21          log.info(\"AppListener(preStop)\");\n 22      }\n 23  \n 24  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/StartupListener.java","kind":"Module","name":"javax.inject.Inject","package":"com.redhat.coolstore.utils","renamed":"inject"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Transformers.java","message":"Replace the `javax.json` import statement with `jakarta.json` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import com.redhat.coolstore.model.CatalogItemEntity;\n  4  import com.redhat.coolstore.model.Order;\n  5  import com.redhat.coolstore.model.OrderItem;\n  6  import com.redhat.coolstore.model.Product;\n  7  import com.redhat.coolstore.model.ShoppingCart;\n  8  import java.io.StringReader;\n  9  import java.io.StringWriter;\n 10  import java.util.ArrayList;\n 11  import java.util.List;\n 12  import javax.json.Json;\n 13  import javax.json.JsonArray;\n 14  import javax.json.JsonArrayBuilder;\n 15  import javax.json.JsonObject;\n 16  import javax.json.JsonReader;\n 17  import javax.json.JsonWriter;\n 18  \n 19  import java.util.concurrent.ThreadLocalRandom;\n 20  import java.util.logging.Logger;\n 21  \n 22  /**\n 23   * Created by tqvarnst on 2017-03-30.\n 24   */\n 25  public class Transformers {\n 26  \n 27      private static final String[] RANDOM_NAMES = {\"Sven Karlsson\",\"Johan Andersson\",\"Karl Svensson\",\"Anders Johansson\",\"Stefan Olson\",\"Martin Ericsson\"};\n 28      private static final String[] RANDOM_EMAILS = {\"sven@gmail.com\",\"johan@gmail.com\",\"karl@gmail.com\",\"anders@gmail.com\",\"stefan@gmail.com\",\"martin@gmail.com\"};\n 29  \n 30      private static Logger log = Logger.getLogger(Transformers.class.getName());\n 31  \n 32      public static Product toProduct(CatalogItemEntity entity) {\n 33          Product prod = new Product();\n 34          prod.setItemId(entity.getItemId());\n 35          prod.setName(entity.getName());\n 36          prod.setDesc(entity.getDesc());\n 37          prod.setPrice(entity.getPrice());\n 38          if (entity.getInventory() != null) {\n 39              prod.setLocation(entity.getInventory().getLocation());\n 40              prod.setLink(entity.getInventory().getLink());\n 41              prod.setQuantity(entity.getInventory().getQuantity());\n 42          } else {\n 43              log.warning(\"Inventory for \" + entity.getName() + \"[\" + entity.getItemId()+ \"] unknown and missing\");\n 44          }\n 45          return prod;\n 46      }\n 47  \n 48      public static String shoppingCartToJson(ShoppingCart cart) {\n 49          JsonArrayBuilder cartItems = Json.createArrayBuilder();\n 50          cart.getShoppingCartItemList().forEach(item -\u003e {\n 51              cartItems.add(Json.createObjectBuilder()\n 52                  .add(\"productSku\",item.getProduct().getItemId())\n 53                  .add(\"quantity\",item.getQuantity())\n 54              );\n 55          });\n 56  \n 57          int randomNameAndEmailIndex = ThreadLocalRandom.current().nextInt(RANDOM_NAMES.length);\n 58  \n 59          JsonObject jsonObject = Json.createObjectBuilder()\n 60              .add(\"orderValue\", Double.valueOf(cart.getCartTotal()))\n 61              .add(\"customerName\",RANDOM_NAMES[randomNameAndEmailIndex])\n 62              .add(\"customerEmail\",RANDOM_EMAILS[randomNameAndEmailIndex])\n 63              .add(\"retailPrice\", cart.getShoppingCartItemList().stream().mapToDouble(i -\u003e i.getQuantity()*i.getPrice()).sum())\n 64              .add(\"discount\", Double.valueOf(cart.getCartItemPromoSavings()))\n 65              .add(\"shippingFee\", Double.valueOf(cart.getShippingTotal()))\n 66              .add(\"shippingDiscount\", Double.valueOf(cart.getShippingPromoSavings()))\n 67              .add(\"items\",cartItems) \n 68              .build();\n 69          StringWriter w = new StringWriter();\n 70          try (JsonWriter writer = Json.createWriter(w)) {\n 71              writer.write(jsonObject);\n 72          }\n 73          return w.toString();\n 74      }\n 75  \n 76      public static Order jsonToOrder(String json) {\n 77          JsonReader jsonReader = Json.createReader(new StringReader(json));\n 78          JsonObject rootObject = jsonReader.readObject();\n 79          Order order = new Order();\n 80          order.setCustomerName(rootObject.getString(\"customerName\"));\n 81          order.setCustomerEmail(rootObject.getString(\"customerEmail\"));\n 82          order.setOrderValue(rootObject.getJsonNumber(\"orderValue\").doubleValue());\n 83          order.setRetailPrice(rootObject.getJsonNumber(\"retailPrice\").doubleValue());\n 84          order.setDiscount(rootObject.getJsonNumber(\"discount\").doubleValue());\n 85          order.setShippingFee(rootObject.getJsonNumber(\"shippingFee\").doubleValue());\n 86          order.setShippingDiscount(rootObject.getJsonNumber(\"shippingDiscount\").doubleValue());\n 87          JsonArray jsonItems = rootObject.getJsonArray(\"items\");\n 88          List\u003cOrderItem\u003e items = new ArrayList\u003cOrderItem\u003e(jsonItems.size());\n 89          for (JsonObject jsonItem : jsonItems.getValuesAs(JsonObject.class)) {\n 90              OrderItem oi = new OrderItem();\n 91              oi.setProductId(jsonItem.getString(\"productSku\"));\n 92              oi.setQuantity(jsonItem.getInt(\"quantity\"));\n 93              items.add(oi);\n 94          }\n 95          order.setItemList(items); \n 96          return order;\n 97      }\n 98  \n 99  \n100  }\n","lineNumber":12,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Transformers.java","kind":"Module","name":"javax.json.Json","package":"com.redhat.coolstore.utils","renamed":"json"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Transformers.java","message":"Replace the `javax.json` import statement with `jakarta.json` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import com.redhat.coolstore.model.CatalogItemEntity;\n  4  import com.redhat.coolstore.model.Order;\n  5  import com.redhat.coolstore.model.OrderItem;\n  6  import com.redhat.coolstore.model.Product;\n  7  import com.redhat.coolstore.model.ShoppingCart;\n  8  import java.io.StringReader;\n  9  import java.io.StringWriter;\n 10  import java.util.ArrayList;\n 11  import java.util.List;\n 12  import javax.json.Json;\n 13  import javax.json.JsonArray;\n 14  import javax.json.JsonArrayBuilder;\n 15  import javax.json.JsonObject;\n 16  import javax.json.JsonReader;\n 17  import javax.json.JsonWriter;\n 18  \n 19  import java.util.concurrent.ThreadLocalRandom;\n 20  import java.util.logging.Logger;\n 21  \n 22  /**\n 23   * Created by tqvarnst on 2017-03-30.\n 24   */\n 25  public class Transformers {\n 26  \n 27      private static final String[] RANDOM_NAMES = {\"Sven Karlsson\",\"Johan Andersson\",\"Karl Svensson\",\"Anders Johansson\",\"Stefan Olson\",\"Martin Ericsson\"};\n 28      private static final String[] RANDOM_EMAILS = {\"sven@gmail.com\",\"johan@gmail.com\",\"karl@gmail.com\",\"anders@gmail.com\",\"stefan@gmail.com\",\"martin@gmail.com\"};\n 29  \n 30      private static Logger log = Logger.getLogger(Transformers.class.getName());\n 31  \n 32      public static Product toProduct(CatalogItemEntity entity) {\n 33          Product prod = new Product();\n 34          prod.setItemId(entity.getItemId());\n 35          prod.setName(entity.getName());\n 36          prod.setDesc(entity.getDesc());\n 37          prod.setPrice(entity.getPrice());\n 38          if (entity.getInventory() != null) {\n 39              prod.setLocation(entity.getInventory().getLocation());\n 40              prod.setLink(entity.getInventory().getLink());\n 41              prod.setQuantity(entity.getInventory().getQuantity());\n 42          } else {\n 43              log.warning(\"Inventory for \" + entity.getName() + \"[\" + entity.getItemId()+ \"] unknown and missing\");\n 44          }\n 45          return prod;\n 46      }\n 47  \n 48      public static String shoppingCartToJson(ShoppingCart cart) {\n 49          JsonArrayBuilder cartItems = Json.createArrayBuilder();\n 50          cart.getShoppingCartItemList().forEach(item -\u003e {\n 51              cartItems.add(Json.createObjectBuilder()\n 52                  .add(\"productSku\",item.getProduct().getItemId())\n 53                  .add(\"quantity\",item.getQuantity())\n 54              );\n 55          });\n 56  \n 57          int randomNameAndEmailIndex = ThreadLocalRandom.current().nextInt(RANDOM_NAMES.length);\n 58  \n 59          JsonObject jsonObject = Json.createObjectBuilder()\n 60              .add(\"orderValue\", Double.valueOf(cart.getCartTotal()))\n 61              .add(\"customerName\",RANDOM_NAMES[randomNameAndEmailIndex])\n 62              .add(\"customerEmail\",RANDOM_EMAILS[randomNameAndEmailIndex])\n 63              .add(\"retailPrice\", cart.getShoppingCartItemList().stream().mapToDouble(i -\u003e i.getQuantity()*i.getPrice()).sum())\n 64              .add(\"discount\", Double.valueOf(cart.getCartItemPromoSavings()))\n 65              .add(\"shippingFee\", Double.valueOf(cart.getShippingTotal()))\n 66              .add(\"shippingDiscount\", Double.valueOf(cart.getShippingPromoSavings()))\n 67              .add(\"items\",cartItems) \n 68              .build();\n 69          StringWriter w = new StringWriter();\n 70          try (JsonWriter writer = Json.createWriter(w)) {\n 71              writer.write(jsonObject);\n 72          }\n 73          return w.toString();\n 74      }\n 75  \n 76      public static Order jsonToOrder(String json) {\n 77          JsonReader jsonReader = Json.createReader(new StringReader(json));\n 78          JsonObject rootObject = jsonReader.readObject();\n 79          Order order = new Order();\n 80          order.setCustomerName(rootObject.getString(\"customerName\"));\n 81          order.setCustomerEmail(rootObject.getString(\"customerEmail\"));\n 82          order.setOrderValue(rootObject.getJsonNumber(\"orderValue\").doubleValue());\n 83          order.setRetailPrice(rootObject.getJsonNumber(\"retailPrice\").doubleValue());\n 84          order.setDiscount(rootObject.getJsonNumber(\"discount\").doubleValue());\n 85          order.setShippingFee(rootObject.getJsonNumber(\"shippingFee\").doubleValue());\n 86          order.setShippingDiscount(rootObject.getJsonNumber(\"shippingDiscount\").doubleValue());\n 87          JsonArray jsonItems = rootObject.getJsonArray(\"items\");\n 88          List\u003cOrderItem\u003e items = new ArrayList\u003cOrderItem\u003e(jsonItems.size());\n 89          for (JsonObject jsonItem : jsonItems.getValuesAs(JsonObject.class)) {\n 90              OrderItem oi = new OrderItem();\n 91              oi.setProductId(jsonItem.getString(\"productSku\"));\n 92              oi.setQuantity(jsonItem.getInt(\"quantity\"));\n 93              items.add(oi);\n 94          }\n 95          order.setItemList(items); \n 96          return order;\n 97      }\n 98  \n 99  \n100  }\n","lineNumber":13,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Transformers.java","kind":"Module","name":"javax.json.JsonArray","package":"com.redhat.coolstore.utils","renamed":"json"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Transformers.java","message":"Replace the `javax.json` import statement with `jakarta.json` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import com.redhat.coolstore.model.CatalogItemEntity;\n  4  import com.redhat.coolstore.model.Order;\n  5  import com.redhat.coolstore.model.OrderItem;\n  6  import com.redhat.coolstore.model.Product;\n  7  import com.redhat.coolstore.model.ShoppingCart;\n  8  import java.io.StringReader;\n  9  import java.io.StringWriter;\n 10  import java.util.ArrayList;\n 11  import java.util.List;\n 12  import javax.json.Json;\n 13  import javax.json.JsonArray;\n 14  import javax.json.JsonArrayBuilder;\n 15  import javax.json.JsonObject;\n 16  import javax.json.JsonReader;\n 17  import javax.json.JsonWriter;\n 18  \n 19  import java.util.concurrent.ThreadLocalRandom;\n 20  import java.util.logging.Logger;\n 21  \n 22  /**\n 23   * Created by tqvarnst on 2017-03-30.\n 24   */\n 25  public class Transformers {\n 26  \n 27      private static final String[] RANDOM_NAMES = {\"Sven Karlsson\",\"Johan Andersson\",\"Karl Svensson\",\"Anders Johansson\",\"Stefan Olson\",\"Martin Ericsson\"};\n 28      private static final String[] RANDOM_EMAILS = {\"sven@gmail.com\",\"johan@gmail.com\",\"karl@gmail.com\",\"anders@gmail.com\",\"stefan@gmail.com\",\"martin@gmail.com\"};\n 29  \n 30      private static Logger log = Logger.getLogger(Transformers.class.getName());\n 31  \n 32      public static Product toProduct(CatalogItemEntity entity) {\n 33          Product prod = new Product();\n 34          prod.setItemId(entity.getItemId());\n 35          prod.setName(entity.getName());\n 36          prod.setDesc(entity.getDesc());\n 37          prod.setPrice(entity.getPrice());\n 38          if (entity.getInventory() != null) {\n 39              prod.setLocation(entity.getInventory().getLocation());\n 40              prod.setLink(entity.getInventory().getLink());\n 41              prod.setQuantity(entity.getInventory().getQuantity());\n 42          } else {\n 43              log.warning(\"Inventory for \" + entity.getName() + \"[\" + entity.getItemId()+ \"] unknown and missing\");\n 44          }\n 45          return prod;\n 46      }\n 47  \n 48      public static String shoppingCartToJson(ShoppingCart cart) {\n 49          JsonArrayBuilder cartItems = Json.createArrayBuilder();\n 50          cart.getShoppingCartItemList().forEach(item -\u003e {\n 51              cartItems.add(Json.createObjectBuilder()\n 52                  .add(\"productSku\",item.getProduct().getItemId())\n 53                  .add(\"quantity\",item.getQuantity())\n 54              );\n 55          });\n 56  \n 57          int randomNameAndEmailIndex = ThreadLocalRandom.current().nextInt(RANDOM_NAMES.length);\n 58  \n 59          JsonObject jsonObject = Json.createObjectBuilder()\n 60              .add(\"orderValue\", Double.valueOf(cart.getCartTotal()))\n 61              .add(\"customerName\",RANDOM_NAMES[randomNameAndEmailIndex])\n 62              .add(\"customerEmail\",RANDOM_EMAILS[randomNameAndEmailIndex])\n 63              .add(\"retailPrice\", cart.getShoppingCartItemList().stream().mapToDouble(i -\u003e i.getQuantity()*i.getPrice()).sum())\n 64              .add(\"discount\", Double.valueOf(cart.getCartItemPromoSavings()))\n 65              .add(\"shippingFee\", Double.valueOf(cart.getShippingTotal()))\n 66              .add(\"shippingDiscount\", Double.valueOf(cart.getShippingPromoSavings()))\n 67              .add(\"items\",cartItems) \n 68              .build();\n 69          StringWriter w = new StringWriter();\n 70          try (JsonWriter writer = Json.createWriter(w)) {\n 71              writer.write(jsonObject);\n 72          }\n 73          return w.toString();\n 74      }\n 75  \n 76      public static Order jsonToOrder(String json) {\n 77          JsonReader jsonReader = Json.createReader(new StringReader(json));\n 78          JsonObject rootObject = jsonReader.readObject();\n 79          Order order = new Order();\n 80          order.setCustomerName(rootObject.getString(\"customerName\"));\n 81          order.setCustomerEmail(rootObject.getString(\"customerEmail\"));\n 82          order.setOrderValue(rootObject.getJsonNumber(\"orderValue\").doubleValue());\n 83          order.setRetailPrice(rootObject.getJsonNumber(\"retailPrice\").doubleValue());\n 84          order.setDiscount(rootObject.getJsonNumber(\"discount\").doubleValue());\n 85          order.setShippingFee(rootObject.getJsonNumber(\"shippingFee\").doubleValue());\n 86          order.setShippingDiscount(rootObject.getJsonNumber(\"shippingDiscount\").doubleValue());\n 87          JsonArray jsonItems = rootObject.getJsonArray(\"items\");\n 88          List\u003cOrderItem\u003e items = new ArrayList\u003cOrderItem\u003e(jsonItems.size());\n 89          for (JsonObject jsonItem : jsonItems.getValuesAs(JsonObject.class)) {\n 90              OrderItem oi = new OrderItem();\n 91              oi.setProductId(jsonItem.getString(\"productSku\"));\n 92              oi.setQuantity(jsonItem.getInt(\"quantity\"));\n 93              items.add(oi);\n 94          }\n 95          order.setItemList(items); \n 96          return order;\n 97      }\n 98  \n 99  \n100  }\n","lineNumber":14,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Transformers.java","kind":"Module","name":"javax.json.JsonArrayBuilder","package":"com.redhat.coolstore.utils","renamed":"json"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Transformers.java","message":"Replace the `javax.json` import statement with `jakarta.json` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import com.redhat.coolstore.model.CatalogItemEntity;\n  4  import com.redhat.coolstore.model.Order;\n  5  import com.redhat.coolstore.model.OrderItem;\n  6  import com.redhat.coolstore.model.Product;\n  7  import com.redhat.coolstore.model.ShoppingCart;\n  8  import java.io.StringReader;\n  9  import java.io.StringWriter;\n 10  import java.util.ArrayList;\n 11  import java.util.List;\n 12  import javax.json.Json;\n 13  import javax.json.JsonArray;\n 14  import javax.json.JsonArrayBuilder;\n 15  import javax.json.JsonObject;\n 16  import javax.json.JsonReader;\n 17  import javax.json.JsonWriter;\n 18  \n 19  import java.util.concurrent.ThreadLocalRandom;\n 20  import java.util.logging.Logger;\n 21  \n 22  /**\n 23   * Created by tqvarnst on 2017-03-30.\n 24   */\n 25  public class Transformers {\n 26  \n 27      private static final String[] RANDOM_NAMES = {\"Sven Karlsson\",\"Johan Andersson\",\"Karl Svensson\",\"Anders Johansson\",\"Stefan Olson\",\"Martin Ericsson\"};\n 28      private static final String[] RANDOM_EMAILS = {\"sven@gmail.com\",\"johan@gmail.com\",\"karl@gmail.com\",\"anders@gmail.com\",\"stefan@gmail.com\",\"martin@gmail.com\"};\n 29  \n 30      private static Logger log = Logger.getLogger(Transformers.class.getName());\n 31  \n 32      public static Product toProduct(CatalogItemEntity entity) {\n 33          Product prod = new Product();\n 34          prod.setItemId(entity.getItemId());\n 35          prod.setName(entity.getName());\n 36          prod.setDesc(entity.getDesc());\n 37          prod.setPrice(entity.getPrice());\n 38          if (entity.getInventory() != null) {\n 39              prod.setLocation(entity.getInventory().getLocation());\n 40              prod.setLink(entity.getInventory().getLink());\n 41              prod.setQuantity(entity.getInventory().getQuantity());\n 42          } else {\n 43              log.warning(\"Inventory for \" + entity.getName() + \"[\" + entity.getItemId()+ \"] unknown and missing\");\n 44          }\n 45          return prod;\n 46      }\n 47  \n 48      public static String shoppingCartToJson(ShoppingCart cart) {\n 49          JsonArrayBuilder cartItems = Json.createArrayBuilder();\n 50          cart.getShoppingCartItemList().forEach(item -\u003e {\n 51              cartItems.add(Json.createObjectBuilder()\n 52                  .add(\"productSku\",item.getProduct().getItemId())\n 53                  .add(\"quantity\",item.getQuantity())\n 54              );\n 55          });\n 56  \n 57          int randomNameAndEmailIndex = ThreadLocalRandom.current().nextInt(RANDOM_NAMES.length);\n 58  \n 59          JsonObject jsonObject = Json.createObjectBuilder()\n 60              .add(\"orderValue\", Double.valueOf(cart.getCartTotal()))\n 61              .add(\"customerName\",RANDOM_NAMES[randomNameAndEmailIndex])\n 62              .add(\"customerEmail\",RANDOM_EMAILS[randomNameAndEmailIndex])\n 63              .add(\"retailPrice\", cart.getShoppingCartItemList().stream().mapToDouble(i -\u003e i.getQuantity()*i.getPrice()).sum())\n 64              .add(\"discount\", Double.valueOf(cart.getCartItemPromoSavings()))\n 65              .add(\"shippingFee\", Double.valueOf(cart.getShippingTotal()))\n 66              .add(\"shippingDiscount\", Double.valueOf(cart.getShippingPromoSavings()))\n 67              .add(\"items\",cartItems) \n 68              .build();\n 69          StringWriter w = new StringWriter();\n 70          try (JsonWriter writer = Json.createWriter(w)) {\n 71              writer.write(jsonObject);\n 72          }\n 73          return w.toString();\n 74      }\n 75  \n 76      public static Order jsonToOrder(String json) {\n 77          JsonReader jsonReader = Json.createReader(new StringReader(json));\n 78          JsonObject rootObject = jsonReader.readObject();\n 79          Order order = new Order();\n 80          order.setCustomerName(rootObject.getString(\"customerName\"));\n 81          order.setCustomerEmail(rootObject.getString(\"customerEmail\"));\n 82          order.setOrderValue(rootObject.getJsonNumber(\"orderValue\").doubleValue());\n 83          order.setRetailPrice(rootObject.getJsonNumber(\"retailPrice\").doubleValue());\n 84          order.setDiscount(rootObject.getJsonNumber(\"discount\").doubleValue());\n 85          order.setShippingFee(rootObject.getJsonNumber(\"shippingFee\").doubleValue());\n 86          order.setShippingDiscount(rootObject.getJsonNumber(\"shippingDiscount\").doubleValue());\n 87          JsonArray jsonItems = rootObject.getJsonArray(\"items\");\n 88          List\u003cOrderItem\u003e items = new ArrayList\u003cOrderItem\u003e(jsonItems.size());\n 89          for (JsonObject jsonItem : jsonItems.getValuesAs(JsonObject.class)) {\n 90              OrderItem oi = new OrderItem();\n 91              oi.setProductId(jsonItem.getString(\"productSku\"));\n 92              oi.setQuantity(jsonItem.getInt(\"quantity\"));\n 93              items.add(oi);\n 94          }\n 95          order.setItemList(items); \n 96          return order;\n 97      }\n 98  \n 99  \n100  }\n","lineNumber":15,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Transformers.java","kind":"Module","name":"javax.json.JsonObject","package":"com.redhat.coolstore.utils","renamed":"json"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Transformers.java","message":"Replace the `javax.json` import statement with `jakarta.json` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import com.redhat.coolstore.model.CatalogItemEntity;\n  4  import com.redhat.coolstore.model.Order;\n  5  import com.redhat.coolstore.model.OrderItem;\n  6  import com.redhat.coolstore.model.Product;\n  7  import com.redhat.coolstore.model.ShoppingCart;\n  8  import java.io.StringReader;\n  9  import java.io.StringWriter;\n 10  import java.util.ArrayList;\n 11  import java.util.List;\n 12  import javax.json.Json;\n 13  import javax.json.JsonArray;\n 14  import javax.json.JsonArrayBuilder;\n 15  import javax.json.JsonObject;\n 16  import javax.json.JsonReader;\n 17  import javax.json.JsonWriter;\n 18  \n 19  import java.util.concurrent.ThreadLocalRandom;\n 20  import java.util.logging.Logger;\n 21  \n 22  /**\n 23   * Created by tqvarnst on 2017-03-30.\n 24   */\n 25  public class Transformers {\n 26  \n 27      private static final String[] RANDOM_NAMES = {\"Sven Karlsson\",\"Johan Andersson\",\"Karl Svensson\",\"Anders Johansson\",\"Stefan Olson\",\"Martin Ericsson\"};\n 28      private static final String[] RANDOM_EMAILS = {\"sven@gmail.com\",\"johan@gmail.com\",\"karl@gmail.com\",\"anders@gmail.com\",\"stefan@gmail.com\",\"martin@gmail.com\"};\n 29  \n 30      private static Logger log = Logger.getLogger(Transformers.class.getName());\n 31  \n 32      public static Product toProduct(CatalogItemEntity entity) {\n 33          Product prod = new Product();\n 34          prod.setItemId(entity.getItemId());\n 35          prod.setName(entity.getName());\n 36          prod.setDesc(entity.getDesc());\n 37          prod.setPrice(entity.getPrice());\n 38          if (entity.getInventory() != null) {\n 39              prod.setLocation(entity.getInventory().getLocation());\n 40              prod.setLink(entity.getInventory().getLink());\n 41              prod.setQuantity(entity.getInventory().getQuantity());\n 42          } else {\n 43              log.warning(\"Inventory for \" + entity.getName() + \"[\" + entity.getItemId()+ \"] unknown and missing\");\n 44          }\n 45          return prod;\n 46      }\n 47  \n 48      public static String shoppingCartToJson(ShoppingCart cart) {\n 49          JsonArrayBuilder cartItems = Json.createArrayBuilder();\n 50          cart.getShoppingCartItemList().forEach(item -\u003e {\n 51              cartItems.add(Json.createObjectBuilder()\n 52                  .add(\"productSku\",item.getProduct().getItemId())\n 53                  .add(\"quantity\",item.getQuantity())\n 54              );\n 55          });\n 56  \n 57          int randomNameAndEmailIndex = ThreadLocalRandom.current().nextInt(RANDOM_NAMES.length);\n 58  \n 59          JsonObject jsonObject = Json.createObjectBuilder()\n 60              .add(\"orderValue\", Double.valueOf(cart.getCartTotal()))\n 61              .add(\"customerName\",RANDOM_NAMES[randomNameAndEmailIndex])\n 62              .add(\"customerEmail\",RANDOM_EMAILS[randomNameAndEmailIndex])\n 63              .add(\"retailPrice\", cart.getShoppingCartItemList().stream().mapToDouble(i -\u003e i.getQuantity()*i.getPrice()).sum())\n 64              .add(\"discount\", Double.valueOf(cart.getCartItemPromoSavings()))\n 65              .add(\"shippingFee\", Double.valueOf(cart.getShippingTotal()))\n 66              .add(\"shippingDiscount\", Double.valueOf(cart.getShippingPromoSavings()))\n 67              .add(\"items\",cartItems) \n 68              .build();\n 69          StringWriter w = new StringWriter();\n 70          try (JsonWriter writer = Json.createWriter(w)) {\n 71              writer.write(jsonObject);\n 72          }\n 73          return w.toString();\n 74      }\n 75  \n 76      public static Order jsonToOrder(String json) {\n 77          JsonReader jsonReader = Json.createReader(new StringReader(json));\n 78          JsonObject rootObject = jsonReader.readObject();\n 79          Order order = new Order();\n 80          order.setCustomerName(rootObject.getString(\"customerName\"));\n 81          order.setCustomerEmail(rootObject.getString(\"customerEmail\"));\n 82          order.setOrderValue(rootObject.getJsonNumber(\"orderValue\").doubleValue());\n 83          order.setRetailPrice(rootObject.getJsonNumber(\"retailPrice\").doubleValue());\n 84          order.setDiscount(rootObject.getJsonNumber(\"discount\").doubleValue());\n 85          order.setShippingFee(rootObject.getJsonNumber(\"shippingFee\").doubleValue());\n 86          order.setShippingDiscount(rootObject.getJsonNumber(\"shippingDiscount\").doubleValue());\n 87          JsonArray jsonItems = rootObject.getJsonArray(\"items\");\n 88          List\u003cOrderItem\u003e items = new ArrayList\u003cOrderItem\u003e(jsonItems.size());\n 89          for (JsonObject jsonItem : jsonItems.getValuesAs(JsonObject.class)) {\n 90              OrderItem oi = new OrderItem();\n 91              oi.setProductId(jsonItem.getString(\"productSku\"));\n 92              oi.setQuantity(jsonItem.getInt(\"quantity\"));\n 93              items.add(oi);\n 94          }\n 95          order.setItemList(items); \n 96          return order;\n 97      }\n 98  \n 99  \n100  }\n","lineNumber":16,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Transformers.java","kind":"Module","name":"javax.json.JsonReader","package":"com.redhat.coolstore.utils","renamed":"json"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Transformers.java","message":"Replace the `javax.json` import statement with `jakarta.json` ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import com.redhat.coolstore.model.CatalogItemEntity;\n  4  import com.redhat.coolstore.model.Order;\n  5  import com.redhat.coolstore.model.OrderItem;\n  6  import com.redhat.coolstore.model.Product;\n  7  import com.redhat.coolstore.model.ShoppingCart;\n  8  import java.io.StringReader;\n  9  import java.io.StringWriter;\n 10  import java.util.ArrayList;\n 11  import java.util.List;\n 12  import javax.json.Json;\n 13  import javax.json.JsonArray;\n 14  import javax.json.JsonArrayBuilder;\n 15  import javax.json.JsonObject;\n 16  import javax.json.JsonReader;\n 17  import javax.json.JsonWriter;\n 18  \n 19  import java.util.concurrent.ThreadLocalRandom;\n 20  import java.util.logging.Logger;\n 21  \n 22  /**\n 23   * Created by tqvarnst on 2017-03-30.\n 24   */\n 25  public class Transformers {\n 26  \n 27      private static final String[] RANDOM_NAMES = {\"Sven Karlsson\",\"Johan Andersson\",\"Karl Svensson\",\"Anders Johansson\",\"Stefan Olson\",\"Martin Ericsson\"};\n 28      private static final String[] RANDOM_EMAILS = {\"sven@gmail.com\",\"johan@gmail.com\",\"karl@gmail.com\",\"anders@gmail.com\",\"stefan@gmail.com\",\"martin@gmail.com\"};\n 29  \n 30      private static Logger log = Logger.getLogger(Transformers.class.getName());\n 31  \n 32      public static Product toProduct(CatalogItemEntity entity) {\n 33          Product prod = new Product();\n 34          prod.setItemId(entity.getItemId());\n 35          prod.setName(entity.getName());\n 36          prod.setDesc(entity.getDesc());\n 37          prod.setPrice(entity.getPrice());\n 38          if (entity.getInventory() != null) {\n 39              prod.setLocation(entity.getInventory().getLocation());\n 40              prod.setLink(entity.getInventory().getLink());\n 41              prod.setQuantity(entity.getInventory().getQuantity());\n 42          } else {\n 43              log.warning(\"Inventory for \" + entity.getName() + \"[\" + entity.getItemId()+ \"] unknown and missing\");\n 44          }\n 45          return prod;\n 46      }\n 47  \n 48      public static String shoppingCartToJson(ShoppingCart cart) {\n 49          JsonArrayBuilder cartItems = Json.createArrayBuilder();\n 50          cart.getShoppingCartItemList().forEach(item -\u003e {\n 51              cartItems.add(Json.createObjectBuilder()\n 52                  .add(\"productSku\",item.getProduct().getItemId())\n 53                  .add(\"quantity\",item.getQuantity())\n 54              );\n 55          });\n 56  \n 57          int randomNameAndEmailIndex = ThreadLocalRandom.current().nextInt(RANDOM_NAMES.length);\n 58  \n 59          JsonObject jsonObject = Json.createObjectBuilder()\n 60              .add(\"orderValue\", Double.valueOf(cart.getCartTotal()))\n 61              .add(\"customerName\",RANDOM_NAMES[randomNameAndEmailIndex])\n 62              .add(\"customerEmail\",RANDOM_EMAILS[randomNameAndEmailIndex])\n 63              .add(\"retailPrice\", cart.getShoppingCartItemList().stream().mapToDouble(i -\u003e i.getQuantity()*i.getPrice()).sum())\n 64              .add(\"discount\", Double.valueOf(cart.getCartItemPromoSavings()))\n 65              .add(\"shippingFee\", Double.valueOf(cart.getShippingTotal()))\n 66              .add(\"shippingDiscount\", Double.valueOf(cart.getShippingPromoSavings()))\n 67              .add(\"items\",cartItems) \n 68              .build();\n 69          StringWriter w = new StringWriter();\n 70          try (JsonWriter writer = Json.createWriter(w)) {\n 71              writer.write(jsonObject);\n 72          }\n 73          return w.toString();\n 74      }\n 75  \n 76      public static Order jsonToOrder(String json) {\n 77          JsonReader jsonReader = Json.createReader(new StringReader(json));\n 78          JsonObject rootObject = jsonReader.readObject();\n 79          Order order = new Order();\n 80          order.setCustomerName(rootObject.getString(\"customerName\"));\n 81          order.setCustomerEmail(rootObject.getString(\"customerEmail\"));\n 82          order.setOrderValue(rootObject.getJsonNumber(\"orderValue\").doubleValue());\n 83          order.setRetailPrice(rootObject.getJsonNumber(\"retailPrice\").doubleValue());\n 84          order.setDiscount(rootObject.getJsonNumber(\"discount\").doubleValue());\n 85          order.setShippingFee(rootObject.getJsonNumber(\"shippingFee\").doubleValue());\n 86          order.setShippingDiscount(rootObject.getJsonNumber(\"shippingDiscount\").doubleValue());\n 87          JsonArray jsonItems = rootObject.getJsonArray(\"items\");\n 88          List\u003cOrderItem\u003e items = new ArrayList\u003cOrderItem\u003e(jsonItems.size());\n 89          for (JsonObject jsonItem : jsonItems.getValuesAs(JsonObject.class)) {\n 90              OrderItem oi = new OrderItem();\n 91              oi.setProductId(jsonItem.getString(\"productSku\"));\n 92              oi.setQuantity(jsonItem.getInt(\"quantity\"));\n 93              items.add(oi);\n 94          }\n 95          order.setItemList(items); \n 96          return order;\n 97      }\n 98  \n 99  \n100  }\n","lineNumber":17,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Transformers.java","kind":"Module","name":"javax.json.JsonWriter","package":"com.redhat.coolstore.utils","renamed":"json"}}],"Extras":null,"effort":1},"javax-to-jakarta-properties-00001":{"description":"Rename properties prefixed by javax with jakarta ","category":"mandatory","labels":["konveyor.io/source","konveyor.io/target=eap","konveyor.io/target=eap8","konveyor.io/target=jakarta-ee","konveyor.io/target=jakarta-ee9+"],"incidents":[{"uri":"file:///tmp/source-code/src/main/resources/META-INF/persistence.xml","message":"Rename properties prefixed by `javax` with `jakarta` ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cpersistence version=\"2.1\"\n  3               xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  4               xsi:schemaLocation=\"\n  5          http://xmlns.jcp.org/xml/ns/persistence\n  6          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n  7      \u003cpersistence-unit name=\"primary\"\u003e\n  8          \u003cjta-data-source\u003ejava:jboss/datasources/CoolstoreDS\u003c/jta-data-source\u003e\n  9          \u003cproperties\u003e\n 10              \u003cproperty name=\"javax.persistence.schema-generation.database.action\" value=\"none\"/\u003e\n 11              \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 12              \u003cproperty name=\"hibernate.format_sql\" value=\"true\" /\u003e\n 13              \u003cproperty name=\"hibernate.use_sql_comments\" value=\"true\" /\u003e\n 14              \u003cproperty name=\"hibernate.jdbc.use_get_generated_keys\" value=\"false\" /\u003e\n 15          \u003c/properties\u003e\n 16      \u003c/persistence-unit\u003e\n 17  \u003c/persistence\u003e\n","lineNumber":10,"variables":{"matchingText":"\u003cproperty name=\"javax."}}],"links":[{"url":"https://jakarta.ee/","title":"Jakarta EE"}],"Extras":null,"effort":1}},"unmatched":["javaee-to-jakarta-namespaces-00003","javaee-to-jakarta-namespaces-00004","javaee-to-jakarta-namespaces-00005","javaee-to-jakarta-namespaces-00007","javaee-to-jakarta-namespaces-00008","javaee-to-jakarta-namespaces-00009","javaee-to-jakarta-namespaces-00010","javaee-to-jakarta-namespaces-00011","javaee-to-jakarta-namespaces-00012","javaee-to-jakarta-namespaces-00013","javaee-to-jakarta-namespaces-00014","javaee-to-jakarta-namespaces-00015","javaee-to-jakarta-namespaces-00016","javaee-to-jakarta-namespaces-00017","javaee-to-jakarta-namespaces-00018","javaee-to-jakarta-namespaces-00019","javaee-to-jakarta-namespaces-00020","javaee-to-jakarta-namespaces-00021","javaee-to-jakarta-namespaces-00022","javaee-to-jakarta-namespaces-00023","javaee-to-jakarta-namespaces-00024","javaee-to-jakarta-namespaces-00025","javaee-to-jakarta-namespaces-00026","javaee-to-jakarta-namespaces-00027","javaee-to-jakarta-namespaces-00028","javaee-to-jakarta-namespaces-00029","javaee-to-jakarta-namespaces-00031","javaee-to-jakarta-namespaces-00032","javaee-to-jakarta-namespaces-00034","javaee-to-jakarta-namespaces-00035","javaee-to-jakarta-namespaces-00036","javaee-to-jakarta-namespaces-00037","javaee-to-jakarta-namespaces-00038","javaee-to-jakarta-namespaces-00039","javaee-to-jakarta-namespaces-00040","javaee-to-jakarta-namespaces-00041","javaee-to-jakarta-namespaces-00042","javaee-to-jakarta-namespaces-00043","javaee-to-jakarta-namespaces-00044","javaee-to-jakarta-namespaces-00045","javaee-to-jakarta-namespaces-00046","javaee-to-jakarta-namespaces-00047","javaee-to-jakarta-namespaces-00048","javaee-to-jakarta-namespaces-00049","javaee-to-jakarta-namespaces-00050","javaee-to-jakarta-namespaces-00051","javaee-to-jakarta-namespaces-00052","javaee-to-jakarta-namespaces-00053","javaee-to-jakarta-namespaces-00054","javaee-to-jakarta-namespaces-00055","javaee-to-jakarta-namespaces-00056","javax-to-jakarta-bootstrapping-files-00001","javax-to-jakarta-dependencies-00001","javax-to-jakarta-dependencies-00002","javax-to-jakarta-dependencies-00003","javax-to-jakarta-dependencies-00004","javax-to-jakarta-dependencies-00005","javax-to-jakarta-servlet-00010","javax-to-jakarta-servlet-00020","javax-to-jakarta-servlet-00030","javax-to-jakarta-servlet-00040","javax-to-jakarta-servlet-00041","javax-to-jakarta-servlet-00042","javax-to-jakarta-servlet-00043","javax-to-jakarta-servlet-00050","javax-to-jakarta-servlet-00060","javax-to-jakarta-servlet-00070","javax-to-jakarta-servlet-00071","javax-to-jakarta-servlet-00072","javax-to-jakarta-servlet-00080","javax-to-jakarta-servlet-00090","javax-to-jakarta-servlet-00100","javax-to-jakarta-servlet-00101","javax-to-jakarta-servlet-00102","javax-to-jakarta-servlet-00110","javax-to-jakarta-servlet-00111","javax-to-jakarta-servlet-00112","javax-to-jakarta-servlet-00120","javax-to-jakarta-servlet-00121","javax-to-jakarta-servlet-00122","javax-to-jakarta-servlet-00123"],"skipped":["eap8-ejb-00001","eap8-ejb-00002","eap8-ejb-00003","eap8-faces-00001","eap8-faces-00002","eap8-faces-00003","eap8-faces-00004","eap8-faces-00005","eap8-faces-00006","eap8-faces-00007","eap8-faces-00008","eap8-faces-00009","eap8-resteasy-00001","eap8-resteasy-00002","eap8-resteasy-00003","eap8-resteasy-00004","eap8-resteasy-00005","eap8-resteasy-00006","eap8-resteasy-00007","eap8-resteasy-00008","eap8-resteasy-00009","eap8-resteasy-00010","eap8-resteasy-00011","eap8-xml-binding-00001","eap8-xml-binding-00002","eap8-xml-binding-00003","eap8-xml-binding-00004","eap8-xml-binding-00005","eap8-xml-binding-00006","eap8-xml-binding-00007","eap8-xml-binding-00008","eap8-xml-binding-00009","empty-beans-xml-00001","hibernate-00005","hibernate-00010","hibernate-6.2-00010","hibernate-6.2-00020","hibernate-6.2-00030","hibernate-6.2-00040","hibernate-6.2-00050","hibernate-search-00010","hibernate-search-00020","hibernate-search-00030","hibernate-search-00040","hibernate-search-00050","hibernate-search-00060","hibernate-search-00070","hibernate-search-00080","hibernate-search-00090","hibernate-search-00100","hibernate-search-00105","hibernate-search-00110","hibernate-search-00120","hibernate-search-00140","hibernate-search-00150","hibernate-search-00160","hibernate-search-00170","hibernate-search-00180","hibernate-search-00190","hibernate-search-00200","hibernate-search-00210","hibernate-search-00220","hibernate-search-00230","hibernate-search-00240","hibernate-search-00250","hibernate-search-00260","hibernate-search-00270","hibernate-search-00280","hibernate-search-00290","hibernate-search-00300","hibernate-search-00310","hibernate-search-00320","hibernate-search-00330","hibernate-search-00340","hibernate-search-00350","hibernate-search-00360","hibernate-search-00370","hibernate-search-00380","hibernate-search-00390","hibernate-search-00400","hibernate-search-00410","hibernate-search-00420","hibernate-search-00430","hibernate-search-00440","hibernate-search-00450","hibernate-search-00460","hibernate-search-00470","hibernate-search-00480","hibernate-search-00490","hibernate-search-00500","hibernate-search-00510","hibernate-search-00520","hibernate-search-00530","hibernate-search-00540","hibernate-search-00550","hibernate-search-00560","hibernate-search-00570","hibernate-search-00580","hibernate-search-00590","hibernate-search-00600","hibernate-search-00610","hibernate-search-00620","hibernate-search-00630","hibernate-search-00640","hibernate-search-00650","hibernate-search-00660","hibernate-search-00670","hibernate-search-00680","hibernate-search-00690","hibernate-search-00700","hibernate-search-00710","hibernate-search-00720","hibernate-search-00730","hibernate-search-00740","hibernate-search-00750","hibernate-search-00760","hibernate-search-00770","hibernate-search-00780","hibernate-search-00790","hibernate-search-00800","hibernate-search-00810","hibernate-search-00820","hibernate-search-00830","hibernate-search-00840","hibernate-search-00850","hibernate-search-00860","hibernate-search-00870","hibernate-search-00880","hibernate-search-00890","hibernate-search-00900","hibernate-search-00910","hibernate-search-00920","hibernate-search-00930","hibernate-search-00940","hibernate-search-00950","hibernate-search-00960","hibernate-search-00970","hibernate-search-00980","hibernate-search-00990","hibernate-search-01000","hibernate-search-01010","hibernate-search-01020","hibernate-search-01030","hibernate-search-01040","hibernate-search-6.1-00010","hibernate-search-6.1-00020","hibernate-search-6.1-00030","hibernate-search-6.1-00040","hibernate-search-6.1-00050","hibernate-search-6.1-00060","hibernate-search-6.1-00070","hibernate-search-6.1-00080","hibernate-search-6.1-00090","hibernate-search-6.1-00100","hibernate-search-6.1-00120","hibernate-search-6.1-00130","hibernate-search-6.1-00140","hibernate-search-6.1-00150","hibernate-search-6.1-00160","hibernate-search-6.1-00170","hibernate-search-6.1-00180","hibernate-search-6.1-00190","hibernate6-00020","hibernate6-00030","hibernate6-00040","hibernate6-00050","hibernate6-00060","hibernate6-00070","hibernate6-00080","hibernate6-00090","hibernate6-00100","hibernate6-00110","hibernate6-00120","hibernate6-00130","hibernate6-00140","hibernate6-00150","hibernate6-00160","hibernate6-00170","hibernate6-00180","hibernate6-00190","hibernate6-00200","hibernate6-00210","hibernate6-00220","hibernate6-00230","hibernate6-00240","hibernate6-00250","hibernate6-00251","hibernate6-00252","hibernate6-00253","hibernate6-00254","hibernate6-00255","hibernate6-00257","hibernate6-00270","jakarta-cdi-00001","jakarta-cdi-00002","jakarta-cdi-00003","jakarta-cdi-00004","jakarta-el-00010","jakarta-el-00020","jakarta-faces-00001","jakarta-json-binding-00010","jakarta-soap-00010","jakarta-soap-00020","jakarta-ws-rs-00001","jboss-dependencies-00001","jboss-dependencies-00002","jboss-dependencies-00003","jboss-dependencies-00004","jboss-dependencies-00005","jboss-dependencies-00006","jboss-dependencies-00007","jboss-dependencies-00008","jboss-dependencies-00009","jboss-dependencies-00010","jboss-dependencies-00011","jboss-dependencies-00012","jboss-dependencies-00013","jboss-dependencies-00014","jboss-dependencies-00015","jboss-dependencies-00016","jboss-dependencies-00017","jboss-dependencies-00018","jboss-dependencies-00019","jboss-dependencies-00020","jboss-dependencies-00021","jboss-dependencies-00022","jboss-dependencies-00023","jboss-dependencies-00024","jboss-dependencies-00025","jboss-dependencies-00026","jboss-dependencies-00027","jboss-dependencies-00028","jboss-dependencies-00029","jboss-dependencies-00030","jboss-dependencies-00031","keycloak-openid-00001","keycloak-openid-00010","legacy-vault-00010","login-modules-00001","picketlink-00010","picketlink-00020"]},{"name":"eapxp/thorntail","description":"This ruleset provides analysis of Maven built applications that use Thorntail Maven Plugin, which should be replaced by JBoss EAP XP Bootable JAR Maven Plugin, when migrating to JBoss EAP XP.","skipped":["eapxp_bootable_jar_maven_plugin_configuration_changes-1","remove_thorntail_yaml_configuration_files-1","replace_thorntail_boms-1","replace_thorntail_boms-2","replace_thorntail_fractions-01","replace_thorntail_fractions-02","replace_thorntail_fractions-03","replace_thorntail_fractions-04","replace_thorntail_fractions-05","replace_thorntail_fractions-06","replace_thorntail_fractions-07","replace_thorntail_fractions-08","replace_thorntail_fractions-09","replace_thorntail_fractions-10","replace_thorntail_fractions-11","replace_thorntail_fractions-12","replace_thorntail_fractions-13","replace_thorntail_fractions-14","replace_thorntail_fractions-15","replace_thorntail_fractions-16","replace_thorntail_fractions-17","replace_thorntail_fractions-18","replace_thorntail_fractions-19","replace_thorntail_fractions-20","replace_thorntail_fractions-21","replace_thorntail_fractions-22","replace_thorntail_fractions-23","replace_thorntail_fractions-24","replace_thorntail_fractions-25","replace_thorntail_fractions-26","replace_thorntail_fractions-27","replace_thorntail_fractions-28","replace_thorntail_fractions-29","replace_thorntail_fractions-30","replace_thorntail_fractions-31","replace_thorntail_fractions-32","replace_thorntail_fractions-33","replace_thorntail_fractions-34","replace_thorntail_fractions-35","replace_thorntail_fractions-36","replace_thorntail_fractions-37","replace_thorntail_fractions-38","replace_thorntail_fractions-39","replace_thorntail_fractions-40","replace_thorntail_fractions-41","replace_thorntail_fractions-42","replace_thorntail_fractions-43","replace_thorntail_fractions-44","replace_thorntail_fractions-45","replace_thorntail_fractions-46","replace_thorntail_fractions-47","replace_thorntail_fractions-48","replace_thorntail_fractions-49","replace_thorntail_fractions-50","replace_thorntail_maven_plugin-1"]},{"name":"filemappings","description":"This rule set configures the organization matching functionality, using known root-package prefixes to identify libraries and other code."},{"name":"fuse-service-works/soa-p-5","description":"This ruleset provides analysis of JBoss SOA Platform 5 applications and provides information on how to migrate these to Red Hat JBoss Fuse Service Works","skipped":["soa-p-16000","soa-p-17000","soa-p-18000","soa-p-19000","soa-p-20000","soa-p-21000","soa-p-22000","soa-p-23000","soa-p-24000","soa-p-25000","soa-p-26000","soa-p-27000","soa-p-28000","soa-p-29000","soa-p-30000","soa-p-31000","soa-p-32000","soa-p-33000","soa-p-34000","soa-p-35000","soa-p-36000","soa-p-37000","soa-p-38000","soa-p-39000","soa-p-40000","soa-p-41000","soa-p-42000","soa-p-43000","soa-p-44000","soa-p-45000","soa-p-46000","soa-p-47000","soa-p-48000","soa-p-49000","soa-p-5-01000","soa-p-5-02000","soa-p-5-03000","soa-p-5-04000","soa-p-5-05000","soa-p-5-06000","soa-p-5-07000","soa-p-5-08000","soa-p-5-09000","soa-p-5-10000","soa-p-5-11000","soa-p-5-12000","soa-p-5-13000","soa-p-5-14000","soa-p-5-15000","soa-p-50000"]},{"name":"fuse/sonicesb","description":"This ruleset contains rules that assist in migrating from Sonic ESB to Apache Camel.","skipped":["sonic-catchall-00000","sonic-esb-01000","sonic-esb-02000","sonic-esb-03000","sonic-esb-04000","sonic-esb-05000","sonic-esb-06000","sonic-esb-07000","sonic-esb-08000","sonic-esb-09000","sonic-esb-10000","sonic-esb-11000","sonic-esb-12000","sonic-esb-13000","sonic-esb-14000","sonic-esb-15000","sonic-esb-16000","sonic-esb-17000","sonic-esb-18000","sonic-esb-19000","sonic-esb-20000","sonic-esb-21000","xml-sonic-esb-01000"]},{"name":"hibernate","description":"This ruleset provides analysis of deprecated Hibernate java constructs and their migration to newer one.","skipped":["hibernate-01000","hibernate-02000","hibernate-03000","hibernate-04000","hibernate-05000","hibernate-06000","hibernate-07000","hibernate-08000","hibernate-09000","hibernate-10000","hibernate-10100","hibernate-catchall-00000","hibernate-xml-01000","hibernate-xml-02000","hibernate-xml-03000"]},{"name":"jws5","description":"This ruleset provides analysis of applications that need to change their pom dependencies to upgrade dependencies that belong to the groupId `org.apache.tomcat`","skipped":["upgrade-tomcat-dependencies-00001"]},{"name":"kai/quarkus","description":"Quarkus focused rules to help migrate from Java EE","violations":{"jms-to-reactive-quarkus-00000":{"description":"JMS is not supported in Quarkus","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"Usage of JMS is not supported in Quarkus. It is recommended to use Quarkus' SmallRye Reactive Messaging instead of JMS.\n Replace the JavaEE/Jakarta JMS dependency with Smallrye Reactive:\n \n ```\n \u003cdependency\u003e\n \u003cgroupId\u003eio.quarkus\u003c/groupId\u003e\n \u003cartifactId\u003equarkus-smallrye-reactive-messaging\u003c/artifactId\u003e\n \u003c/dependency\u003e\n \n ```\n \n Take a look at the Smallrye Reactive Connectors link below to know more about how to interact with different technologies (AMQP, Apache Camel, ...)","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":31,"variables":{"name":"org.jboss.spec.javax.jms.jboss-jms-api_2.0_spec","version":"2.0.0.Final"}}],"links":[{"url":"https://quarkus.io/guides","title":"Quarkus - Guide"},{"url":"https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.4/connectors/connectors.html","title":"Smallrye Reactive - Connectors"}],"Extras":null,"effort":5},"jms-to-reactive-quarkus-00010":{"description":"@MessageDriven - EJBs are not supported in Quarkus","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"Enterprise Java Beans (EJBs) are not supported in Quarkus. CDI must be used.\n Please replace the `@MessageDriven` annotation with a CDI scope annotation like `@ApplicationScoped`.","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":14,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Class","name":"MessageDriven","package":"com.redhat.coolstore.service"}}],"links":[{"url":"https://quarkus.io/guides","title":"Quarkus - Guide"}],"Extras":null,"effort":3},"jms-to-reactive-quarkus-00020":{"description":"Configure message listener method with @Incoming","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"The `destinationLookup` property can be migrated by annotating a message handler method (potentially `onMessage`) with the\n `org.eclipse.microprofile.reactive.messaging.Incoming` annotation, indicating the name of the queue as a value:\n \n Before:\n ```\n @MessageDriven(name = \"HelloWorldQueueMDB\", activationConfig = \n public class MessageListenerImpl implements MessageListener \n }}\n ```\n \n After:\n ```\n public class MessageListenerImpl implements MessageListener \n }}\n ```","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":15,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Class","name":"MessageDriven","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"The `destinationLookup` property can be migrated by annotating a message handler method (potentially `onMessage`) with the\n `org.eclipse.microprofile.reactive.messaging.Incoming` annotation, indicating the name of the queue as a value:\n \n Before:\n ```\n @MessageDriven(name = \"HelloWorldQueueMDB\", activationConfig = \n public class MessageListenerImpl implements MessageListener \n }}\n ```\n \n After:\n ```\n public class MessageListenerImpl implements MessageListener \n }}\n ```","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":16,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Class","name":"MessageDriven","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"The `destinationLookup` property can be migrated by annotating a message handler method (potentially `onMessage`) with the\n `org.eclipse.microprofile.reactive.messaging.Incoming` annotation, indicating the name of the queue as a value:\n \n Before:\n ```\n @MessageDriven(name = \"HelloWorldQueueMDB\", activationConfig = \n public class MessageListenerImpl implements MessageListener \n }}\n ```\n \n After:\n ```\n public class MessageListenerImpl implements MessageListener \n }}\n ```","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":17,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Class","name":"MessageDriven","package":"com.redhat.coolstore.service"}}],"links":[{"url":"https://smallrye.io/smallrye-reactive-messaging/2.5.0/apidocs/org/eclipse/microprofile/reactive/messaging/Incoming.html","title":"Incoming (SmallRye Reactive Messaging API)"},{"url":"https://quarkus.io/guides","title":"Quarkus - Guide"}],"Extras":null,"effort":3},"jms-to-reactive-quarkus-00040":{"description":"JMS' Topic must be replaced with an Emitter","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","message":"JMS `Topic`s should be replaced with Micrometer `Emitter`s feeding a Channel. See the following example of migrating\n a Topic to an Emitter:\n \n Before:\n ```\n @Resource(lookup = \"java:/topic/HELLOWORLDMDBTopic\")\n private Topic topic;\n ```\n \n After:\n ```\n @Inject\n @Channel(\"HELLOWORLDMDBTopic\")\n Emitter\u003cString\u003e topicEmitter;\n ```","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.logging.Logger;\n  4  import javax.ejb.Stateless;\n  5  import javax.annotation.Resource;\n  6  import javax.inject.Inject;\n  7  import javax.jms.JMSContext;\n  8  import javax.jms.Topic;\n  9  \n 10  import com.redhat.coolstore.model.ShoppingCart;\n 11  import com.redhat.coolstore.utils.Transformers;\n 12  \n 13  @Stateless\n 14  public class ShoppingCartOrderProcessor  {\n 15  \n 16      @Inject\n 17      Logger log;\n 18  \n 19  \n 20      @Inject\n 21      private transient JMSContext context;\n 22  \n 23      @Resource(lookup = \"java:/topic/orders\")\n 24      private Topic ordersTopic;\n 25  \n 26      \n 27    \n 28      public void  process(ShoppingCart cart) {\n 29          log.info(\"Sending order from processor: \");\n 30          context.createProducer().send(ordersTopic, Transformers.shoppingCartToJson(cart));\n 31      }\n 32  \n 33  \n 34  \n 35  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","kind":"Module","name":"javax.jms.Topic","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","message":"JMS `Topic`s should be replaced with Micrometer `Emitter`s feeding a Channel. See the following example of migrating\n a Topic to an Emitter:\n \n Before:\n ```\n @Resource(lookup = \"java:/topic/HELLOWORLDMDBTopic\")\n private Topic topic;\n ```\n \n After:\n ```\n @Inject\n @Channel(\"HELLOWORLDMDBTopic\")\n Emitter\u003cString\u003e topicEmitter;\n ```","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.logging.Logger;\n  4  import javax.ejb.Stateless;\n  5  import javax.annotation.Resource;\n  6  import javax.inject.Inject;\n  7  import javax.jms.JMSContext;\n  8  import javax.jms.Topic;\n  9  \n 10  import com.redhat.coolstore.model.ShoppingCart;\n 11  import com.redhat.coolstore.utils.Transformers;\n 12  \n 13  @Stateless\n 14  public class ShoppingCartOrderProcessor  {\n 15  \n 16      @Inject\n 17      Logger log;\n 18  \n 19  \n 20      @Inject\n 21      private transient JMSContext context;\n 22  \n 23      @Resource(lookup = \"java:/topic/orders\")\n 24      private Topic ordersTopic;\n 25  \n 26      \n 27    \n 28      public void  process(ShoppingCart cart) {\n 29          log.info(\"Sending order from processor: \");\n 30          context.createProducer().send(ordersTopic, Transformers.shoppingCartToJson(cart));\n 31      }\n 32  \n 33  \n 34  \n 35  }\n","lineNumber":24,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","kind":"Field","name":"ordersTopic","package":"com.redhat.coolstore.service"}}],"links":[{"url":"https://smallrye.io/smallrye-reactive-messaging/2.0.2/apidocs/org/eclipse/microprofile/reactive/messaging/Emitter.html","title":"Emitter (Microprofile Reactive Streams Messaging)"},{"url":"https://quarkus.io/guides","title":"Quarkus - Guide"}],"Extras":null,"effort":3},"jms-to-reactive-quarkus-00050":{"description":"JMS is not supported in Quarkus","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java","message":"References to JavaEE/JakartaEE JMS elements should be removed and replaced with their Quarkus SmallRye/Microprofile equivalents.","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.Order;\n  4  import com.redhat.coolstore.utils.Transformers;\n  5  \n  6  import javax.inject.Inject;\n  7  import javax.jms.*;\n  8  import javax.naming.Context;\n  9  import javax.naming.InitialContext;\n 10  import javax.naming.NamingException;\n 11  import javax.rmi.PortableRemoteObject;\n 12  import java.util.Hashtable;\n 13  \n 14  public class InventoryNotificationMDB implements MessageListener {\n 15  \n 16      private static final int LOW_THRESHOLD = 50;\n 17  \n 18      @Inject\n 19      private CatalogService catalogService;\n 20  \n 21      private final static String JNDI_FACTORY = \"weblogic.jndi.WLInitialContextFactory\";\n 22      private final static String JMS_FACTORY = \"TCF\";\n 23      private final static String TOPIC = \"topic/orders\";\n 24      private TopicConnection tcon;\n 25      private TopicSession tsession;\n 26      private TopicSubscriber tsubscriber;\n 27  \n 28      public void onMessage(Message rcvMessage) {\n 29          TextMessage msg;\n 30          {\n 31              try {\n 32                  System.out.println(\"received message inventory\");\n 33                  if (rcvMessage instanceof TextMessage) {\n 34                      msg = (TextMessage) rcvMessage;\n 35                      String orderStr = msg.getBody(String.class);\n 36                      Order order = Transformers.jsonToOrder(orderStr);\n 37                      order.getItemList().forEach(orderItem -\u003e {\n 38                          int old_quantity = catalogService.getCatalogItemById(orderItem.getProductId()).getInventory().getQuantity();\n 39                          int new_quantity = old_quantity - orderItem.getQuantity();\n 40                          if (new_quantity \u003c LOW_THRESHOLD) {\n 41                              System.out.println(\"Inventory for item \" + orderItem.getProductId() + \" is below threshold (\" + LOW_THRESHOLD + \"), contact supplier!\");\n 42                          } else {\n 43                              orderItem.setQuantity(new_quantity);\n 44                          }\n 45                      });\n 46                  }\n 47  \n 48  \n 49              } catch (JMSException jmse) {\n 50                  System.err.println(\"An exception occurred: \" + jmse.getMessage());\n 51              }\n 52          }\n 53      }\n 54  \n 55      public void init() throws NamingException, JMSException {\n 56          Context ctx = getInitialContext();\n 57          TopicConnectionFactory tconFactory = (TopicConnectionFactory) PortableRemoteObject.narrow(ctx.lookup(JMS_FACTORY), TopicConnectionFactory.class);\n 58          tcon = tconFactory.createTopicConnection();\n 59          tsession = tcon.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);\n 60          Topic topic = (Topic) PortableRemoteObject.narrow(ctx.lookup(TOPIC), Topic.class);\n 61          tsubscriber = tsession.createSubscriber(topic);\n 62          tsubscriber.setMessageListener(this);\n 63          tcon.start();\n 64      }\n 65  \n 66      public void close() throws JMSException {\n 67          tsubscriber.close();\n 68          tsession.close();\n 69          tcon.close();\n 70      }\n 71  \n 72      private static InitialContext getInitialContext() throws NamingException {\n 73          Hashtable\u003cString, String\u003e env = new Hashtable\u003c\u003e();\n 74          env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);\n 75          env.put(Context.PROVIDER_URL, \"t3://localhost:7001\");\n 76          env.put(\"weblogic.jndi.createIntermediateContexts\", \"true\");\n 77          return new InitialContext(env);\n 78      }\n 79  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java","kind":"Module","name":"javax.jms.*","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"References to JavaEE/JakartaEE JMS elements should be removed and replaced with their Quarkus SmallRye/Microprofile equivalents.","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":6,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Module","name":"javax.jms.JMSException","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"References to JavaEE/JakartaEE JMS elements should be removed and replaced with their Quarkus SmallRye/Microprofile equivalents.","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Module","name":"javax.jms.Message","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"References to JavaEE/JakartaEE JMS elements should be removed and replaced with their Quarkus SmallRye/Microprofile equivalents.","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Module","name":"javax.jms.MessageListener","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","message":"References to JavaEE/JakartaEE JMS elements should be removed and replaced with their Quarkus SmallRye/Microprofile equivalents.","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import javax.ejb.ActivationConfigProperty;\n  4  import javax.ejb.MessageDriven;\n  5  import javax.inject.Inject;\n  6  import javax.jms.JMSException;\n  7  import javax.jms.Message;\n  8  import javax.jms.MessageListener;\n  9  import javax.jms.TextMessage;\n 10  \n 11  import com.redhat.coolstore.model.Order;\n 12  import com.redhat.coolstore.utils.Transformers;\n 13  \n 14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n 15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/orders\"),\n 16  \t@ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n 17  \t@ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\n 18  public class OrderServiceMDB implements MessageListener { \n 19  \n 20  \t@Inject\n 21  \tOrderService orderService;\n 22  \n 23  \t@Inject\n 24  \tCatalogService catalogService;\n 25  \n 26  \t@Override\n 27  \tpublic void onMessage(Message rcvMessage) {\n 28  \t\tSystem.out.println(\"\\nMessage recd !\");\n 29  \t\tTextMessage msg = null;\n 30  \t\ttry {\n 31  \t\t\t\tif (rcvMessage instanceof TextMessage) {\n 32  \t\t\t\t\t\tmsg = (TextMessage) rcvMessage;\n 33  \t\t\t\t\t\tString orderStr = msg.getBody(String.class);\n 34  \t\t\t\t\t\tSystem.out.println(\"Received order: \" + orderStr);\n 35  \t\t\t\t\t\tOrder order = Transformers.jsonToOrder(orderStr);\n 36  \t\t\t\t\t\tSystem.out.println(\"Order object is \" + order);\n 37  \t\t\t\t\t\torderService.save(order);\n 38  \t\t\t\t\t\torder.getItemList().forEach(orderItem -\u003e {\n 39  \t\t\t\t\t\t\tcatalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());\n 40  \t\t\t\t\t\t});\n 41  \t\t\t\t}\n 42  \t\t} catch (JMSException e) {\n 43  \t\t\tthrow new RuntimeException(e);\n 44  \t\t}\n 45  \t}\n 46  \n 47  }\n","lineNumber":9,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java","kind":"Module","name":"javax.jms.TextMessage","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","message":"References to JavaEE/JakartaEE JMS elements should be removed and replaced with their Quarkus SmallRye/Microprofile equivalents.","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.logging.Logger;\n  4  import javax.ejb.Stateless;\n  5  import javax.annotation.Resource;\n  6  import javax.inject.Inject;\n  7  import javax.jms.JMSContext;\n  8  import javax.jms.Topic;\n  9  \n 10  import com.redhat.coolstore.model.ShoppingCart;\n 11  import com.redhat.coolstore.utils.Transformers;\n 12  \n 13  @Stateless\n 14  public class ShoppingCartOrderProcessor  {\n 15  \n 16      @Inject\n 17      Logger log;\n 18  \n 19  \n 20      @Inject\n 21      private transient JMSContext context;\n 22  \n 23      @Resource(lookup = \"java:/topic/orders\")\n 24      private Topic ordersTopic;\n 25  \n 26      \n 27    \n 28      public void  process(ShoppingCart cart) {\n 29          log.info(\"Sending order from processor: \");\n 30          context.createProducer().send(ordersTopic, Transformers.shoppingCartToJson(cart));\n 31      }\n 32  \n 33  \n 34  \n 35  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","kind":"Module","name":"javax.jms.JMSContext","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","message":"References to JavaEE/JakartaEE JMS elements should be removed and replaced with their Quarkus SmallRye/Microprofile equivalents.","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.logging.Logger;\n  4  import javax.ejb.Stateless;\n  5  import javax.annotation.Resource;\n  6  import javax.inject.Inject;\n  7  import javax.jms.JMSContext;\n  8  import javax.jms.Topic;\n  9  \n 10  import com.redhat.coolstore.model.ShoppingCart;\n 11  import com.redhat.coolstore.utils.Transformers;\n 12  \n 13  @Stateless\n 14  public class ShoppingCartOrderProcessor  {\n 15  \n 16      @Inject\n 17      Logger log;\n 18  \n 19  \n 20      @Inject\n 21      private transient JMSContext context;\n 22  \n 23      @Resource(lookup = \"java:/topic/orders\")\n 24      private Topic ordersTopic;\n 25  \n 26      \n 27    \n 28      public void  process(ShoppingCart cart) {\n 29          log.info(\"Sending order from processor: \");\n 30          context.createProducer().send(ordersTopic, Transformers.shoppingCartToJson(cart));\n 31      }\n 32  \n 33  \n 34  \n 35  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","kind":"Module","name":"javax.jms.Topic","package":"com.redhat.coolstore.service"}}],"links":[{"url":"https://quarkus.io/guides","title":"Quarkus - Guide"}],"Extras":null,"effort":5},"persistence-to-quarkus-00000":{"description":"Move persistence config to a properties file","category":"optional","labels":["konveyor.io/source=jakarta-ee","konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/src/main/resources/META-INF/persistence.xml","message":"It is recommended to move persistence related configuration from an XML file to a properties one.\n This allows centralization of the configuration in Quarkus. Check the link for more information.\n \n \n Datasource and persistence configurations in XML can be substituted with a single centralized properties file. Here is an example of a translation:\n \n The following datasource configuration:\n ```\n \u003cdatasources xmlns=\"http://www.jboss.org/ironjacamar/schema\"\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xsi:schemaLocation=\"http://www.jboss.org/ironjacamar/schema http://docs.jboss.org/ironjacamar/schema/datasources_1_0.xsd\"\u003e\n \u003c!-- The datasource is bound into JNDI at this location. We reference\n this in META-INF/persistence.xml --\u003e\n \u003cdatasource jndi-name=\"java:jboss/datasources/TasksJsfQuickstartDS\"\n pool-name=\"tasks-jsf-quickstart\" enabled=\"true\"\n use-java-context=\"true\"\u003e\n \u003cconnection-url\u003ejdbc:h2:mem:tasks-jsf-quickstart;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1\u003c/connection-url\u003e\n \u003cdriver\u003eh2\u003c/driver\u003e\n \u003csecurity\u003e\n \u003cuser-name\u003esa\u003c/user-name\u003e\n \u003cpassword\u003esa\u003c/password\u003e\n \u003c/security\u003e\n \u003c/datasource\u003e\n \u003c/datasources\u003e\n ```\n along with the following persistence configuration:\n ```\n \u003cpersistence version=\"2.1\"\n xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xsi:schemaLocation=\"\n http://xmlns.jcp.org/xml/ns/persistence\n http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n \u003cpersistence-unit name=\"primary\"\u003e\n \u003c!-- We use a different datasource for tests, so as to not overwrite\n production data. This is an unmanaged data source, backed by H2, an in memory\n database. Production applications should use a managed datasource. --\u003e\n \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n you can find it in the source at src/test/resources/test-ds.xml --\u003e\n \u003cjta-data-source\u003ejava:jboss/datasources/TasksJsfQuickstartDS\u003c/jta-data-source\u003e\n \u003cproperties\u003e\n \u003c!-- Properties for Hibernate --\u003e\n \u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\" /\u003e\n \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n \u003c/properties\u003e\n \u003c/persistence-unit\u003e\n \u003c/persistence\u003e\n ```\n can be translated to:\n ```\n quarkus.datasource.jdbc.url=jdbc:h2:mem:tasks-jsf-quickstart;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1\n quarkus.datasource.db-kind=h2\n quarkus.datasource.username=sa\n quarkus.datasource.password=sa\n\n quarkus.hibernate-orm.database.generation=drop-and-create\n ```"}],"links":[{"url":"https://quarkus.io/guides/hibernate-orm#persistence-xml","title":"Using Hibernate ORM and Jakarta persistence"}],"Extras":null,"effort":1},"persistence-to-quarkus-00011":{"description":"@Produces cannot annotate an EntityManager","category":"potential","labels":["konveyor.io/source=jakarta-ee","konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/persistence/Resources.java","message":"In JavaEE/JakartaEE, using `@PersistenceContext` was needed in order to inject a data source. Quarkus, on the other hand,\n will create the bean automatically just by correctly setting up your datasource. This makes having a `@Produces` annotation\n on the `EntityManager` illegal in Quarkus.\n \n If you are using a `@Produces` annotation for your EntityManager, and it is not needed after configuring your datasource, remove it and `@Inject` the EntityManager.\n Otherwise, if the producer is still needed, please create a qualification for your produced `EntityManager`, as well as every injection point for the EM.\n \n For instance, you can create an `ExtendedContext` qualifier:\n ```\n @Qualifier\n @Target()\n @Retention(RetentionPolicy.RUNTIME)\n public @interface ExtendedContext \n ```\n and then inject your entity managers:\n ```\n @ExtendedContext\n public EntityManager getEm() \n ```","codeSnip":"  1  package com.redhat.coolstore.persistence;\n  2  \n  3  import javax.enterprise.context.Dependent;\n  4  import javax.enterprise.inject.Produces;\n  5  import javax.persistence.EntityManager;\n  6  import javax.persistence.PersistenceContext;\n  7  \n  8  @Dependent\n  9  public class Resources {\n 10  \n 11      @PersistenceContext\n 12      private EntityManager em;\n 13  \n 14      @Produces\n 15      public EntityManager getEntityManager() {\n 16          return em;\n 17      }\n 18  }\n","lineNumber":5,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/persistence/Resources.java","kind":"Module","name":"javax.persistence.EntityManager","package":"com.redhat.coolstore.persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","message":"In JavaEE/JakartaEE, using `@PersistenceContext` was needed in order to inject a data source. Quarkus, on the other hand,\n will create the bean automatically just by correctly setting up your datasource. This makes having a `@Produces` annotation\n on the `EntityManager` illegal in Quarkus.\n \n If you are using a `@Produces` annotation for your EntityManager, and it is not needed after configuring your datasource, remove it and `@Inject` the EntityManager.\n Otherwise, if the producer is still needed, please create a qualification for your produced `EntityManager`, as well as every injection point for the EM.\n \n For instance, you can create an `ExtendedContext` qualifier:\n ```\n @Qualifier\n @Target()\n @Retention(RetentionPolicy.RUNTIME)\n public @interface ExtendedContext \n ```\n and then inject your entity managers:\n ```\n @ExtendedContext\n public EntityManager getEm() \n ```","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.List;\n  4  import java.util.logging.Logger;\n  5  \n  6  import javax.inject.Inject;\n  7  \n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  import javax.ejb.Stateless;\n 13  import javax.persistence.EntityManager;\n 14  \n 15  import com.redhat.coolstore.model.*;\n 16  \n 17  @Stateless\n 18  public class CatalogService {\n 19  \n 20      @Inject\n 21      Logger log;\n 22  \n 23      @Inject\n 24      private EntityManager em;\n 25  \n 26      public CatalogService() {\n 27      }\n 28  \n 29      public List\u003cCatalogItemEntity\u003e getCatalogItems() {\n 30          CriteriaBuilder cb = em.getCriteriaBuilder();\n 31          CriteriaQuery\u003cCatalogItemEntity\u003e criteria = cb.createQuery(CatalogItemEntity.class);\n 32          Root\u003cCatalogItemEntity\u003e member = criteria.from(CatalogItemEntity.class);\n 33          criteria.select(member);\n 34          return em.createQuery(criteria).getResultList();\n 35      }\n 36  \n 37      public CatalogItemEntity getCatalogItemById(String itemId) {\n 38          return em.find(CatalogItemEntity.class, itemId);\n 39      }\n 40  \n 41      public void updateInventoryItems(String itemId, int deducts) {\n 42          InventoryEntity inventoryEntity = getCatalogItemById(itemId).getInventory();\n 43          int currentQuantity = inventoryEntity.getQuantity();\n 44          inventoryEntity.setQuantity(currentQuantity-deducts);\n 45          em.merge(inventoryEntity);\n 46      }\n 47  \n 48  }\n","lineNumber":13,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","kind":"Module","name":"javax.persistence.EntityManager","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","message":"In JavaEE/JakartaEE, using `@PersistenceContext` was needed in order to inject a data source. Quarkus, on the other hand,\n will create the bean automatically just by correctly setting up your datasource. This makes having a `@Produces` annotation\n on the `EntityManager` illegal in Quarkus.\n \n If you are using a `@Produces` annotation for your EntityManager, and it is not needed after configuring your datasource, remove it and `@Inject` the EntityManager.\n Otherwise, if the producer is still needed, please create a qualification for your produced `EntityManager`, as well as every injection point for the EM.\n \n For instance, you can create an `ExtendedContext` qualifier:\n ```\n @Qualifier\n @Target()\n @Retention(RetentionPolicy.RUNTIME)\n public @interface ExtendedContext \n ```\n and then inject your entity managers:\n ```\n @ExtendedContext\n public EntityManager getEm() \n ```","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.Order;\n  4  import java.util.List;\n  5  import javax.ejb.Stateless;\n  6  import javax.inject.Inject;\n  7  import javax.persistence.EntityManager;\n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  @Stateless\n 13  public class OrderService {\n 14  \n 15    @Inject\n 16    private EntityManager em;\n 17  \n 18    public void save(Order order) {\n 19      em.persist(order);\n 20    }\n 21  \n 22    public List\u003cOrder\u003e getOrders() {\n 23      CriteriaBuilder cb = em.getCriteriaBuilder();\n 24      CriteriaQuery\u003cOrder\u003e criteria = cb.createQuery(Order.class);\n 25      Root\u003cOrder\u003e member = criteria.from(Order.class);\n 26      criteria.select(member);\n 27      return em.createQuery(criteria).getResultList();\n 28    }\n 29  \n 30    public Order getOrderById(long id) {\n 31      return em.find(Order.class, id);\n 32    }\n 33  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","kind":"Module","name":"javax.persistence.EntityManager","package":"com.redhat.coolstore.service"}}],"links":[{"url":"https://quarkus.io/guides/hibernate-orm#setting-up-and-configuring-hibernate-orm","title":"Setting up and configuring Hibernate ORM"},{"url":"https://quarkus.io/guides/hibernate-orm#persistence-xml","title":"Using Hibernate ORM and Jakarta persistence"}],"Extras":null,"effort":1},"remote-ejb-to-quarkus-00000":{"description":"Remote EJBs are not supported in Quarkus","category":"mandatory","labels":["konveyor.io/source=jakarta-ee","konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShippingService.java","message":"Remote EJBs are not supported in Quarkus, and therefore its use must be removed and replaced with REST functionality. In order to do this:\n 1. Replace the `@Remote` annotation on the class with a `@jakarta.ws.rs.Path(\"\u003cendpoint\u003e\")` annotation. An endpoint must be added to the annotation in place of `\u003cendpoint\u003e` to specify the actual path to the REST service.\n 2. Remove `@Stateless` annotations if present. Given that REST services are stateless by nature, it makes it unnecessary.\n 3. For every public method on the EJB being converted, do the following:\n - Annotate the method with `@jakarta.ws.rs.POST`\n - Annotate the method with `@jakarta.ws.rs.Path(\"\u003cendpoint\u003e\")` and give it a proper endpoint path. As a rule of thumb, the method name can be used as endpoint, for instance:\n ```\n @Path(\"/increment\")\n public void increment() \n ```\n - Add `@jakarta.ws.rs.QueryParam(\"\u003cparam-name\u003e\")` to any method parameters if needed, where `\u003cparam-name\u003e` is a name for the parameter.\n 4. Replace the javax dependency imports with respective jakarta dependency.","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.math.BigDecimal;\n  4  import java.math.RoundingMode;\n  5  \n  6  import javax.ejb.Remote;\n  7  import javax.ejb.Stateless;\n  8  \n  9  import com.redhat.coolstore.model.ShoppingCart;\n 10  \n 11  @Stateless\n 12  @Remote\n 13  public class ShippingService implements ShippingServiceRemote {\n 14  \n 15      @Override\n 16      public double calculateShipping(ShoppingCart sc) {\n 17  \n 18          if (sc != null) {\n 19  \n 20              if (sc.getCartItemTotal() \u003e= 0 \u0026\u0026 sc.getCartItemTotal() \u003c 25) {\n 21  \n 22                  return 2.99;\n 23  \n 24              } else if (sc.getCartItemTotal() \u003e= 25 \u0026\u0026 sc.getCartItemTotal() \u003c 50) {\n 25  \n 26                  return 4.99;\n 27  \n 28              } else if (sc.getCartItemTotal() \u003e= 50 \u0026\u0026 sc.getCartItemTotal() \u003c 75) {\n 29  \n 30                  return 6.99;\n 31  \n 32              } else if (sc.getCartItemTotal() \u003e= 75 \u0026\u0026 sc.getCartItemTotal() \u003c 100) {\n 33  \n 34                  return 8.99;\n 35  \n 36              } else if (sc.getCartItemTotal() \u003e= 100 \u0026\u0026 sc.getCartItemTotal() \u003c 10000) {\n 37  \n 38                  return 10.99;\n 39  \n 40              }\n 41  \n 42          }\n 43  \n 44          return 0;\n 45  \n 46      }\n 47  \n 48      @Override\n 49      public double calculateShippingInsurance(ShoppingCart sc) {\n 50  \n 51          if (sc != null) {\n 52  \n 53              if (sc.getCartItemTotal() \u003e= 25 \u0026\u0026 sc.getCartItemTotal() \u003c 100) {\n 54  \n 55                  return getPercentOfTotal(sc.getCartItemTotal(), 0.02);\n 56  \n 57              } else if (sc.getCartItemTotal() \u003e= 100 \u0026\u0026 sc.getCartItemTotal() \u003c 500) {\n 58  \n 59                  return getPercentOfTotal(sc.getCartItemTotal(), 0.015);\n 60  \n 61              } else if (sc.getCartItemTotal() \u003e= 500 \u0026\u0026 sc.getCartItemTotal() \u003c 10000) {\n 62  \n 63                  return getPercentOfTotal(sc.getCartItemTotal(), 0.01);\n 64  \n 65              }\n 66  \n 67          }\n 68  \n 69          return 0;\n 70      }\n 71  \n 72      private static double getPercentOfTotal(double value, double percentOfTotal) {\n 73          return BigDecimal.valueOf(value * percentOfTotal)\n 74                  .setScale(2, RoundingMode.HALF_UP)\n 75                  .doubleValue();\n 76      }\n 77  \n 78  }\n","lineNumber":12,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShippingService.java","kind":"Class","name":"Stateless","package":"com.redhat.coolstore.service"}}],"links":[{"url":"https://jakarta.ee/specifications/restful-ws/","title":"Jakarta RESTful Web Services"}],"Extras":null,"effort":1}},"unmatched":["jms-to-reactive-quarkus-00030"]},{"name":"openjdk11/openjdk8","description":"This ruleset provides analysis with respect to API removals between OpenJDK 8 and 11.","skipped":["java-removals-00000","java-removals-00010","java-removals-00020","java-removals-00030","java-removals-00040","java-removals-00041","java-removals-00050","java-removals-00060","java-removals-00100","java-removals-00110","java-removals-00120","java-removals-00130","java-removals-00140","java-removals-00150","removed-javaee-modules-00000","removed-javaee-modules-00010","removed-javaee-modules-00020"]},{"name":"openjdk17","description":"This ruleset provides analysis regarding deprecated APIs in OpenJDK 21.","skipped":["deprecation-00000","deprecation-00005","deprecation-00010","deprecation-00020","deprecation-00030","dynamic-agents-00000","finalization-deprecation-00000","finalization-deprecation-00010","removed-apis-00000","removed-apis-00005","removed-apis-00010","removed-apis-00015","utf-8-by-default-00000","utf-8-by-default-00010","utf-8-by-default-00020","utf-8-by-default-00030"]},{"name":"openjdk17/openjdk11","description":"This ruleset provides analysis Security Manager classes and methods deprecated between OpenJDK 11 to 17.","skipped":["applet-api-deprecation-00000","lombok-incompatibility-00001","removed-classes-00000","removed-packages-00000","removed-packages-00010","security-manager-deprecation-00000","security-manager-deprecation-00010","security-manager-deprecation-00020","security-manager-deprecation-00030","security-manager-deprecation-00040","security-manager-deprecation-00050","security-manager-deprecation-00060","security-manager-deprecation-00070"]},{"name":"openjdk7/oraclejdk7","description":"This ruleset provides analysis with respect to the migration from OracleJDK to OpenJDK.","skipped":["oracle2openjdk-00000","oracle2openjdk-00001","oracle2openjdk-00002","oracle2openjdk-00003","oracle2openjdk-00004","oracle2openjdk-00005"]},{"name":"openliberty/websphere","description":"This ruleset identifies usage of Java APIs and technologies which are not provided by Open Liberty.","skipped":["ActivitySessionRule","AppProfileRule","AsyncBeansSchedulerRule","BatchFeaturePackRule","DetectEJBEntityBeansXML","DetectJAXRJava","DetectJAXRPC","DetectJavaApplicationDeploymentJava","DetectJavaPortlet","DetectPolicySetAndWsSecurity","DetectRemoteBundleRepositoriesJava","DetectRemoteServicesJava","DetectTransactionPropagationEJBRemote","DetectWSATXML","DetectWSBAJava","DetectWSNotificationJava","DynamicCacheRule","DynamicQueryRule","I18nRule","MTOMRule","SOAPOverJMSRule","ServerName","StartupBeanRule","WOLAMissingClassesRule","WOLARule","WSNotificationRuleJava","WebSphereSchedulerRule","WebSphereSdoRule","WebSphereServletRule","WebSphereUnavailableAPIsAppClient","WebSphereUnavailableAPIsConnectorArchitecture","WebSphereUnavailableAPIsEnterpriseJavaBeans","WebSphereUnavailableAPIsExceptions","WebSphereUnavailableAPIsExtHelper","WebSphereUnavailableAPIsExtensionRegistry","WebSphereUnavailableAPIsISC","WebSphereUnavailableAPIsLoggingAndRAS","WebSphereUnavailableAPIsManagement","WebSphereUnavailableAPIsORB","WebSphereUnavailableAPIsPMI","WebSphereUnavailableAPIsPortal","WebSphereUnavailableAPIsResourceAdapter","WebSphereUnavailableAPIsSIB","WebSphereUnavailableAPIsSMF","WebSphereUnavailableAPIsSecurity","WebSphereUnavailableAPIsTPV","WebSphereUnavailableAPIsUDDI","WebSphereUnavailableAPIsWLM","WebSphereUnavailableAPIsWSADIE","WebSphereUnavailableAPIsWSSecurityHelper","WebSphereUnavailableSPIsRRD","WebSphereUnavailableSSOCookieMethod","WebSphereUnavailableSSOTokenMethod","WebSphereWebServicesGeneratedClassesRule","WebSphereWebServicesRule","WorkAreaRule","XMLFeaturePackRule"]},{"name":"os/windows","description":"This is a ruleset for Windows operating system specific rules while migrating to Linux operating system.","skipped":["os-specific-00001","os-specific-00002"]},{"name":"quarkus/springboot","description":"This ruleset gives hints to migrate from SpringBoot devtools to Quarkus","violations":{"cdi-to-quarkus-00030":{"description":"`beans.xml` descriptor content is ignored","category":"potential","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/src/main/webapp/WEB-INF/beans.xml","message":"\n `beans.xml` descriptor content is ignored and it could be removed from the application. \n Refer to the guide referenced below to check the supported CDI feature in Quarkus.\n ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7      Licensed under the Apache License, Version 2.0 (the \"License\");\n  8      you may not use this file except in compliance with the License.\n  9      You may obtain a copy of the License at\n 10      http://www.apache.org/licenses/LICENSE-2.0\n 11      Unless required by applicable law or agreed to in writing, software\n 12      distributed under the License is distributed on an \"AS IS\" BASIS,\n 13      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14      See the License for the specific language governing permissions and\n 15      limitations under the License.\n 16  --\u003e\n 17  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 18  \u003cbeans xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 19  \t   xsi:schemaLocation=\"\n 20        http://xmlns.jcp.org/xml/ns/javaee\n 21        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n 22  \t   bean-discovery-mode=\"all\"\u003e\n 23  \u003c/beans\u003e\n","lineNumber":18,"variables":{"data":"beans","innerText":"\n","matchingXML":""}}],"Extras":null,"effort":3},"cdi-to-quarkus-00040":{"description":"Producer annotation no longer required","category":"potential","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/persistence/Resources.java","message":"In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier..\n This field could be accessed using a `@Named` getter method instead.\n ","codeSnip":"  1  package com.redhat.coolstore.persistence;\n  2  \n  3  import javax.enterprise.context.Dependent;\n  4  import javax.enterprise.inject.Produces;\n  5  import javax.persistence.EntityManager;\n  6  import javax.persistence.PersistenceContext;\n  7  \n  8  @Dependent\n  9  public class Resources {\n 10  \n 11      @PersistenceContext\n 12      private EntityManager em;\n 13  \n 14      @Produces\n 15      public EntityManager getEntityManager() {\n 16          return em;\n 17      }\n 18  }\n","lineNumber":14,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/persistence/Resources.java","kind":"Method","name":"Produces","package":"com.redhat.coolstore.persistence"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Producers.java","message":"In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier..\n This field could be accessed using a `@Named` getter method instead.\n ","codeSnip":"  1  package com.redhat.coolstore.utils;\n  2  \n  3  import javax.enterprise.inject.Produces;\n  4  import javax.enterprise.inject.spi.InjectionPoint;\n  5  import java.util.logging.Logger;\n  6  \n  7  \n  8  public class Producers {\n  9  \n 10      Logger log = Logger.getLogger(Producers.class.getName());\n 11  \n 12      @Produces\n 13      public Logger produceLog(InjectionPoint injectionPoint) {\n 14          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 15      }\n 16  \n 17  }\n","lineNumber":12,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/utils/Producers.java","kind":"Method","name":"Produces","package":"com.redhat.coolstore.utils"}}],"links":[{"url":"https://quarkus.io/guides/cdi-reference#simplified-producer-method-declaration","title":"Quarkus Simplified Producer Method Declaration"}],"Extras":null,"effort":1},"cdi-to-quarkus-00050":{"description":"Stateless annotation can be replaced with scope","category":"potential","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","message":"Stateless EJBs can be converted to a cdi bean by replacing the `@Stateless` annotation with a scope eg `@ApplicationScoped`\n ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.List;\n  4  import java.util.logging.Logger;\n  5  \n  6  import javax.inject.Inject;\n  7  \n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  import javax.ejb.Stateless;\n 13  import javax.persistence.EntityManager;\n 14  \n 15  import com.redhat.coolstore.model.*;\n 16  \n 17  @Stateless\n 18  public class CatalogService {\n 19  \n 20      @Inject\n 21      Logger log;\n 22  \n 23      @Inject\n 24      private EntityManager em;\n 25  \n 26      public CatalogService() {\n 27      }\n 28  \n 29      public List\u003cCatalogItemEntity\u003e getCatalogItems() {\n 30          CriteriaBuilder cb = em.getCriteriaBuilder();\n 31          CriteriaQuery\u003cCatalogItemEntity\u003e criteria = cb.createQuery(CatalogItemEntity.class);\n 32          Root\u003cCatalogItemEntity\u003e member = criteria.from(CatalogItemEntity.class);\n 33          criteria.select(member);\n 34          return em.createQuery(criteria).getResultList();\n 35      }\n 36  \n 37      public CatalogItemEntity getCatalogItemById(String itemId) {\n 38          return em.find(CatalogItemEntity.class, itemId);\n 39      }\n 40  \n 41      public void updateInventoryItems(String itemId, int deducts) {\n 42          InventoryEntity inventoryEntity = getCatalogItemById(itemId).getInventory();\n 43          int currentQuantity = inventoryEntity.getQuantity();\n 44          inventoryEntity.setQuantity(currentQuantity-deducts);\n 45          em.merge(inventoryEntity);\n 46      }\n 47  \n 48  }\n","lineNumber":17,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/CatalogService.java","kind":"Class","name":"Stateless","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","message":"Stateless EJBs can be converted to a cdi bean by replacing the `@Stateless` annotation with a scope eg `@ApplicationScoped`\n ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.Order;\n  4  import java.util.List;\n  5  import javax.ejb.Stateless;\n  6  import javax.inject.Inject;\n  7  import javax.persistence.EntityManager;\n  8  import javax.persistence.criteria.CriteriaBuilder;\n  9  import javax.persistence.criteria.CriteriaQuery;\n 10  import javax.persistence.criteria.Root;\n 11  \n 12  @Stateless\n 13  public class OrderService {\n 14  \n 15    @Inject\n 16    private EntityManager em;\n 17  \n 18    public void save(Order order) {\n 19      em.persist(order);\n 20    }\n 21  \n 22    public List\u003cOrder\u003e getOrders() {\n 23      CriteriaBuilder cb = em.getCriteriaBuilder();\n 24      CriteriaQuery\u003cOrder\u003e criteria = cb.createQuery(Order.class);\n 25      Root\u003cOrder\u003e member = criteria.from(Order.class);\n 26      criteria.select(member);\n 27      return em.createQuery(criteria).getResultList();\n 28    }\n 29  \n 30    public Order getOrderById(long id) {\n 31      return em.find(Order.class, id);\n 32    }\n 33  }\n","lineNumber":12,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/OrderService.java","kind":"Class","name":"Stateless","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ProductService.java","message":"Stateless EJBs can be converted to a cdi bean by replacing the `@Stateless` annotation with a scope eg `@ApplicationScoped`\n ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import com.redhat.coolstore.model.CatalogItemEntity;\n  4  import com.redhat.coolstore.model.Product;\n  5  import com.redhat.coolstore.utils.Transformers;\n  6  \n  7  import javax.ejb.Stateless;\n  8  import javax.inject.Inject;\n  9  import java.util.List;\n 10  import java.util.stream.Collectors;\n 11  \n 12  import static com.redhat.coolstore.utils.Transformers.toProduct;\n 13  \n 14  @Stateless\n 15  public class ProductService {\n 16  \n 17      @Inject\n 18      CatalogService cm;\n 19  \n 20      public ProductService() {\n 21      }\n 22  \n 23      public List\u003cProduct\u003e getProducts() {\n 24          return cm.getCatalogItems().stream().map(entity -\u003e toProduct(entity)).collect(Collectors.toList());\n 25      }\n 26  \n 27      public Product getProductByItemId(String itemId) {\n 28          CatalogItemEntity entity = cm.getCatalogItemById(itemId);\n 29          if (entity == null)\n 30              return null;\n 31  \n 32          // Return the entity\n 33          return Transformers.toProduct(entity);\n 34      }\n 35  \n 36  }\n","lineNumber":14,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ProductService.java","kind":"Class","name":"Stateless","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShippingService.java","message":"Stateless EJBs can be converted to a cdi bean by replacing the `@Stateless` annotation with a scope eg `@ApplicationScoped`\n ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.math.BigDecimal;\n  4  import java.math.RoundingMode;\n  5  \n  6  import javax.ejb.Remote;\n  7  import javax.ejb.Stateless;\n  8  \n  9  import com.redhat.coolstore.model.ShoppingCart;\n 10  \n 11  @Stateless\n 12  @Remote\n 13  public class ShippingService implements ShippingServiceRemote {\n 14  \n 15      @Override\n 16      public double calculateShipping(ShoppingCart sc) {\n 17  \n 18          if (sc != null) {\n 19  \n 20              if (sc.getCartItemTotal() \u003e= 0 \u0026\u0026 sc.getCartItemTotal() \u003c 25) {\n 21  \n 22                  return 2.99;\n 23  \n 24              } else if (sc.getCartItemTotal() \u003e= 25 \u0026\u0026 sc.getCartItemTotal() \u003c 50) {\n 25  \n 26                  return 4.99;\n 27  \n 28              } else if (sc.getCartItemTotal() \u003e= 50 \u0026\u0026 sc.getCartItemTotal() \u003c 75) {\n 29  \n 30                  return 6.99;\n 31  \n 32              } else if (sc.getCartItemTotal() \u003e= 75 \u0026\u0026 sc.getCartItemTotal() \u003c 100) {\n 33  \n 34                  return 8.99;\n 35  \n 36              } else if (sc.getCartItemTotal() \u003e= 100 \u0026\u0026 sc.getCartItemTotal() \u003c 10000) {\n 37  \n 38                  return 10.99;\n 39  \n 40              }\n 41  \n 42          }\n 43  \n 44          return 0;\n 45  \n 46      }\n 47  \n 48      @Override\n 49      public double calculateShippingInsurance(ShoppingCart sc) {\n 50  \n 51          if (sc != null) {\n 52  \n 53              if (sc.getCartItemTotal() \u003e= 25 \u0026\u0026 sc.getCartItemTotal() \u003c 100) {\n 54  \n 55                  return getPercentOfTotal(sc.getCartItemTotal(), 0.02);\n 56  \n 57              } else if (sc.getCartItemTotal() \u003e= 100 \u0026\u0026 sc.getCartItemTotal() \u003c 500) {\n 58  \n 59                  return getPercentOfTotal(sc.getCartItemTotal(), 0.015);\n 60  \n 61              } else if (sc.getCartItemTotal() \u003e= 500 \u0026\u0026 sc.getCartItemTotal() \u003c 10000) {\n 62  \n 63                  return getPercentOfTotal(sc.getCartItemTotal(), 0.01);\n 64  \n 65              }\n 66  \n 67          }\n 68  \n 69          return 0;\n 70      }\n 71  \n 72      private static double getPercentOfTotal(double value, double percentOfTotal) {\n 73          return BigDecimal.valueOf(value * percentOfTotal)\n 74                  .setScale(2, RoundingMode.HALF_UP)\n 75                  .doubleValue();\n 76      }\n 77  \n 78  }\n","lineNumber":11,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShippingService.java","kind":"Class","name":"Stateless","package":"com.redhat.coolstore.service"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","message":"Stateless EJBs can be converted to a cdi bean by replacing the `@Stateless` annotation with a scope eg `@ApplicationScoped`\n ","codeSnip":"  1  package com.redhat.coolstore.service;\n  2  \n  3  import java.util.logging.Logger;\n  4  import javax.ejb.Stateless;\n  5  import javax.annotation.Resource;\n  6  import javax.inject.Inject;\n  7  import javax.jms.JMSContext;\n  8  import javax.jms.Topic;\n  9  \n 10  import com.redhat.coolstore.model.ShoppingCart;\n 11  import com.redhat.coolstore.utils.Transformers;\n 12  \n 13  @Stateless\n 14  public class ShoppingCartOrderProcessor  {\n 15  \n 16      @Inject\n 17      Logger log;\n 18  \n 19  \n 20      @Inject\n 21      private transient JMSContext context;\n 22  \n 23      @Resource(lookup = \"java:/topic/orders\")\n 24      private Topic ordersTopic;\n 25  \n 26      \n 27    \n 28      public void  process(ShoppingCart cart) {\n 29          log.info(\"Sending order from processor: \");\n 30          context.createProducer().send(ordersTopic, Transformers.shoppingCartToJson(cart));\n 31      }\n 32  \n 33  \n 34  \n 35  }\n","lineNumber":13,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java","kind":"Class","name":"Stateless","package":"com.redhat.coolstore.service"}}],"links":[{"url":"https://quarkus.io/guides/cdi-reference","title":"Quarkus CDI reference"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00010":{"description":"Adopt Quarkus BOM","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"\n \n Use the Quarkus BOM to omit the version of the different Quarkus dependencies. \n Add the following sections to the `pom.xml` file: \n\n ```xml\n \u003cproperties\u003e \n \u003cquarkus.platform.artifact-id\u003equarkus-bom\u003c/quarkus.platform.artifact-id\u003e \n \u003cquarkus.platform.group-id\u003eio.quarkus.platform\u003c/quarkus.platform.group-id\u003e \n \u003cquarkus.platform.version\u003e3.1.0.Final\u003c/quarkus.platform.version\u003e\n \u003c/properties\u003e \n \u003cdependencyManagement\u003e \n \u003cdependencies\u003e \n \u003cdependency\u003e \n \u003cgroupId\u003e$\u003c/groupId\u003e \n \u003cartifactId\u003e$\u003c/artifactId\u003e \n \u003cversion\u003e$\u003c/version\u003e \n \u003ctype\u003epom\u003c/type\u003e \n \u003cscope\u003eimport\u003c/scope\u003e \n \u003c/dependency\u003e \n \u003c/dependencies\u003e \n \u003c/dependencyManagement\u003e \n ```\n Check the latest Quarkus version available from the `Quarkus - Releases` link below.\n \n ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":5,"variables":{"data":"project","innerText":"\n    4.0.0\n    com.redhat.coolstore\n    monolith\n    1.0.0-SNAPSHOT\n    war\n    coolstore-monolith\n    \n        UTF-8\n        yyyyMMdd'T'HHmmss\n        UTF-8\n        true\n    \n    \n        \n            javax\n            javaee-web-api\n            7.0\n            provided\n        \n        \n            javax\n            javaee-api\n            7.0\n            provided\n        \n        \n            org.jboss.spec.javax.jms\n            jboss-jms-api_2.0_spec\n            2.0.0.Final\n        \n        \n            org.flywaydb\n            flyway-core\n            4.1.2\n        \n        \n            org.jboss.spec.javax.rmi\n            jboss-rmi-api_1.0_spec\n            1.0.2.Final\n        \n    \n    \n        ROOT\n        \n            \n                maven-compiler-plugin\n                3.0\n                \n                    ${project.encoding}\n                    1.8\n                    1.8\n                \n            \n            \n                org.apache.maven.plugins\n                maven-war-plugin\n                3.2.0\n            \n        \n    \n    \n\n    \n","matchingXML":"\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\u003cartifactId\u003emonolith\u003c/artifactId\u003e\u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003ecoolstore-monolith\u003c/name\u003e\u003cproperties\u003e\u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\u003cmaven.build.timestamp.format\u003eyyyyMMdd\u0026#39;T\u0026#39;HHmmss\u003c/maven.build.timestamp.format\u003e\u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\u003c/properties\u003e\u003cdependencies\u003e\u003cdependency\u003e\u003cgroupId\u003ejavax\u003c/groupId\u003e\u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\u003cversion\u003e7.0\u003c/version\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003ejavax\u003c/groupId\u003e\u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\u003cversion\u003e7.0\u003c/version\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\u003cversion\u003e2.0.0.Final\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\u003cversion\u003e4.1.2\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\u003cversion\u003e1.0.2.Final\u003c/version\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003cfinalName\u003eROOT\u003c/finalName\u003e\u003cplugins\u003e\u003cplugin\u003e\u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\u003cversion\u003e3.0\u003c/version\u003e\u003cconfiguration\u003e\u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\u003csource\u003e1.8\u003c/source\u003e\u003ctarget\u003e1.8\u003c/target\u003e\u003c/configuration\u003e\u003c/plugin\u003e\u003cplugin\u003e\u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\u003cversion\u003e3.2.0\u003c/version\u003e\u003c/plugin\u003e\u003c/plugins\u003e\u003c/build\u003e\u003cprofiles\u003e\u003c!-- TODO: Add OpenShift profile here --\u003e\u003c/profiles\u003e"}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"},{"url":"https://quarkus.io/blog/tag/release/","title":"Quarkus - Releases"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00020":{"description":"Adopt Quarkus Maven plugin","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"\n \n Use the Quarkus Maven plugin adding the following sections to the `pom.xml` file: \n\n ```xml\n \u003cproperties\u003e \n \u003cquarkus.platform.group-id\u003eio.quarkus.platform\u003c/quarkus.platform.group-id\u003e \n \u003cquarkus.platform.version\u003e3.1.0.Final\u003c/quarkus.platform.version\u003e\n \u003c/properties\u003e \n \u003cbuild\u003e\n \u003cplugins\u003e\n \u003cplugin\u003e\n \u003cgroupId\u003e$\u003c/groupId\u003e\n \u003cartifactId\u003equarkus-maven-plugin\u003c/artifactId\u003e\n \u003cversion\u003e$\u003c/version\u003e\n \u003cextensions\u003etrue\u003c/extensions\u003e\n \u003cexecutions\u003e\n \u003cexecution\u003e\n \u003cgoals\u003e\n \u003cgoal\u003ebuild\u003c/goal\u003e\n \u003cgoal\u003egenerate-code\u003c/goal\u003e\n \u003cgoal\u003egenerate-code-tests\u003c/goal\u003e\n \u003c/goals\u003e\n \u003c/execution\u003e\n \u003c/executions\u003e\n \u003c/plugin\u003e\n \u003c/plugins\u003e\n \u003c/build\u003e\n ```\n \n ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":5,"variables":{"data":"project","innerText":"\n    4.0.0\n    com.redhat.coolstore\n    monolith\n    1.0.0-SNAPSHOT\n    war\n    coolstore-monolith\n    \n        UTF-8\n        yyyyMMdd'T'HHmmss\n        UTF-8\n        true\n    \n    \n        \n            javax\n            javaee-web-api\n            7.0\n            provided\n        \n        \n            javax\n            javaee-api\n            7.0\n            provided\n        \n        \n            org.jboss.spec.javax.jms\n            jboss-jms-api_2.0_spec\n            2.0.0.Final\n        \n        \n            org.flywaydb\n            flyway-core\n            4.1.2\n        \n        \n            org.jboss.spec.javax.rmi\n            jboss-rmi-api_1.0_spec\n            1.0.2.Final\n        \n    \n    \n        ROOT\n        \n            \n                maven-compiler-plugin\n                3.0\n                \n                    ${project.encoding}\n                    1.8\n                    1.8\n                \n            \n            \n                org.apache.maven.plugins\n                maven-war-plugin\n                3.2.0\n            \n        \n    \n    \n\n    \n","matchingXML":"\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\u003cartifactId\u003emonolith\u003c/artifactId\u003e\u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003ecoolstore-monolith\u003c/name\u003e\u003cproperties\u003e\u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\u003cmaven.build.timestamp.format\u003eyyyyMMdd\u0026#39;T\u0026#39;HHmmss\u003c/maven.build.timestamp.format\u003e\u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\u003c/properties\u003e\u003cdependencies\u003e\u003cdependency\u003e\u003cgroupId\u003ejavax\u003c/groupId\u003e\u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\u003cversion\u003e7.0\u003c/version\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003ejavax\u003c/groupId\u003e\u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\u003cversion\u003e7.0\u003c/version\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\u003cversion\u003e2.0.0.Final\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\u003cversion\u003e4.1.2\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\u003cversion\u003e1.0.2.Final\u003c/version\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003cfinalName\u003eROOT\u003c/finalName\u003e\u003cplugins\u003e\u003cplugin\u003e\u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\u003cversion\u003e3.0\u003c/version\u003e\u003cconfiguration\u003e\u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\u003csource\u003e1.8\u003c/source\u003e\u003ctarget\u003e1.8\u003c/target\u003e\u003c/configuration\u003e\u003c/plugin\u003e\u003cplugin\u003e\u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\u003cversion\u003e3.2.0\u003c/version\u003e\u003c/plugin\u003e\u003c/plugins\u003e\u003c/build\u003e\u003cprofiles\u003e\u003c!-- TODO: Add OpenShift profile here --\u003e\u003c/profiles\u003e"}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00030":{"description":"Adopt Maven Compiler plugin","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"\n \n Use the Maven Compiler plugin adding the following sections to the `pom.xml` file: \n\n ```xml\n \u003cproperties\u003e \n \u003ccompiler-plugin.version\u003e3.10.1\u003c/compiler-plugin.version\u003e\n \u003cmaven.compiler.release\u003e11\u003c/maven.compiler.release\u003e\n \u003c/properties\u003e \n \u003cbuild\u003e\n \u003cplugins\u003e\n \u003cplugin\u003e\n \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n \u003cversion\u003e$\u003c/version\u003e\n \u003cconfiguration\u003e\n \u003ccompilerArgs\u003e\n \u003carg\u003e-parameters\u003c/arg\u003e\n \u003c/compilerArgs\u003e\n \u003c/configuration\u003e\n \u003c/plugin\u003e\n \u003c/plugins\u003e\n \u003c/build\u003e\n ```\n \n ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":5,"variables":{"data":"project","innerText":"\n    4.0.0\n    com.redhat.coolstore\n    monolith\n    1.0.0-SNAPSHOT\n    war\n    coolstore-monolith\n    \n        UTF-8\n        yyyyMMdd'T'HHmmss\n        UTF-8\n        true\n    \n    \n        \n            javax\n            javaee-web-api\n            7.0\n            provided\n        \n        \n            javax\n            javaee-api\n            7.0\n            provided\n        \n        \n            org.jboss.spec.javax.jms\n            jboss-jms-api_2.0_spec\n            2.0.0.Final\n        \n        \n            org.flywaydb\n            flyway-core\n            4.1.2\n        \n        \n            org.jboss.spec.javax.rmi\n            jboss-rmi-api_1.0_spec\n            1.0.2.Final\n        \n    \n    \n        ROOT\n        \n            \n                maven-compiler-plugin\n                3.0\n                \n                    ${project.encoding}\n                    1.8\n                    1.8\n                \n            \n            \n                org.apache.maven.plugins\n                maven-war-plugin\n                3.2.0\n            \n        \n    \n    \n\n    \n","matchingXML":"\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\u003cartifactId\u003emonolith\u003c/artifactId\u003e\u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003ecoolstore-monolith\u003c/name\u003e\u003cproperties\u003e\u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\u003cmaven.build.timestamp.format\u003eyyyyMMdd\u0026#39;T\u0026#39;HHmmss\u003c/maven.build.timestamp.format\u003e\u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\u003c/properties\u003e\u003cdependencies\u003e\u003cdependency\u003e\u003cgroupId\u003ejavax\u003c/groupId\u003e\u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\u003cversion\u003e7.0\u003c/version\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003ejavax\u003c/groupId\u003e\u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\u003cversion\u003e7.0\u003c/version\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\u003cversion\u003e2.0.0.Final\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\u003cversion\u003e4.1.2\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\u003cversion\u003e1.0.2.Final\u003c/version\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003cfinalName\u003eROOT\u003c/finalName\u003e\u003cplugins\u003e\u003cplugin\u003e\u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\u003cversion\u003e3.0\u003c/version\u003e\u003cconfiguration\u003e\u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\u003csource\u003e1.8\u003c/source\u003e\u003ctarget\u003e1.8\u003c/target\u003e\u003c/configuration\u003e\u003c/plugin\u003e\u003cplugin\u003e\u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\u003cversion\u003e3.2.0\u003c/version\u003e\u003c/plugin\u003e\u003c/plugins\u003e\u003c/build\u003e\u003cprofiles\u003e\u003c!-- TODO: Add OpenShift profile here --\u003e\u003c/profiles\u003e"}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00040":{"description":"Adopt Maven Surefire plugin","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"\n \n Use the Maven Surefire plugin adding the following sections to the `pom.xml` file: \n\n ```xml\n \u003cproperties\u003e \n \u003csurefire-plugin.version\u003e3.0.0\u003c/compiler-plugin.version\u003e\n \u003c/properties\u003e \n \u003cbuild\u003e\n \u003cplugins\u003e\n \u003cplugin\u003e\n \u003cartifactId\u003emaven-surefire-plugin\u003c/artifactId\u003e\n \u003cversion\u003e$\u003c/version\u003e\n \u003cconfiguration\u003e\n \u003csystemPropertyVariables\u003e\n \u003cjava.util.logging.manager\u003eorg.jboss.logmanager.LogManager\u003c/java.util.logging.manager\u003e\n \u003cmaven.home\u003e$\u003c/maven.home\u003e\n \u003c/systemPropertyVariables\u003e\n \u003c/configuration\u003e\n \u003c/plugin\u003e\n \u003c/plugins\u003e\n \u003c/build\u003e\n ```\n \n ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":5,"variables":{"data":"project","innerText":"\n    4.0.0\n    com.redhat.coolstore\n    monolith\n    1.0.0-SNAPSHOT\n    war\n    coolstore-monolith\n    \n        UTF-8\n        yyyyMMdd'T'HHmmss\n        UTF-8\n        true\n    \n    \n        \n            javax\n            javaee-web-api\n            7.0\n            provided\n        \n        \n            javax\n            javaee-api\n            7.0\n            provided\n        \n        \n            org.jboss.spec.javax.jms\n            jboss-jms-api_2.0_spec\n            2.0.0.Final\n        \n        \n            org.flywaydb\n            flyway-core\n            4.1.2\n        \n        \n            org.jboss.spec.javax.rmi\n            jboss-rmi-api_1.0_spec\n            1.0.2.Final\n        \n    \n    \n        ROOT\n        \n            \n                maven-compiler-plugin\n                3.0\n                \n                    ${project.encoding}\n                    1.8\n                    1.8\n                \n            \n            \n                org.apache.maven.plugins\n                maven-war-plugin\n                3.2.0\n            \n        \n    \n    \n\n    \n","matchingXML":"\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\u003cartifactId\u003emonolith\u003c/artifactId\u003e\u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003ecoolstore-monolith\u003c/name\u003e\u003cproperties\u003e\u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\u003cmaven.build.timestamp.format\u003eyyyyMMdd\u0026#39;T\u0026#39;HHmmss\u003c/maven.build.timestamp.format\u003e\u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\u003c/properties\u003e\u003cdependencies\u003e\u003cdependency\u003e\u003cgroupId\u003ejavax\u003c/groupId\u003e\u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\u003cversion\u003e7.0\u003c/version\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003ejavax\u003c/groupId\u003e\u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\u003cversion\u003e7.0\u003c/version\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\u003cversion\u003e2.0.0.Final\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\u003cversion\u003e4.1.2\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\u003cversion\u003e1.0.2.Final\u003c/version\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003cfinalName\u003eROOT\u003c/finalName\u003e\u003cplugins\u003e\u003cplugin\u003e\u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\u003cversion\u003e3.0\u003c/version\u003e\u003cconfiguration\u003e\u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\u003csource\u003e1.8\u003c/source\u003e\u003ctarget\u003e1.8\u003c/target\u003e\u003c/configuration\u003e\u003c/plugin\u003e\u003cplugin\u003e\u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\u003cversion\u003e3.2.0\u003c/version\u003e\u003c/plugin\u003e\u003c/plugins\u003e\u003c/build\u003e\u003cprofiles\u003e\u003c!-- TODO: Add OpenShift profile here --\u003e\u003c/profiles\u003e"}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00050":{"description":"Adopt Maven Failsafe plugin","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"\n \n Use the Maven Failsafe plugin adding the following sections to the `pom.xml` file: \n\n ```xml\n \u003cproperties\u003e \n \u003csurefire-plugin.version\u003e3.0.0\u003c/compiler-plugin.version\u003e\n \u003c/properties\u003e \n \u003cbuild\u003e\n \u003cplugins\u003e\n \u003cplugin\u003e\n \u003cartifactId\u003emaven-failsafe-plugin\u003c/artifactId\u003e\n \u003cversion\u003e$\u003c/version\u003e\n \u003cexecutions\u003e\n \u003cexecution\u003e\n \u003cgoals\u003e\n \u003cgoals\u003eintegration-test\u003c/goal\u003e\n \u003cgoals\u003everify\u003c/goal\u003e\n \u003c/goals\u003e\n \u003cconfiguration\u003e\n \u003csystemPropertyVariables\u003e\n \u003cnative.image.path\u003e$/$-runner\u003c/native.image.path\u003e\n \u003cjava.util.logging.manager\u003eorg.jboss.logmanager.LogManager\u003c/java.util.logging.manager\u003e\n \u003cmaven.home\u003e$\u003c/maven.home\u003e\n \u003c/systemPropertyVariables\u003e\n \u003c/configuration\u003e\n \u003c/execution\u003e\n \u003c/executions\u003e\n \u003c/plugin\u003e\n \u003c/plugins\u003e\n \u003c/build\u003e\n ```\n \n ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":5,"variables":{"data":"project","innerText":"\n    4.0.0\n    com.redhat.coolstore\n    monolith\n    1.0.0-SNAPSHOT\n    war\n    coolstore-monolith\n    \n        UTF-8\n        yyyyMMdd'T'HHmmss\n        UTF-8\n        true\n    \n    \n        \n            javax\n            javaee-web-api\n            7.0\n            provided\n        \n        \n            javax\n            javaee-api\n            7.0\n            provided\n        \n        \n            org.jboss.spec.javax.jms\n            jboss-jms-api_2.0_spec\n            2.0.0.Final\n        \n        \n            org.flywaydb\n            flyway-core\n            4.1.2\n        \n        \n            org.jboss.spec.javax.rmi\n            jboss-rmi-api_1.0_spec\n            1.0.2.Final\n        \n    \n    \n        ROOT\n        \n            \n                maven-compiler-plugin\n                3.0\n                \n                    ${project.encoding}\n                    1.8\n                    1.8\n                \n            \n            \n                org.apache.maven.plugins\n                maven-war-plugin\n                3.2.0\n            \n        \n    \n    \n\n    \n","matchingXML":"\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\u003cartifactId\u003emonolith\u003c/artifactId\u003e\u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003ecoolstore-monolith\u003c/name\u003e\u003cproperties\u003e\u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\u003cmaven.build.timestamp.format\u003eyyyyMMdd\u0026#39;T\u0026#39;HHmmss\u003c/maven.build.timestamp.format\u003e\u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\u003c/properties\u003e\u003cdependencies\u003e\u003cdependency\u003e\u003cgroupId\u003ejavax\u003c/groupId\u003e\u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\u003cversion\u003e7.0\u003c/version\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003ejavax\u003c/groupId\u003e\u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\u003cversion\u003e7.0\u003c/version\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\u003cversion\u003e2.0.0.Final\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\u003cversion\u003e4.1.2\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\u003cversion\u003e1.0.2.Final\u003c/version\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003cfinalName\u003eROOT\u003c/finalName\u003e\u003cplugins\u003e\u003cplugin\u003e\u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\u003cversion\u003e3.0\u003c/version\u003e\u003cconfiguration\u003e\u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\u003csource\u003e1.8\u003c/source\u003e\u003ctarget\u003e1.8\u003c/target\u003e\u003c/configuration\u003e\u003c/plugin\u003e\u003cplugin\u003e\u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\u003cversion\u003e3.2.0\u003c/version\u003e\u003c/plugin\u003e\u003c/plugins\u003e\u003c/build\u003e\u003cprofiles\u003e\u003c!-- TODO: Add OpenShift profile here --\u003e\u003c/profiles\u003e"}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00060":{"description":"Add Maven profile to run the Quarkus native build","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"\n \n Leverage a Maven profile to run the Quarkus native build adding the following section to the `pom.xml` file: \n\n ```xml\n \u003cprofiles\u003e\n \u003cprofile\u003e\n \u003cid\u003enative\u003c/id\u003e\n \u003cactivation\u003e\n \u003cproperty\u003e\n \u003cname\u003enative\u003c/name\u003e\n \u003c/property\u003e\n \u003c/activation\u003e\n \u003cproperties\u003e\n \u003cskipITs\u003efalse\u003c/skipITs\u003e\n \u003cquarkus.package.type\u003enative\u003c/quarkus.package.type\u003e\n \u003c/properties\u003e\n \u003c/profile\u003e\n \u003c/profiles\u003e\n ```\n \n ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":5,"variables":{"data":"project","innerText":"\n    4.0.0\n    com.redhat.coolstore\n    monolith\n    1.0.0-SNAPSHOT\n    war\n    coolstore-monolith\n    \n        UTF-8\n        yyyyMMdd'T'HHmmss\n        UTF-8\n        true\n    \n    \n        \n            javax\n            javaee-web-api\n            7.0\n            provided\n        \n        \n            javax\n            javaee-api\n            7.0\n            provided\n        \n        \n            org.jboss.spec.javax.jms\n            jboss-jms-api_2.0_spec\n            2.0.0.Final\n        \n        \n            org.flywaydb\n            flyway-core\n            4.1.2\n        \n        \n            org.jboss.spec.javax.rmi\n            jboss-rmi-api_1.0_spec\n            1.0.2.Final\n        \n    \n    \n        ROOT\n        \n            \n                maven-compiler-plugin\n                3.0\n                \n                    ${project.encoding}\n                    1.8\n                    1.8\n                \n            \n            \n                org.apache.maven.plugins\n                maven-war-plugin\n                3.2.0\n            \n        \n    \n    \n\n    \n","matchingXML":"\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\u003cartifactId\u003emonolith\u003c/artifactId\u003e\u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003ecoolstore-monolith\u003c/name\u003e\u003cproperties\u003e\u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\u003cmaven.build.timestamp.format\u003eyyyyMMdd\u0026#39;T\u0026#39;HHmmss\u003c/maven.build.timestamp.format\u003e\u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\u003c/properties\u003e\u003cdependencies\u003e\u003cdependency\u003e\u003cgroupId\u003ejavax\u003c/groupId\u003e\u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\u003cversion\u003e7.0\u003c/version\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003ejavax\u003c/groupId\u003e\u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\u003cversion\u003e7.0\u003c/version\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\u003cversion\u003e2.0.0.Final\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\u003cversion\u003e4.1.2\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\u003cversion\u003e1.0.2.Final\u003c/version\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003cfinalName\u003eROOT\u003c/finalName\u003e\u003cplugins\u003e\u003cplugin\u003e\u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\u003cversion\u003e3.0\u003c/version\u003e\u003cconfiguration\u003e\u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\u003csource\u003e1.8\u003c/source\u003e\u003ctarget\u003e1.8\u003c/target\u003e\u003c/configuration\u003e\u003c/plugin\u003e\u003cplugin\u003e\u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\u003cversion\u003e3.2.0\u003c/version\u003e\u003c/plugin\u003e\u003c/plugins\u003e\u003c/build\u003e\u003cprofiles\u003e\u003c!-- TODO: Add OpenShift profile here --\u003e\u003c/profiles\u003e"}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"}],"Extras":null,"effort":1},"jaxrs-to-quarkus-00020":{"description":"JAX-RS activation is no longer necessary","category":"optional","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/RestApplication.java","message":"\n JAX-RS activation is no longer necessary. You can set a root path like this but you don't have to.\n ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import javax.ws.rs.ApplicationPath;\n  4  import javax.ws.rs.core.Application;\n  5  \n  6  \n  7  @ApplicationPath(\"/services\")\n  8  public class RestApplication extends Application {\n  9  \n 10  }\n","lineNumber":7,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/RestApplication.java","kind":"Class","name":"ApplicationPath","package":"com.redhat.coolstore.rest"}},{"uri":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/RestApplication.java","message":"\n JAX-RS activation is no longer necessary. You can set a root path like this but you don't have to.\n ","codeSnip":"  1  package com.redhat.coolstore.rest;\n  2  \n  3  import javax.ws.rs.ApplicationPath;\n  4  import javax.ws.rs.core.Application;\n  5  \n  6  \n  7  @ApplicationPath(\"/services\")\n  8  public class RestApplication extends Application {\n  9  \n 10  }\n","lineNumber":8,"variables":{"file":"file:///tmp/source-code/src/main/java/com/redhat/coolstore/rest/RestApplication.java","kind":"Class","name":"RestApplication","package":"com.redhat.coolstore.rest"}}],"links":[{"url":"https://quarkus.io/guides/resteasy-reactive#declaring-endpoints-uri-mapping","title":"Quarkus - Guide"}],"Extras":null,"effort":1},"quarkus-flyway-00000":{"description":"Replace the 'flyway-core' dependency with Quarkus 'quarkus-flyway' extension","category":"mandatory","labels":["konveyor.io/source=flyway","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"\n Replace the `org.flywaydb:flyway-core` dependency with the Quarkus dependency `io.quarkus:quarkus-flyway` \n Further information in the link below.\n ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":36,"variables":{"name":"org.flywaydb.flyway-core","version":"4.1.2"}}],"Extras":null,"effort":1},"quarkus-flyway-00010":{"description":"Replace the 'flyway-core' dependency with Quarkus 'quarkus-flyway' extension","category":"mandatory","labels":["konveyor.io/source=flyway","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///tmp/source-code/pom.xml","message":"\n Replace the `org.flywaydb:flyway-core` dependency with the Quarkus dependency `io.quarkus:quarkus-flyway` \n Further information in the link below.\n ","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003cproject \n  3      xmlns=\"http://maven.apache.org/POM/4.0.0\" \n  4      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n  5      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  6      \u003cgroupId\u003ecom.redhat.coolstore\u003c/groupId\u003e\n  7      \u003cartifactId\u003emonolith\u003c/artifactId\u003e\n  8      \u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n  9      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 10      \u003cname\u003ecoolstore-monolith\u003c/name\u003e\n 11      \u003cproperties\u003e\n 12          \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n 13          \u003cmaven.build.timestamp.format\u003eyyyyMMdd'T'HHmmss\u003c/maven.build.timestamp.format\u003e\n 14          \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e\n 15          \u003cmaven.test.skip\u003etrue\u003c/maven.test.skip\u003e\n 16      \u003c/properties\u003e\n 17      \u003cdependencies\u003e\n 18          \u003cdependency\u003e\n 19              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 20              \u003cartifactId\u003ejavaee-web-api\u003c/artifactId\u003e\n 21              \u003cversion\u003e7.0\u003c/version\u003e\n 22              \u003cscope\u003eprovided\u003c/scope\u003e\n 23          \u003c/dependency\u003e\n 24          \u003cdependency\u003e\n 25              \u003cgroupId\u003ejavax\u003c/groupId\u003e\n 26              \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e\n 27              \u003cversion\u003e7.0\u003c/version\u003e\n 28              \u003cscope\u003eprovided\u003c/scope\u003e\n 29          \u003c/dependency\u003e\n 30          \u003cdependency\u003e\n 31              \u003cgroupId\u003eorg.jboss.spec.javax.jms\u003c/groupId\u003e\n 32              \u003cartifactId\u003ejboss-jms-api_2.0_spec\u003c/artifactId\u003e\n 33              \u003cversion\u003e2.0.0.Final\u003c/version\u003e\n 34          \u003c/dependency\u003e\n 35          \u003cdependency\u003e\n 36              \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e\n 37              \u003cartifactId\u003eflyway-core\u003c/artifactId\u003e\n 38              \u003cversion\u003e4.1.2\u003c/version\u003e\n 39          \u003c/dependency\u003e\n 40          \u003cdependency\u003e\n 41              \u003cgroupId\u003eorg.jboss.spec.javax.rmi\u003c/groupId\u003e\n 42              \u003cartifactId\u003ejboss-rmi-api_1.0_spec\u003c/artifactId\u003e\n 43              \u003cversion\u003e1.0.2.Final\u003c/version\u003e\n 44          \u003c/dependency\u003e\n 45      \u003c/dependencies\u003e\n 46      \u003cbuild\u003e\n 47          \u003cfinalName\u003eROOT\u003c/finalName\u003e\n 48          \u003cplugins\u003e\n 49              \u003cplugin\u003e\n 50                  \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n 51                  \u003cversion\u003e3.0\u003c/version\u003e\n 52                  \u003cconfiguration\u003e\n 53                      \u003cencoding\u003e${project.encoding}\u003c/encoding\u003e\n 54                      \u003csource\u003e1.8\u003c/source\u003e\n 55                      \u003ctarget\u003e1.8\u003c/target\u003e\n 56                  \u003c/configuration\u003e\n 57              \u003c/plugin\u003e\n 58              \u003cplugin\u003e\n 59                  \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n 60                  \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e\n 61                  \u003cversion\u003e3.2.0\u003c/version\u003e\n 62              \u003c/plugin\u003e\n 63          \u003c/plugins\u003e\n 64      \u003c/build\u003e\n 65      \u003cprofiles\u003e\n 66  \u003c!-- TODO: Add OpenShift profile here --\u003e\n 67      \u003c/profiles\u003e\n 68  \u003c/project\u003e\n","lineNumber":36,"variables":{"name":"org.flywaydb.flyway-core","version":"4.1.2"}}],"links":[{"url":"https://quarkus.io/guides/flyway","title":"Quarkus - Guide"}],"Extras":null,"effort":1}},"unmatched":["cdi-to-quarkus-00000","cdi-to-quarkus-00020","dependency-removal-for-quarkus-00000","javaee-faces-to-quarkus-00000","javaee-pom-to-quarkus-00070","javaee-pom-to-quarkus-00080","jaxrs-to-quarkus-00000","jaxrs-to-quarkus-00010","quarkus-agroal-00000","quarkus-agroal-00010","quarkus-amazon-dynamodb-00000","quarkus-amazon-dynamodb-00010","quarkus-amazon-iam-00000","quarkus-amazon-iam-00010","quarkus-amazon-kms-00000","quarkus-amazon-kms-00010","quarkus-amazon-lambda-http-00000","quarkus-amazon-lambda-http-00010","quarkus-amazon-lambda-rest-00000","quarkus-amazon-lambda-rest-00010","quarkus-amazon-lambda-xray-00000","quarkus-amazon-lambda-xray-00010","quarkus-amazon-s3-00000","quarkus-amazon-s3-00010","quarkus-amazon-ses-00000","quarkus-amazon-ses-00010","quarkus-amazon-sns-00000","quarkus-amazon-sns-00010","quarkus-amazon-sqs-00000","quarkus-amazon-sqs-00010","quarkus-amazon-ssm-00000","quarkus-amazon-ssm-00010","quarkus-apicurio-registry-avro-00000","quarkus-apicurio-registry-avro-00010","quarkus-artemis-jms-00000","quarkus-artemis-jms-00010","quarkus-avro-00000","quarkus-avro-00010","quarkus-config-yaml-00000","quarkus-config-yaml-00010","quarkus-elytron-security-jdbc-00000","quarkus-elytron-security-jdbc-00010","quarkus-elytron-security-ldap-00000","quarkus-elytron-security-ldap-00010","quarkus-elytron-security-oauth2-00000","quarkus-elytron-security-oauth2-00010","quarkus-hibernate-envers-00000","quarkus-hibernate-envers-00010","quarkus-hibernate-reactive-00000","quarkus-hibernate-reactive-00010","quarkus-hibernate-search-orm-elasticsearch-aws-00000","quarkus-hibernate-search-orm-elasticsearch-aws-00010","quarkus-hibernate-validator-00000","quarkus-hibernate-validator-00010","quarkus-jdbc-db2-00000","quarkus-jdbc-db2-00010","quarkus-jdbc-derby-00000","quarkus-jdbc-derby-00010","quarkus-jdbc-mariadb-00000","quarkus-jdbc-mariadb-00010","quarkus-jdbc-mysql-00000","quarkus-jdbc-mysql-00010","quarkus-jdbc-oracle-00000","quarkus-jdbc-oracle-00010","quarkus-jdbc-postgresql-00000","quarkus-jdbc-postgresql-00010","quarkus-jsonb-00000","quarkus-jsonb-00010","quarkus-jsonp-00000","quarkus-jsonp-00010","quarkus-kafka-client-00000","quarkus-kafka-client-00010","quarkus-kafka-streams-00000","quarkus-kafka-streams-00010","quarkus-keycloak-admin-client-00000","quarkus-keycloak-admin-client-00010","quarkus-kubernetes-client-00000","quarkus-kubernetes-client-00010","quarkus-liquibase-00000","quarkus-liquibase-00010","quarkus-liquibase-mongodb-00000","quarkus-liquibase-mongodb-00010","quarkus-logging-gelf-00000","quarkus-logging-gelf-00010","quarkus-logging-sentry-00000","quarkus-logging-sentry-00010","quarkus-micrometer-registry-prometheus-00000","quarkus-micrometer-registry-prometheus-00010","quarkus-narayana-jta-00000","quarkus-narayana-jta-00010","quarkus-narayana-lra-00000","quarkus-narayana-lra-00010","quarkus-narayana-stm-00000","quarkus-narayana-stm-00010","quarkus-openshift-client-00000","quarkus-openshift-client-00010","quarkus-opentelemetry-exporter-jaeger-00000","quarkus-opentelemetry-exporter-jaeger-00010","quarkus-opentelemetry-exporter-otlp-00000","quarkus-opentelemetry-exporter-otlp-00010","quarkus-picocli-00000","quarkus-picocli-00010","quarkus-resteasy-multipart-00000","quarkus-resteasy-multipart-00010","springboot-actuator-to-quarkus-0100","springboot-actuator-to-quarkus-0200","springboot-annotations-to-quarkus-00000","springboot-cache-to-quarkus-00000","springboot-cloud-config-client-to-quarkus-00000","springboot-devtools-to-quarkus-0000","springboot-di-to-quarkus-00000","springboot-di-to-quarkus-00001","springboot-di-to-quarkus-00002","springboot-generic-catchall-00100","springboot-integration-to-quarkus-00010","springboot-integration-to-quarkus-00020","springboot-jmx-to-quarkus-00000","springboot-jmx-to-quarkus-00001","springboot-jpa-to-quarkus-00000","springboot-metrics-to-quarkus-0100","springboot-metrics-to-quarkus-0200","springboot-metrics-to-quarkus-0300","springboot-parent-pom-to-quarkus-00000","springboot-plugins-to-quarkus-0000","springboot-properties-to-quarkus-00000","springboot-properties-to-quarkus-00001","springboot-properties-to-quarkus-00002","springboot-properties-to-quarkus-00003","springboot-properties-to-quarkus-00004","springboot-properties-to-quarkus-00005","springboot-properties-to-quarkus-00006","springboot-scheduled-to-quarkus-00000","springboot-security-to-quarkus-00000","springboot-shell-to-quarkus-00000","springboot-web-to-quarkus-00000","springboot-web-to-quarkus-00010","springboot-webmvc-to-quarkus-00000","springboot-webmvc-to-quarkus-01000"]},{"name":"rhr/springboot","description":"Verify the version of the Spring Boot framework is compatible with those supported by Red Hat Runtimes","skipped":["springboot-00001","springboot-00002","springboot-associated-00001","springboot-associated-00002","springboot-associated-00003","springboot-associated-00004","springboot-associated-00005","springboot-associated-00006","springboot-associated-00007","springboot-associated-00008","springboot-associated-00009","springboot-associated-00010","springboot-associated-00011","springboot-associated-00012","springboot-associated-00013","springboot-associated-00014","springboot-associated-00015"]},{"name":"technology-usage","description":"This ruleset provides analysis of logging libraries.","tags":["Bean=EJB XML","CDI","Clustering Web Session","Clustering=Web Session","Connect=EJB XML","Execute=CDI","Execute=Java EE JSON-P","Inversion of Control=CDI","Java EE JSON-P","Java EE=CDI","Java EE=EJB XML","Java EE=JPA XML","Java EE=Java EE JSON-P","Java EE=Web Session","Persistence=JPA XML","Processing=Java EE JSON-P","Store=JPA XML","Sustain=Web Session"],"unmatched":["3rd-party-01000","3rd-party-02000","3rd-party-03000","3rd-party-04000","3rd-party-05000","3rd-party-06000","3rd-party-07000","3rd-party-08000","3rd-party-09000","3rd-party-10000","3rd-party-11000","3rd-party-12000","3rd-party-13000","3rd-party-14000","3rd-party-15000","3rd-party-16000","3rd-party-17000","3rd-party-18000","3rd-party-19000","clustering-00001","configuration-management-0100","configuration-management-0200","configuration-management-0300","configuration-management-0400","configuration-management-0500","configuration-management-technology-usage-0100","configuration-management-technology-usage-0200","configuration-management-technology-usage-0300","connect-01400","connect-01500","connect-01600","connect-01700","connect-01800","connect-01900","connect-02000","connect-02100","connect-02200","connect-02300","connect-02400","connect-02500","connect-02600","connect-02700","connect-02800","database-01400","database-01500","database-01600","database-01700","database-01800","database-01900","database-02000","database-02100","database-02200","database-02300","database-02400","database-02500","database-02600","database-02700","database-02800","database-02900","database-03100","database-03200","ejb-01000","embedded-framework-01000","embedded-framework-01010","embedded-framework-01100","embedded-framework-01200","embedded-framework-01300","embedded-framework-01400","embedded-framework-01500","embedded-framework-01600","embedded-framework-01700","embedded-framework-02000","embedded-framework-02200","embedded-framework-02300","embedded-framework-02400","embedded-framework-03000","embedded-framework-03100","embedded-framework-03200","embedded-framework-03300","embedded-framework-03400","embedded-framework-04700","embedded-framework-05000","embedded-framework-05100","embedded-framework-05300","embedded-framework-05400","embedded-framework-05500","embedded-framework-05600","embedded-framework-05700","embedded-framework-05800","embedded-framework-05900","embedded-framework-06000","embedded-framework-06100","embedded-framework-06200","embedded-framework-06300","embedded-framework-06400","embedded-framework-06500","embedded-framework-06600","embedded-framework-06700","embedded-framework-06800","embedded-framework-06900","embedded-framework-07000","embedded-framework-07100","embedded-framework-07200","embedded-framework-07300","embedded-framework-07400","embedded-framework-07500","embedded-framework-07600","embedded-framework-07700","embedded-framework-07800","embedded-framework-07900","embedded-framework-08000","embedded-framework-08100","embedded-framework-08200","embedded-framework-08300","embedded-framework-08400","embedded-framework-08500","embedded-framework-08600","embedded-framework-08700","embedded-framework-08800","embedded-framework-08900","embedded-framework-09000","embedded-framework-09100","embedded-framework-09200","embedded-framework-09300","embedded-framework-embedded-framework-02700","embedded-framework-embedded-framework-02800","embedded-framework-embedded-framework-02900","embedded-framework-embedded-framework-03000","embedded-framework-embedded-framework-03100","embedded-framework-embedded-framework-03200","embedded-framework-embedded-framework-03300","embedded-framework-embedded-framework-03400","embedded-framework-embedded-framework-03500","embedded-framework-embedded-framework-03600","embedded-framework-embedded-framework-03700","embedded-framework-embedded-framework-03800","embedded-framework-embedded-framework-03900","embedded-framework-embedded-framework-04000","embedded-framework-embedded-framework-04100","embedded-framework-embedded-framework-04200","embedded-framework-embedded-framework-04300","embedded-framework-embedded-framework-04400","embedded-framework-embedded-framework-04500","embedded-framework-embedded-framework-04600","embedded-framework-embedded-framework-09200","embedded-framework-embedded-framework-09300","integration-00001","integration-00002","integration-00003","integration-00004","integration-00005","integration-00006","integration-00007","integration-00008","integration-00009","integration-00010","integration-00011","integration-00012","integration-00013","integration-00014","integration-00015","integration-00016","integration-00017","javaee-technology-usage-00010","javaee-technology-usage-00011","javaee-technology-usage-00012","javaee-technology-usage-00013","javaee-technology-usage-00020-jakarta","javaee-technology-usage-00040","javaee-technology-usage-00050","javaee-technology-usage-00060","javaee-technology-usage-00070","javaee-technology-usage-00080","javaee-technology-usage-00090","javaee-technology-usage-00100","javaee-technology-usage-00110","javaee-technology-usage-00120","javaee-technology-usage-00130","javaee-technology-usage-00140","javaee-technology-usage-00150","javaee-technology-usage-00160","javaee-technology-usage-00170","javaee-technology-usage-00180","javaee-technology-usage-00190","javaee-technology-usage-00200","javaee-technology-usage-00210","javaee-technology-usage-00220","javaee-technology-usage-00230","javaee-technology-usage-00902","javaee-technology-usage-00903","javaee-technology-usage-00905","javaee-technology-usage-00906","javaee-technology-usage-00910","javaee-technology-usage-00911","javaee-technology-usage-00912","javaee-technology-usage-00913","javaee-technology-usage-00914","javaee-technology-usage-00915","javaee-technology-usage-00916","javaee-technology-usage-00917","javaee-technology-usage-00918","javaee-technology-usage-00926","javaee-technology-usage-00927","javaee-technology-usage-00928","javaee-technology-usage-00930","javaee-technology-usage-00931","javaee-technology-usage-00932","javaee-technology-usage-00950","javaee-technology-usage-00951","javaee-technology-usage-00952","javaee-technology-usage-00953","javaee-technology-usage-00954","javaee-technology-usage-00955","javaee-technology-usage-00956","javaee-technology-usage-00957","javaee-technology-usage-00958","javase-01000","javase-01100","javase-technology-usage-01000","jta-00020","jta-00030","jta-00040","jta-00050","jta-00060","jta-00070","jta-00080","jta-00090","jta-00100","jta-00110","jta-00120","jta-00130","jta-00140","jta-00150","jta-00160","jta-00170","jta-00180","jta-00190","jta-00200","jta-00210","logging-usage-00010","logging-usage-00020","logging-usage-00030","logging-usage-00040","logging-usage-00050","logging-usage-00080","logging-usage-00090","logging-usage-00100","logging-usage-00110","logging-usage-00120","logging-usage-00130","logging-usage-00140","logging-usage-00150","logging-usage-00160","logging-usage-00170","logging-usage-00180","logging-usage-00190","logging-usage-00200","logging-usage-00210","logging-usage-00220","logging-usage-00230","logging-usage-00240","logging-usage-00250","logging-usage-00260","logging-usage-00270","logging-usage-00280","logging-usage-00290","mvc-01000","mvc-01100","mvc-01200","mvc-01210","mvc-01220","mvc-01300","mvc-01400","mvc-01500","mvc-01600","mvc-01700","mvc-01800","mvc-01900","mvc-02000","mvc-02100","mvc-02200","mvc-02300","mvc-02400","mvc-02500","mvc-02600","mvc-02700","mvc-02800","mvc-02900","mvc-03000","mvc-03100","mvc-03200","mvc-03300","mvc-03400","mvc-03500","mvc-03600","mvc-03700","mvc-03800","mvc-03900","mvc-04000","mvc-04100","mvc-04200","mvc-04300","mvc-04400","mvc-04500","mvc-04600","mvc-04700","mvc-04800","mvc-04900","mvc-05000","mvc-05100","mvc-05200","mvc-05300","mvc-05400","mvc-05500","mvc-05600","mvc-05700","mvc-05800","mvc-05900","mvc-06000","non-xml-technology-usage-05000","non-xml-technology-usage-06000","non-xml-technology-usage-12000","non-xml-technology-usage-13000","non-xml-technology-usage-14000","non-xml-technology-usage-18000","non-xml-technology-usage-19000","non-xml-technology-usage-20000","non-xml-technology-usage-21000","non-xml-technology-usage-22000","non-xml-technology-usage-23000","non-xml-technology-usage-24000","non-xml-technology-usage-25000","non-xml-technology-usage-26000","non-xml-technology-usage-27000","observability-0100","observability-0200","observability-technology-usage-0100","observability-technology-usage-0200","security-01100","security-01200","security-01300","security-01400","security-01500","security-01600","security-01700","security-01800","security-01900","security-02000","security-02100","security-02200","security-02300","security-02400","security-02500","security-02600","security-02700","security-02800","security-02900","security-03000","security-03100","security-03200","security-03300","security-03400","security-03500","security-03600","spring-catchall-00001","technology-usage-3rd-party-01000","technology-usage-3rd-party-02000","technology-usage-3rd-party-03000","technology-usage-3rd-party-04000","technology-usage-3rd-party-05000","technology-usage-3rd-party-06000","technology-usage-3rd-party-08000","technology-usage-3rd-party-09000","technology-usage-3rd-party-10000","technology-usage-3rd-party-11000","technology-usage-3rd-party-12000","technology-usage-3rd-party-13000","technology-usage-3rd-party-14000","technology-usage-3rd-party-15000","technology-usage-3rd-party-16000","technology-usage-3rd-party-17000","technology-usage-3rd-party-18000","technology-usage-3rd-party-19000","technology-usage-3rd-party-20000","technology-usage-clustering-02000","technology-usage-connect-01100","technology-usage-connect-01101","technology-usage-connect-01200","technology-usage-connect-01300","technology-usage-connect-01400","technology-usage-connect-01500","technology-usage-connect-01600","technology-usage-connect-01700","technology-usage-connect-01800","technology-usage-connect-01900","technology-usage-connect-02000","technology-usage-connect-02100","technology-usage-connect-02200","technology-usage-connect-02300","technology-usage-connect-02400","technology-usage-connect-02500","technology-usage-connect-02600","technology-usage-connect-02700","technology-usage-connect-02800","technology-usage-database-01400","technology-usage-database-01500","technology-usage-database-01600","technology-usage-database-01700","technology-usage-database-01800","technology-usage-database-01900","technology-usage-database-02000","technology-usage-database-02100","technology-usage-database-02200","technology-usage-database-02300","technology-usage-database-02400","technology-usage-database-02500","technology-usage-database-02600","technology-usage-database-02700","technology-usage-database-02800","technology-usage-database-02900","technology-usage-database-03100","technology-usage-database-03200","technology-usage-ejb-01400","technology-usage-embedded-framework-01000","technology-usage-embedded-framework-01010","technology-usage-embedded-framework-01100","technology-usage-embedded-framework-01200","technology-usage-embedded-framework-01300","technology-usage-embedded-framework-01400","technology-usage-embedded-framework-01500","technology-usage-embedded-framework-01600","technology-usage-embedded-framework-01700","technology-usage-embedded-framework-02000","technology-usage-embedded-framework-02100","technology-usage-embedded-framework-02200","technology-usage-embedded-framework-02300","technology-usage-embedded-framework-02400","technology-usage-embedded-framework-04700","technology-usage-embedded-framework-05000","technology-usage-embedded-framework-05100","technology-usage-embedded-framework-05300","technology-usage-embedded-framework-05400","technology-usage-embedded-framework-05600","technology-usage-embedded-framework-05700","technology-usage-embedded-framework-05800","technology-usage-embedded-framework-05900","technology-usage-embedded-framework-06000","technology-usage-embedded-framework-06100","technology-usage-embedded-framework-06200","technology-usage-embedded-framework-06300","technology-usage-embedded-framework-06400","technology-usage-embedded-framework-06500","technology-usage-embedded-framework-06600","technology-usage-embedded-framework-06700","technology-usage-embedded-framework-06800","technology-usage-embedded-framework-06900","technology-usage-embedded-framework-07000","technology-usage-embedded-framework-07100","technology-usage-embedded-framework-07200","technology-usage-embedded-framework-07300","technology-usage-embedded-framework-07400","technology-usage-embedded-framework-07500","technology-usage-embedded-framework-07600","technology-usage-embedded-framework-07700","technology-usage-embedded-framework-07800","technology-usage-embedded-framework-07900","technology-usage-embedded-framework-08000","technology-usage-embedded-framework-08100","technology-usage-embedded-framework-08200","technology-usage-embedded-framework-08300","technology-usage-embedded-framework-08400","technology-usage-embedded-framework-08500","technology-usage-embedded-framework-08600","technology-usage-embedded-framework-08700","technology-usage-embedded-framework-08800","technology-usage-embedded-framework-08900","technology-usage-embedded-framework-09000","technology-usage-embedded-framework-09100","technology-usage-integration-00001","technology-usage-integration-00002","technology-usage-integration-00003","technology-usage-integration-00004","technology-usage-integration-00005","technology-usage-integration-00006","technology-usage-integration-00007","technology-usage-integration-00008","technology-usage-integration-00009","technology-usage-integration-00010","technology-usage-integration-00011","technology-usage-integration-00012","technology-usage-integration-00013","technology-usage-integration-00014","technology-usage-integration-00015","technology-usage-jta-00020","technology-usage-jta-00030","technology-usage-jta-00040","technology-usage-jta-00050","technology-usage-jta-00060","technology-usage-jta-00070","technology-usage-jta-00080","technology-usage-jta-00090","technology-usage-jta-00100","technology-usage-jta-00110","technology-usage-jta-00120","technology-usage-jta-00130","technology-usage-jta-00140","technology-usage-jta-00150","technology-usage-jta-00160","technology-usage-jta-00170","technology-usage-jta-00180","technology-usage-jta-00190","technology-usage-jta-00200","technology-usage-jta-00210","technology-usage-logging-00010","technology-usage-logging-000100","technology-usage-logging-000110","technology-usage-logging-000120","technology-usage-logging-000130","technology-usage-logging-000140","technology-usage-logging-000150","technology-usage-logging-000160","technology-usage-logging-000170","technology-usage-logging-000180","technology-usage-logging-000190","technology-usage-logging-00020","technology-usage-logging-000200","technology-usage-logging-000210","technology-usage-logging-000220","technology-usage-logging-000230","technology-usage-logging-000240","technology-usage-logging-000250","technology-usage-logging-000260","technology-usage-logging-000270","technology-usage-logging-000280","technology-usage-logging-000290","technology-usage-logging-00030","technology-usage-logging-00040","technology-usage-logging-00050","technology-usage-logging-00060","technology-usage-logging-00070","technology-usage-logging-00080","technology-usage-logging-00090","technology-usage-markup-01300","technology-usage-mvc-01000","technology-usage-mvc-01100","technology-usage-mvc-01200","technology-usage-mvc-01300","technology-usage-mvc-01400","technology-usage-mvc-01500","technology-usage-mvc-01600","technology-usage-mvc-01700","technology-usage-mvc-01800","technology-usage-mvc-01900","technology-usage-mvc-02000","technology-usage-mvc-02100","technology-usage-mvc-02200","technology-usage-mvc-02300","technology-usage-mvc-02400","technology-usage-mvc-02500","technology-usage-mvc-02600","technology-usage-mvc-02700","technology-usage-mvc-02800","technology-usage-mvc-02900","technology-usage-mvc-03000","technology-usage-mvc-03100","technology-usage-mvc-03200","technology-usage-mvc-03300","technology-usage-mvc-03400","technology-usage-mvc-03500","technology-usage-mvc-03600","technology-usage-mvc-03700","technology-usage-mvc-03800","technology-usage-mvc-03900","technology-usage-mvc-04000","technology-usage-mvc-04100","technology-usage-mvc-04300","technology-usage-mvc-04400","technology-usage-mvc-04500","technology-usage-mvc-04600","technology-usage-mvc-04700","technology-usage-mvc-04800","technology-usage-mvc-04900","technology-usage-mvc-05000","technology-usage-mvc-05100","technology-usage-mvc-05200","technology-usage-mvc-05300","technology-usage-mvc-05400","technology-usage-mvc-05500","technology-usage-mvc-05600","technology-usage-mvc-05700","technology-usage-mvc-05800","technology-usage-mvc-05900","technology-usage-mvc-06000","technology-usage-mvc-0x4200","technology-usage-security-01000","technology-usage-security-01100","technology-usage-security-01200","technology-usage-security-01300","technology-usage-security-01400","technology-usage-security-01500","technology-usage-security-01600","technology-usage-security-01700","technology-usage-security-01800","technology-usage-security-01900","technology-usage-security-02000","technology-usage-security-02100","technology-usage-security-02200","technology-usage-security-02300","technology-usage-security-02400","technology-usage-security-02500","technology-usage-security-02600","technology-usage-security-02700","technology-usage-security-02800","technology-usage-security-02900","technology-usage-security-03000","technology-usage-security-03100","technology-usage-security-03200","technology-usage-security-03300","technology-usage-security-03400","technology-usage-security-03500","technology-usage-test-frameworks-00010","technology-usage-test-frameworks-00020","technology-usage-test-frameworks-00030","technology-usage-test-frameworks-00040","technology-usage-test-frameworks-00050","technology-usage-test-frameworks-00060","technology-usage-test-frameworks-00070","technology-usage-test-frameworks-00080","technology-usage-test-frameworks-00090","technology-usage-test-frameworks-00100","technology-usage-test-frameworks-00110","technology-usage-test-frameworks-00120","technology-usage-test-frameworks-00130","technology-usage-test-frameworks-00140","technology-usage-test-frameworks-00150","technology-usage-test-frameworks-00160","technology-usage-test-frameworks-00170","technology-usage-test-frameworks-00180","technology-usage-test-frameworks-00190","technology-usage-test-frameworks-00200","technology-usage-test-frameworks-00210","technology-usage-test-frameworks-00220","technology-usage-test-frameworks-00230","technology-usage-test-frameworks-00240","technology-usage-test-frameworks-00250","technology-usage-test-frameworks-00260","technology-usage-test-frameworks-00270","technology-usage-test-frameworks-00280","technology-usage-test-frameworks-00290","technology-usage-test-frameworks-00300","technology-usage-test-frameworks-00310","technology-usage-test-frameworks-00320","technology-usage-test-frameworks-00330","technology-usage-test-frameworks-00340","technology-usage-test-frameworks-00350","technology-usage-test-frameworks-00360","technology-usage-test-frameworks-00370","technology-usage-web-01000","technology-usage-web-01100","technology-usage-web-01300","technology-usage-web-01400","technology-usage-web-01500","technology-usage-web-01600","technology-usage-web-01700","technology-usage-web-01800","technology-usage-web-01900","technology-usage-web-02000","technology-usage-web-02100","technology-usage-web-02200","technology-usage-web-02300","technology-usage-web-02400","test-frameworks-sauge-00010","test-frameworks-sauge-00020","test-frameworks-sauge-00030","test-frameworks-sauge-00040","test-frameworks-sauge-00050","test-frameworks-sauge-00060","test-frameworks-sauge-00070","test-frameworks-sauge-00080","test-frameworks-sauge-00090","test-frameworks-sauge-00100","test-frameworks-sauge-00110","test-frameworks-sauge-00120","test-frameworks-sauge-00130","test-frameworks-sauge-00140","test-frameworks-sauge-00150","test-frameworks-sauge-00160","test-frameworks-sauge-00170","test-frameworks-sauge-00180","test-frameworks-sauge-00190","test-frameworks-sauge-00200","test-frameworks-sauge-00210","test-frameworks-sauge-00220","test-frameworks-sauge-00230","test-frameworks-sauge-00240","test-frameworks-sauge-00260","test-frameworks-sauge-00270","test-frameworks-sauge-00280","test-frameworks-sauge-00290","test-frameworks-sauge-00300","test-frameworks-sauge-00310","test-frameworks-sauge-00320","test-frameworks-sauge-00330","test-frameworks-sauge-00340","test-frameworks-sauge-00350","test-frameworks-sauge-00360","test-frameworks-sauge-00370","test-frameworks-sauge-00560"]}],"depItems":[{"fileURI":"file:///tmp/source-code/pom.xml","provider":"java","dependencies":[{"name":"com.sun.mail.javax.mail","version":"1.5.0","type":"provided","indirect":true,"resolvedIdentifier":"ec2410fdf7e0a3022e7c2a2e6241039d1abc1e98","extras":{"artifactId":"javax.mail","groupId":"com.sun.mail","pomPath":"/tmp/source-code/pom.xml"},"labels":["konveyor.io/dep-source=open-source","konveyor.io/language=java"],"prefix":"file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0"},{"name":"javax.activation.activation","version":"1.1","type":"provided","indirect":true,"resolvedIdentifier":"e6cb541461c2834bdea3eb920f1884d1eb508b50","extras":{"artifactId":"activation","groupId":"javax.activation","pomPath":"/tmp/source-code/pom.xml"},"labels":["konveyor.io/dep-source=open-source","konveyor.io/language=java"],"prefix":"file:///root/.m2/repository/javax/activation/activation/1.1"},{"name":"javax.javaee-api","version":"7.0","type":"provided","resolvedIdentifier":"51399f902cc27a808122edcbebfaa1ad989954ba","extras":{"artifactId":"javaee-api","groupId":"javax","pomPath":"/tmp/source-code/pom.xml"},"labels":["konveyor.io/dep-source=open-source","konveyor.io/language=java"],"prefix":"file:///root/.m2/repository/javax/javaee-api/7.0"},{"name":"javax.javaee-web-api","version":"7.0","type":"provided","resolvedIdentifier":"b1fce45ba94108ebf7e1cace6427ec8761cabec1","extras":{"artifactId":"javaee-web-api","groupId":"javax","pomPath":"/tmp/source-code/pom.xml"},"labels":["konveyor.io/dep-source=open-source","konveyor.io/language=java"],"prefix":"file:///root/.m2/repository/javax/javaee-web-api/7.0"},{"name":"org.flywaydb.flyway-core","version":"4.1.2","type":"compile","resolvedIdentifier":"b432d0d994cc69a72a00e4bf57e6a1e01c561ceb","extras":{"artifactId":"flyway-core","groupId":"org.flywaydb","pomPath":"/tmp/source-code/pom.xml"},"labels":["konveyor.io/dep-source=open-source","konveyor.io/language=java"],"prefix":"file:///root/.m2/repository/org/flywaydb/flyway-core/4.1.2"},{"name":"org.jboss.spec.javax.jms.jboss-jms-api_2.0_spec","version":"2.0.0.Final","type":"compile","resolvedIdentifier":"4e32d332960da90fdbfee3cb8c97d1395dbbaa22","extras":{"artifactId":"jboss-jms-api_2.0_spec","groupId":"org.jboss.spec.javax.jms","pomPath":"/tmp/source-code/pom.xml"},"labels":["konveyor.io/dep-source=open-source","konveyor.io/language=java"],"prefix":"file:///root/.m2/repository/org/jboss/spec/javax/jms/jboss-jms-api_2.0_spec/2.0.0.Final"},{"name":"org.jboss.spec.javax.rmi.jboss-rmi-api_1.0_spec","version":"1.0.2.Final","type":"compile","resolvedIdentifier":"123c083cc4662fa5062a0a1bc1787e145776190f","extras":{"artifactId":"jboss-rmi-api_1.0_spec","groupId":"org.jboss.spec.javax.rmi","pomPath":"/tmp/source-code/pom.xml"},"labels":["konveyor.io/dep-source=open-source","konveyor.io/language=java"],"prefix":"file:///root/.m2/repository/org/jboss/spec/javax/rmi/jboss-rmi-api_1.0_spec/1.0.2.Final"}]}]}]
